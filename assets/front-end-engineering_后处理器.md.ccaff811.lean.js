import{_ as n,o as a,c as l,a as p}from"./app.f9cf8683.js";const F=JSON.parse('{"title":"PostCSS 后处理器","description":"","frontmatter":{},"headers":[{"level":3,"title":"后处理器的概念","slug":"后处理器的概念","link":"#后处理器的概念","children":[]},{"level":3,"title":"PostCSS 快速上手","slug":"postcss-快速上手","link":"#postcss-快速上手","children":[]},{"level":2,"title":"postcss-cli 和配置文件","slug":"postcss-cli-和配置文件","link":"#postcss-cli-和配置文件","children":[{"level":3,"title":"postcss-cli","slug":"postcss-cli","link":"#postcss-cli","children":[]},{"level":3,"title":"配置文件","slug":"配置文件","link":"#配置文件","children":[]}]},{"level":2,"title":"postcss 主流插件 part1","slug":"postcss-主流插件-part1","link":"#postcss-主流插件-part1","children":[{"level":3,"title":"autoprefixer","slug":"autoprefixer","link":"#autoprefixer","children":[]},{"level":3,"title":"cssnano","slug":"cssnano","link":"#cssnano","children":[]},{"level":3,"title":"stylelint","slug":"stylelint","link":"#stylelint","children":[]}]},{"level":2,"title":"postcss 主流插件 part2","slug":"postcss-主流插件-part2","link":"#postcss-主流插件-part2","children":[{"level":3,"title":"postcss-preset-env","slug":"postcss-preset-env","link":"#postcss-preset-env","children":[]},{"level":3,"title":"postcss-import","slug":"postcss-import","link":"#postcss-import","children":[]},{"level":3,"title":"purgecss","slug":"purgecss","link":"#purgecss","children":[]}]},{"level":2,"title":"抽象语法树","slug":"抽象语法树","link":"#抽象语法树","children":[]},{"level":2,"title":"自定义插件","slug":"自定义插件","link":"#自定义插件","children":[]}],"relativePath":"front-end-engineering/后处理器.md","lastUpdated":1740908463000}'),o={name:"front-end-engineering/后处理器.md"};function e(r,s,c,t,B,i){return a(),l("div",null,s[0]||(s[0]=[p(`<h1 id="postcss-后处理器" tabindex="-1">PostCSS 后处理器 <a class="header-anchor" href="#postcss-后处理器" aria-hidden="true">#</a></h1><h3 id="后处理器的概念" tabindex="-1">后处理器的概念 <a class="header-anchor" href="#后处理器的概念" aria-hidden="true">#</a></h3><p>前面我们学习了 CSS 预处理器，CSS 预处理器（Sass、Less、Stylus）为我们提供了一套特殊的语法，让我们可以以编程的方式（变量、嵌套、内置函数、自定义函数、流程控制）来书写 CSS 样式。因此我们在学习 CSS 预处理器的时候，主要就是学习它们的语法。</p><p>CSS 后处理器不会提供专门的语法，它是在原生的 CSS 代码的基础上面做处理，常见的处理工作如下：</p><ol><li><p>兼容性处理：自动添加浏览器前缀（如 -<em>webkit</em>-、-<em>moz</em>- 和 -<em>ms</em>-）以确保跨浏览器兼容性。这种后处理器的一个典型例子是 <em>autoprefixer</em>。</p></li><li><p>代码优化与压缩：移除多余的空格、注释和未使用的规则，以减小 <em>CSS</em> 文件的大小。例如，<em>cssnano</em> 是一个流行的 <em>CSS</em> 压缩工具。</p></li><li><p>功能增强：添加新的 <em>CSS</em> 特性，使开发者能够使用尚未在所有浏览器中实现的 <em>CSS</em> 功能。例如，<em>PostCSS</em> 是一个强大的 <em>CSS</em> 后处理器，提供了很多插件来扩展 <em>CSS</em> 的功能。</p></li><li><p>代码检查与规范：检查 <em>CSS</em> 代码的质量，以确保代码符合特定的编码规范和最佳实践。例如，<em>stylelint</em> 是一个强大的 <em>CSS</em> 检查工具，可以帮助你发现和修复潜在的问题。</p></li></ol><p>后处理器实际上是有非常非常多的，autoprefixer、cssnano、stylelint 像这些工具都算是在对原生 CSS 做后处理工作。</p><p>这里就会涉及到一个问题，能够对 CSS 做后处理的工具（后处理器）非常非常多，此时就会存在我要将原生的 CSS 先放入到 A 工具进行处理，处理完成后放入到 B 工具进行处理，之后在 C、D、E、F.... 这种手动操作显然是比较费时费力的，我们期望有一种工具，能够自动化的完成这些后处理工作，这个工具就是 PostCSS。</p><p>PostCSS 是一个使用 JavaScript 编写的 CSS 后处理器，它更像是一个平台，类似于 Babel，它本身是不做什么具体的事情，它只负责一件事情，将原生 CSS 转换为 CSS 的抽象语法树（CSS AST），之后的事情就完全交给其他的插件。目前整个 PostCSS 插件生态有 200+ 的插件，每个插件可以帮助我们处理一种 CSS 后处理场景。</p><p>你可以在官网：<a href="https://www.postcss.parts/" target="_blank" rel="noreferrer">https://www.postcss.parts/</a> 看到 PostCSS 里面所有的插件。</p><p>学习 PostCSS 其实主要就是学习里面常用的插件：</p><ul><li><em>autoprefixer</em>：自动为 <em>CSS</em> 中的属性添加浏览器前缀，以确保跨浏览器兼容性。</li><li><em>cssnext</em>：使开发者能够使用尚未在所有浏览器中实现的 <em>CSS</em> 特性，如自定义属性（变量）、颜色函数等。</li><li><em>cssnano</em>：优化并压缩 <em>CSS</em> 代码，以减小文件大小。</li><li><em>postcss-import</em>：在一个 <em>CSS</em> 文件中导入其他 <em>CSS</em> 文件，实现 <em>CSS</em> 代码的模块化。</li><li><em>postcss-nested</em>：支持 <em>CSS</em> 规则的嵌套，使 <em>CSS</em> 代码更加组织化和易于维护。</li><li><em>postcss-custom-properties</em>：支持使用原生 <em>CSS</em> 变量（自定义属性）。</li><li><em>stylelint</em>：<em>CSS</em> 代码检查工具，旨在帮助开发者发现和修复潜在的 <em>CSS</em> 代码问题。</li></ul><h3 id="postcss-快速上手" tabindex="-1">PostCSS 快速上手 <a class="header-anchor" href="#postcss-快速上手" aria-hidden="true">#</a></h3><p>首先创建一个项目目录 postcss-demo，使用 pnpm init 进行初始化，之后安装 postcss 依赖：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#ABB2BF;">pnpm </span><span style="color:#98C379;">add</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">postcss</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">autoprefixer</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-D</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#B392F0;">pnpm </span><span style="color:#9DB1C5;">add</span><span style="color:#B392F0;"> </span><span style="color:#9DB1C5;">postcss</span><span style="color:#B392F0;"> </span><span style="color:#9DB1C5;">autoprefixer</span><span style="color:#B392F0;"> </span><span style="color:#9DB1C5;">-D</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>接下来在 src 创建一个 index.css，书写测试的 CSS 代码：</p><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  background-color: beige;</span></span>
<span class="line"><span style="color:#ABB2BF;">  font-size: </span><span style="color:#D19A66;">16</span><span style="color:#E06C75;">px</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D19A66;">.box1</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  transform: </span><span style="color:#56B6C2;">translate</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">100</span><span style="color:#E06C75;">px</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#FFAB70;">body</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">background-color</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">beige</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">font-size</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">16px</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">.box1 {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">transform</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> translate</span><span style="color:#F8F8F8;">(100px)</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>接下来我们要对上面的代码进行后处理，创建一个 index.js，代码如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 读取 CSS 文件</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 使用 PostCSS 来对读取的 CSS 文件做后处理</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">fs</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;fs&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 负责处理和文件读取相关的事情</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">postcss</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;postcss&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 引入插件，该插件负责为 CSS 代码添加浏览器前缀</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">autoprefixer</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;autoprefixer&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">style</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">fs</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">readFileSync</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;src/index.css&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;utf8&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">postcss</span><span style="color:#ABB2BF;">([</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">autoprefixer</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">overrideBrowserslist</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;last 10 versions&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  }),</span></span>
<span class="line"><span style="color:#ABB2BF;">])</span></span>
<span class="line"><span style="color:#ABB2BF;">  .</span><span style="color:#61AFEF;">process</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">style</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">from</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">undefined</span><span style="color:#ABB2BF;"> })</span></span>
<span class="line"><span style="color:#ABB2BF;">  .</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">res</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">css</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  });</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#6B737C;">// 读取 CSS 文件</span></span>
<span class="line"><span style="color:#6B737C;">// 使用 PostCSS 来对读取的 CSS 文件做后处理</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">fs</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> require(</span><span style="color:#FFAB70;">&quot;fs&quot;</span><span style="color:#B392F0;">); </span><span style="color:#6B737C;">// 负责处理和文件读取相关的事情</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">postcss</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> require(</span><span style="color:#FFAB70;">&quot;postcss&quot;</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#6B737C;">// 引入插件，该插件负责为 CSS 代码添加浏览器前缀</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">autoprefixer</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> require(</span><span style="color:#FFAB70;">&quot;autoprefixer&quot;</span><span style="color:#B392F0;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">style</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">fs</span><span style="color:#B392F0;">.readFileSync(</span><span style="color:#FFAB70;">&quot;src/index.css&quot;</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;utf8&quot;</span><span style="color:#B392F0;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">postcss([</span></span>
<span class="line"><span style="color:#B392F0;">  autoprefixer({</span></span>
<span class="line"><span style="color:#B392F0;">    overrideBrowserslist</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;last 10 versions&quot;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  })</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">])</span></span>
<span class="line"><span style="color:#B392F0;">  .process(style</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> { from</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#B392F0;"> })</span></span>
<span class="line"><span style="color:#B392F0;">  .then((res) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#79B8FF;">res</span><span style="color:#B392F0;">.css);</span></span>
<span class="line"><span style="color:#B392F0;">  });</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>在上面的 JS 代码中，我们首先读取了 index.css 里面的 CSS 代码，然后通过 postcss 来做后处理器，注意 postcss 本身不做任何事情，它只负责将原生的 CSS 代码转为 CSS AST，具体的事情需要插件来完成。</p><p>上面的代码我们配置了 autoprefixer 这个插件，负责为 CSS 添加浏览器前缀。</p><h2 id="postcss-cli-和配置文件" tabindex="-1">postcss-cli 和配置文件 <a class="header-anchor" href="#postcss-cli-和配置文件" aria-hidden="true">#</a></h2><h3 id="postcss-cli" tabindex="-1">postcss-cli <a class="header-anchor" href="#postcss-cli" aria-hidden="true">#</a></h3><p>cli 是一组单词的缩写（command line interface），为你提供了一组在命令行中可以操作的命令来进行处理。</p><p>postcss-cli 通过给我们提供一些命令行的命令来简化 postcss 的使用。</p><p>首先第一步还是安装：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#ABB2BF;">pnpm </span><span style="color:#98C379;">add</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">postcss-cli</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-D</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#B392F0;">pnpm </span><span style="color:#9DB1C5;">add</span><span style="color:#B392F0;"> </span><span style="color:#9DB1C5;">postcss-cli</span><span style="color:#B392F0;"> </span><span style="color:#9DB1C5;">-D</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>安装完成后，我们就可以通过 postcss-cli 所提供的命令来进行文件的编译操作，在 package.json 里面添加如下的脚本：</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#98C379;">&quot;scripts&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">  	</span><span style="color:#FFFFFF;">...</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;build&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;postcss src/index.css -o ./build.css&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">},</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#FFAB70;">&quot;scripts&quot;</span><span style="color:#B392F0;">: {</span></span>
<span class="line"><span style="color:#B392F0;">  	...</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F8F8F8;">&quot;build&quot;</span><span style="color:#BBBBBB;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;postcss src/index.css -o ./build.css&quot;</span></span>
<span class="line"><span style="color:#B392F0;">},</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>-o：表示编译后的输出文件，编译后的文件默认是带有源码映射。</li><li>--no-map：不需要源码映射</li><li>--watch：用于做文件变化的监听工作，当文件有变化的时候，会自动重新执行命令。注意如果使用了 --watch 来做源码文件变化的监听工作，那么一般建议把编辑器的自动保存功能关闭掉</li></ul><p>关于 postcss-cli 这个命令行工具还提供了哪些命令以及哪些配置项目，可以参阅：<a href="https://www.npmjs.com/package/postcss-cli" target="_blank" rel="noreferrer">https://www.npmjs.com/package/postcss-cli</a></p><h3 id="配置文件" tabindex="-1">配置文件 <a class="header-anchor" href="#配置文件" aria-hidden="true">#</a></h3><p>一般我们会把插件的配置书写到配置文件里面，在配置文件里面，我们就可以指定使用哪些插件，以及插件具体的配置选项。</p><p>要使用配置文件功能，可以在项目的根目录下面创建一个名为 postcss.config.js 的文件，当你使用 postcss-cli 或者构建工具（webpack、vite）来进行集成的时候，postcss 会自动加载配置文件。</p><p>在 postcss.config.js 文件中书写如下的配置：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">plugins</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;autoprefixer&quot;</span><span style="color:#ABB2BF;">)({</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">overrideBrowserslist</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;last 10 versions&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    }),</span></span>
<span class="line"><span style="color:#ABB2BF;">  ],</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  plugins</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> [</span></span>
<span class="line"><span style="color:#B392F0;">    require(</span><span style="color:#FFAB70;">&quot;autoprefixer&quot;</span><span style="color:#B392F0;">)({</span></span>
<span class="line"><span style="color:#B392F0;">      overrideBrowserslist</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;last 10 versions&quot;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    })</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  ]</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>postcss 配置文件最主要的其实就是做插件的配置。postcss 官网没有提供配置文件相关的文档，但是我们可以在：<a href="https://github.com/postcss/postcss-load-config" target="_blank" rel="noreferrer">https://github.com/postcss/postcss-load-config</a> 这个地方看到 postcss 配置文件所支持的配置项目。</p><p>接下来我们来看一个 postcss 配置文件具体支持的配置项目：</p><ol><li>plugins：一个数组，里面包含要使用到的 postcss 的插件以及相关的插件配置。</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">plugins</span><span style="color:#ABB2BF;">: [</span><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;autoprefixer&quot;</span><span style="color:#ABB2BF;">), </span><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;cssnano&quot;</span><span style="color:#ABB2BF;">)({ </span><span style="color:#E06C75;">preset</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;default&quot;</span><span style="color:#ABB2BF;"> })],</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  plugins</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> [require(</span><span style="color:#FFAB70;">&quot;autoprefixer&quot;</span><span style="color:#B392F0;">)</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> require(</span><span style="color:#FFAB70;">&quot;cssnano&quot;</span><span style="color:#B392F0;">)({ preset</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;default&quot;</span><span style="color:#B392F0;"> })]</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ol start="2"><li>map：是否生成源码映射，对应的值为一个对象</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">map</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">inline</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">plugins</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">/* Your plugins here */</span></span>
<span class="line"><span style="color:#ABB2BF;">  ],</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  map</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> { inline</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">false</span><span style="color:#B392F0;"> }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  plugins</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> [</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">/* Your plugins here */</span></span>
<span class="line"><span style="color:#B392F0;">  ]</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>默认值为 false，因为源码映射一般是会单独存放在一个文件里面。</p><ol start="3"><li>syntax：用于指定 postcss 应该使用的 CSS 语法，默认情况下 postcss 处理的是标准的 CSS，但是有可能你的 CSS 是使用预处理器来写的，这个时候 postcss 是不认识的，所以这个时候需要安装对应的插件并且在配置中指明 syntax</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">syntax</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;postcss-scss&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">plugins</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">/* Your plugins here */</span></span>
<span class="line"><span style="color:#ABB2BF;">  ],</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  syntax</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;postcss-scss&quot;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  plugins</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> [</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">/* Your plugins here */</span></span>
<span class="line"><span style="color:#B392F0;">  ]</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>安装 postcss-scss 这个插件，并且在配置文件中指定 syntax 为 postcss-scss，之后 PostCSS 就能够认识你的 sass 语法。</p><ol start="4"><li>parser：配置自定义解析器。Postcss 默认的解析器为 postcss-safe-parser，负责将 CSS 字符串解析为 CSS AST，如果你要用其他的解析器，那么可以配置一下</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">customParser</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;my-custom-parser&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">parser</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">customParser</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">plugins</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">/* Your plugins here */</span></span>
<span class="line"><span style="color:#ABB2BF;">  ],</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">customParser</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> require(</span><span style="color:#FFAB70;">&quot;my-custom-parser&quot;</span><span style="color:#B392F0;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  parser</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> customParser</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  plugins</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> [</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">/* Your plugins here */</span></span>
<span class="line"><span style="color:#B392F0;">  ]</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ol start="5"><li>stringifier：自定义字符串化器。用于将 CSS AST 转回 CSS 字符串。如果你要使用其他的字符串化器，那么也是可以在配置文件中国呢进行指定的。</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">customStringifier</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;my-custom-stringifier&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">stringifier</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">customStringifier</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">plugins</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">/* Your plugins here */</span></span>
<span class="line"><span style="color:#ABB2BF;">  ],</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">customStringifier</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> require(</span><span style="color:#FFAB70;">&quot;my-custom-stringifier&quot;</span><span style="color:#B392F0;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  stringifier</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> customStringifier</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  plugins</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> [</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">/* Your plugins here */</span></span>
<span class="line"><span style="color:#B392F0;">  ]</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>最后还剩下两个配置项：from、to，这两个选项官方是不建议你配置的，而且你配置的大概率还会报错，报错信息如下：</p><blockquote><p>Config Error: Can not set from or to options in config file, use CLI arguments instead</p></blockquote><p>这个提示的意思是让我们不要在配置文件里面进行配置，而是通过命令行参数的形式来指定。</p><p>至于为什么，官方其实解释得很清楚了：</p><blockquote><p><em>In most cases options.from &amp;&amp; <a href="http://options.to" target="_blank" rel="noreferrer">options.to</a> are set by the third-party which integrates this package (CLI, gulp, webpack). It&#39;s unlikely one needs to set/use options.from &amp;&amp; <a href="http://options.to" target="_blank" rel="noreferrer">options.to</a> within a config file.</em></p></blockquote><p>因为在实际开发中，我们更多的是会使用构建工具（webpack、vite），这些工具会去指定入口文件和出口文件。</p><h2 id="postcss-主流插件-part1" tabindex="-1">postcss 主流插件 part1 <a class="header-anchor" href="#postcss-主流插件-part1" aria-hidden="true">#</a></h2><ul><li>autoprefixer</li><li>cssnano</li><li>stylelint</li></ul><h3 id="autoprefixer" tabindex="-1">autoprefixer <a class="header-anchor" href="#autoprefixer" aria-hidden="true">#</a></h3><p>这里我们再来复习一下：</p><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/* 编译前 */</span></span>
<span class="line"><span style="color:#56B6C2;">::placeholder</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  color: </span><span style="color:#D19A66;">gray</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D19A66;">.image</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  background-image: </span><span style="color:#56B6C2;">url</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">image@1x.png</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">@media</span><span style="color:#ABB2BF;"> (min-resolution: </span><span style="color:#D19A66;">2</span><span style="color:#E06C75;">dppx</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#D19A66;">.image</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    background-image: </span><span style="color:#56B6C2;">url</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">image@2x.png</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#6B737C;">/* 编译前 */</span></span>
<span class="line"><span style="color:#B392F0;">::placeholder {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">color</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">gray</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">.image {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">background-image</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> url</span><span style="color:#F8F8F8;">(image@1x.png)</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">@media</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">min-resolution</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">2dppx</span><span style="color:#B392F0;">) {</span></span>
<span class="line"><span style="color:#B392F0;">  .image {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">background-image</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> url</span><span style="color:#F8F8F8;">(image@2x.png)</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/* 编译后 */</span></span>
<span class="line"><span style="color:#56B6C2;">::-webkit-input-placeholder</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  color: </span><span style="color:#D19A66;">gray</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#56B6C2;">::-moz-placeholder</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  color: </span><span style="color:#D19A66;">gray</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#56B6C2;">:-ms-input-placeholder</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  color: </span><span style="color:#D19A66;">gray</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#56B6C2;">::-ms-input-placeholder</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  color: </span><span style="color:#D19A66;">gray</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#56B6C2;">::placeholder</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  color: </span><span style="color:#D19A66;">gray</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D19A66;">.image</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  background-image: </span><span style="color:#56B6C2;">url</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">image@1x.png</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">@media</span><span style="color:#ABB2BF;"> (-webkit-min-device-pixel-ratio: </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">), (min-resolution: </span><span style="color:#D19A66;">2</span><span style="color:#E06C75;">dppx</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#D19A66;">.image</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    background-image: </span><span style="color:#56B6C2;">url</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">image@2x.png</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#6B737C;">/* 编译后 */</span></span>
<span class="line"><span style="color:#B392F0;">::-webkit-input-placeholder {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">color</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">gray</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">::-moz-placeholder {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">color</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">gray</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">:-ms-input-placeholder {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">color</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">gray</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">::-ms-input-placeholder {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">color</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">gray</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">::placeholder {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">color</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">gray</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">.image {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">background-image</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> url</span><span style="color:#F8F8F8;">(image@1x.png)</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">@media</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">-webkit-min-device-pixel-ratio</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">2</span><span style="color:#B392F0;">)</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">min-resolution</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">2dppx</span><span style="color:#B392F0;">) {</span></span>
<span class="line"><span style="color:#B392F0;">  .image {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">background-image</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> url</span><span style="color:#F8F8F8;">(image@2x.png)</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><p>关于 autoprefixer 这个插件，本身没有什么好讲的，主要是要介绍 browerslist 这个知识点，这个 browerslist 主要是用来配置兼容的浏览器的范围。从第一款浏览器诞生到现在，浏览的种类以及版本是非常非常多的，因此我们在做兼容的时候，不可能把所有的浏览器都做兼容，并且也没有意义，一般是需要指定范围的。</p><p>browserslist 就包含了一些配置规则，我们可以通过这些配置规则来指定要兼容的浏览器的范围：</p><ul><li>last n versions：支持最近的 n 个浏览器版本。last 2 versions 表示支持最近的两个浏览器版本</li><li>n% ：支持全球使用率超过 n% 的浏览器。 &gt; 1% 表示要支持全球使用率超过 1% 的浏览器</li><li>cover n%：覆盖 n% 的主流浏览器</li><li>not dead：支持所有“非死亡”的浏览器，已死亡的浏览器指的是那些已经停止更新的浏览器</li><li>not ie&lt;11：排除 ie 11 以下的浏览器</li><li>chrome&gt;=n ：支持 chrome 浏览器大于等于 n 的版本</li></ul><p>你可以在 <a href="https://github.com/browserslist/browserslist#full-list" target="_blank" rel="noreferrer">https://github.com/browserslist/browserslist#full-list</a> 看到 browserslist 可以配置的所有的值。</p><p>另外你可以在 <a href="https://browserslist.dev/?q=PiAxJQ%3D%3D" target="_blank" rel="noreferrer">https://browserslist.dev/?q=PiAxJQ%3D%3D</a> 看到 browserslist 配置的值所对应的浏览器具体范围。</p><p>还有一点就是关于 browserslist 配置的值是可以有多个，如果有多条规则，可以使用关键词 or、and、not 来指定多条规则之间的关系。关于这些关键词如何组合不同的规则，可以参阅：<a href="https://github.com/browserslist/browserslist#query-composition" target="_blank" rel="noreferrer">https://github.com/browserslist/browserslist#query-composition</a></p><p>接下来我们来看一下如何配置 browserslist，常见的有三种方式：</p><ol><li>在项目的根目录下面创建一个 .browerslistrc 的文件，在里面书写范围列表（这种方式是最推荐的）</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#56B6C2;">&gt;</span><span style="color:#D19A66;">1</span><span style="color:#56B6C2;">%</span></span>
<span class="line"><span style="color:#E06C75;">last</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">versions</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">of</span></span>
<span class="line"><span style="color:#E06C75;">not</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">dead</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">&gt;</span><span style="color:#F8F8F8;">1</span><span style="color:#F97583;">%</span></span>
<span class="line"><span style="color:#B392F0;">last </span><span style="color:#F8F8F8;">2</span><span style="color:#B392F0;"> versions </span><span style="color:#F97583;">of</span></span>
<span class="line"><span style="color:#B392F0;">not dead</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ol start="2"><li>在 package.json 里面添加一个 browserslist 字段，然后进行配置：</li></ol><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">&quot;name&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;xxx&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">&quot;version&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#FFFFFF;">:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;xxx&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#FFFFFF;">...</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">&quot;browserslist&quot;</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#98C379;">&quot;&gt; 1%&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#98C379;">&quot;last 2 versions&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#98C379;">&quot;not dead&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">  ]</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#B392F0;">{</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F8F8F8;">&quot;name&quot;</span><span style="color:#BBBBBB;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;xxx&quot;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F8F8F8;">&quot;version&quot;</span><span style="color:#BBBBBB;">:</span><span style="color:#B392F0;"> : </span><span style="color:#FFAB70;">&quot;xxx&quot;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  ...</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F8F8F8;">&quot;browserslist&quot;</span><span style="color:#BBBBBB;">:</span><span style="color:#B392F0;"> [</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#FFAB70;">&quot;&gt; 1%&quot;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#FFAB70;">&quot;last 2 versions&quot;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#FFAB70;">&quot;not dead&quot;</span></span>
<span class="line"><span style="color:#B392F0;">  ]</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><ol start="3"><li>可以在 postcss.config.js 配置文件中进行配置</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">plugins</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;autoprefixer&quot;</span><span style="color:#ABB2BF;">)({</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">overrideBrowserslist</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;last 10 versions&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    }),</span></span>
<span class="line"><span style="color:#ABB2BF;">  ],</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  plugins</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> [</span></span>
<span class="line"><span style="color:#B392F0;">    require(</span><span style="color:#FFAB70;">&quot;autoprefixer&quot;</span><span style="color:#B392F0;">)({</span></span>
<span class="line"><span style="color:#B392F0;">      overrideBrowserslist</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;last 10 versions&quot;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    })</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  ]</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="cssnano" tabindex="-1">cssnano <a class="header-anchor" href="#cssnano" aria-hidden="true">#</a></h3><p>这是一个使用率非常高的插件，因为该插件做的事情是对 CSS 进行一个压缩</p><p>cssnano 对应的官网地址：<a href="https://cssnano.co/" target="_blank" rel="noreferrer">https://cssnano.co/</a></p><p>使用之前第一步还是安装：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#ABB2BF;">pnpm </span><span style="color:#98C379;">add</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">cssnano</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-D</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#B392F0;">pnpm </span><span style="color:#9DB1C5;">add</span><span style="color:#B392F0;"> </span><span style="color:#9DB1C5;">cssnano</span><span style="color:#B392F0;"> </span><span style="color:#9DB1C5;">-D</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>之后就是在配置文件中配置这个插件：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">plugins</span><span style="color:#ABB2BF;">: [</span><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;autoprefixer&quot;</span><span style="color:#ABB2BF;">), </span><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;cssnano&quot;</span><span style="color:#ABB2BF;">)],</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  plugins</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> [require(</span><span style="color:#FFAB70;">&quot;autoprefixer&quot;</span><span style="color:#B392F0;">)</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> require(</span><span style="color:#FFAB70;">&quot;cssnano&quot;</span><span style="color:#B392F0;">)]</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>简单的使用方式演示完了之后，接下来延伸出来了两个问题：</p><ul><li>现在我们插件的数量从之前的一个变成多个，插件之间是否有顺序关系？ <ul><li>在 postcss.config.js 文件里面配置插件的时候，一定要注意插件的顺序，这一点是非常重要的，因为有一些插件依赖于其他的插件的输出，你可以将 plugins 对应的数组看作是一个流水线的操作。先交给数组的第一项插件进行处理，之后将处理结果交给数组配置的第二项插件进行处理，以此类推...</li></ul></li><li>cssnano 是否需要传入配置 <ul><li>理论上来讲，是不需要的，因为 cssnano 默认的预设就已经非常好了，一般我们不需要做其他的配置</li><li>cssnano 本身又是由一些其他的插件组成的 <ul><li><em>postcss-discard-comments</em>：删除 <em>CSS</em> 中的注释。</li><li><em>postcss-discard-duplicates</em>：删除 <em>CSS</em> 中的重复规则。</li><li><em>postcss-discard-empty</em>：删除空的规则、媒体查询和声明。</li><li><em>postcss-discard-overridden</em>：删除被后来的相同规则覆盖的无效规则。</li><li><em>postcss-normalize-url</em>：优化和缩短 URL。</li><li><em>postcss-minify-font-values</em>：最小化字体属性值。</li><li><em>postcss-minify-gradients</em>：最小化渐变表示。</li><li><em>postcss-minify-params</em>：最小化@规则的参数。</li><li><em>postcss-minify-selectors</em>：最小化选择器。</li><li><em>postcss-normalize-charset</em>：确保只有一个有效的字符集 @规则。</li><li><em>postcss-normalize-display-values</em>：规范化 display 属性值。</li><li><em>postcss-normalize-positions</em>：规范化背景位置属性。</li><li><em>postcss-normalize-repeat-style</em>：规范化背景重复样式。</li><li><em>postcss-normalize-string</em>：规范化引号。</li><li><em>postcss-normalize-timing-functions</em>：规范化时间函数。</li><li><em>postcss-normalize-unicode</em>：规范化 <em>unicode-range</em> 描述符。</li><li><em>postcss-normalize-whitespace</em>：规范化空白字符。</li><li><em>postcss-ordered-values</em>：规范化属性值的顺序。</li><li><em>postcss-reduce-initial</em>：将初始值替换为更短的等效值。</li><li><em>postcss-reduce-transforms</em>：减少变换属性中的冗余值。</li><li><em>postcss-svgo</em>：优化和压缩内联 SVG。</li><li><em>postcss-unique-selectors</em>：删除重复的选择器。</li><li><em>postcss-zindex</em>：重新计算 <em>z-index</em> 值，以减小文件大小。</li></ul></li></ul></li></ul><p>因此我们可以定制具体某一个插件的行为，例如：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// postcss 配置主要其实就是做插件的配置</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">plugins</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;autoprefixer&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;cssnano&quot;</span><span style="color:#ABB2BF;">)({</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">preset</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#98C379;">&quot;default&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        {</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#E06C75;">discardComments</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#E06C75;">discardEmpty</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        },</span></span>
<span class="line"><span style="color:#ABB2BF;">      ],</span></span>
<span class="line"><span style="color:#ABB2BF;">    }),</span></span>
<span class="line"><span style="color:#ABB2BF;">  ],</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#6B737C;">// postcss 配置主要其实就是做插件的配置</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  plugins</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> [</span></span>
<span class="line"><span style="color:#B392F0;">    require(</span><span style="color:#FFAB70;">&quot;autoprefixer&quot;</span><span style="color:#B392F0;">)</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    require(</span><span style="color:#FFAB70;">&quot;cssnano&quot;</span><span style="color:#B392F0;">)({</span></span>
<span class="line"><span style="color:#B392F0;">      preset</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> [</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#FFAB70;">&quot;default&quot;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">        {</span></span>
<span class="line"><span style="color:#B392F0;">          discardComments</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">false</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">          discardEmpty</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">false</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">        }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">      ]</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    })</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  ]</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>配置项目的名字可以在 <a href="https://cssnano.co/docs/what-are-optimisations/" target="_blank" rel="noreferrer">https://cssnano.co/docs/what-are-optimisations/</a> 这里找到。</p><h3 id="stylelint" tabindex="-1">stylelint <a class="header-anchor" href="#stylelint" aria-hidden="true">#</a></h3><p>stylelint 是规范我们 CSS 代码的，能够将 CSS 代码统一风格。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#ABB2BF;">pnpm </span><span style="color:#98C379;">add</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">stylelint</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">stylelint-config-standard</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-D</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#B392F0;">pnpm </span><span style="color:#9DB1C5;">add</span><span style="color:#B392F0;"> </span><span style="color:#9DB1C5;">stylelint</span><span style="color:#B392F0;"> </span><span style="color:#9DB1C5;">stylelint-config-standard</span><span style="color:#B392F0;"> </span><span style="color:#9DB1C5;">-D</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这里我们安装了两个依赖：</p><ul><li>stylelint：做 CSS 代码风格校验，但是具体的校验规则它是不知道了，需要我们提供具体的校验规则</li><li>stylelint-config-standard：这是 stylelint 的一套校验规则，并且是一套标准规则</li></ul><p>接下来我们就需要在项目的根目录下面创建一个 .stylelintrc ，这个文件就使用用来指定你的具体校验规则</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#98C379;">&quot;extends&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;stylelint-config-standard&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#B392F0;">{</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#FFAB70;">&quot;extends&quot;</span><span style="color:#B392F0;">: </span><span style="color:#FFAB70;">&quot;stylelint-config-standard&quot;</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>在上面的代码中，我们指定了校验规则继承 stylelint-config-standard 这一套校验规则</p><p>之后在 postcss.config.js 里面进行插件的配置，配置的时候注意顺序</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// postcss 配置主要其实就是做插件的配置</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">plugins</span><span style="color:#ABB2BF;">: [</span><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;stylelint&quot;</span><span style="color:#ABB2BF;">), </span><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;autoprefixer&quot;</span><span style="color:#ABB2BF;">), </span><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;cssnano&quot;</span><span style="color:#ABB2BF;">)],</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#6B737C;">// postcss 配置主要其实就是做插件的配置</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  plugins</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> [require(</span><span style="color:#FFAB70;">&quot;stylelint&quot;</span><span style="color:#B392F0;">)</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> require(</span><span style="color:#FFAB70;">&quot;autoprefixer&quot;</span><span style="color:#B392F0;">)</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> require(</span><span style="color:#FFAB70;">&quot;cssnano&quot;</span><span style="color:#B392F0;">)]</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li><p>能否在继承了 stylelint-config-standard 这一套校验规则的基础上自定义校验规则</p><ul><li>肯定是可以的。因为不同的公司编码规范会有不同，一套标准校验规则是没有办法覆盖所有的公司编码规范</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#98C379;">&quot;extends&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;stylelint-config-standard&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#98C379;">&quot;rules&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#98C379;">&quot;comment-empty-line-before&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">null</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#B392F0;">{</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#FFAB70;">&quot;extends&quot;</span><span style="color:#B392F0;">: </span><span style="color:#FFAB70;">&quot;stylelint-config-standard&quot;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#FFAB70;">&quot;rules&quot;</span><span style="color:#B392F0;">: {</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#FFAB70;">&quot;comment-empty-line-before&quot;</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">null</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>通过上面的方式，我们就可以自定义校验规则。</p><p>至于有哪些校验规则，可以在 stylelint 官网查询到的：<a href="https://stylelint.io/user-guide/rules/" target="_blank" rel="noreferrer">https://stylelint.io/user-guide/rules/</a></p></li><li><p>检查出来的问题能否自动修复</p><ul><li>当然也是可以修复的，但是要注意没有办法修复所有类型的问题，只有部分问题能够被修复</li><li>要自动修复非常简单，只需要将 stylelint 插件的 fix 配置项配置为 true 即可</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// postcss 配置主要其实就是做插件的配置</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">plugins</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;stylelint&quot;</span><span style="color:#ABB2BF;">)({</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">fix</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    }),</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;autoprefixer&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// require(&quot;cssnano&quot;)</span></span>
<span class="line"><span style="color:#ABB2BF;">  ],</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#6B737C;">// postcss 配置主要其实就是做插件的配置</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  plugins</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> [</span></span>
<span class="line"><span style="color:#B392F0;">    require(</span><span style="color:#FFAB70;">&quot;stylelint&quot;</span><span style="color:#B392F0;">)({</span></span>
<span class="line"><span style="color:#B392F0;">      fix</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">true</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    })</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    require(</span><span style="color:#FFAB70;">&quot;autoprefixer&quot;</span><span style="color:#B392F0;">)</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">// require(&quot;cssnano&quot;)</span></span>
<span class="line"><span style="color:#B392F0;">  ]</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></li></ul><h2 id="postcss-主流插件-part2" tabindex="-1">postcss 主流插件 part2 <a class="header-anchor" href="#postcss-主流插件-part2" aria-hidden="true">#</a></h2><p>这一小节继续介绍 postcss 里面的主流插件：</p><ul><li><em>postcss-preset-env</em></li><li><em>postcss-import</em></li><li><em>purgecss</em></li></ul><h3 id="postcss-preset-env" tabindex="-1"><em>postcss-preset-env</em> <a class="header-anchor" href="#postcss-preset-env" aria-hidden="true">#</a></h3><p>postcss-preset-env 主要就是让开发者可以使用最新的的 CSS 语法，同时为了兼容会自动的将这些最新的 CSS 语法转换为旧版本浏览器能够支持的代码。</p><p><em>postcss-preset-env</em> 的主要作用是：</p><ol><li>让你能够使用最新的 <em>CSS</em> 语法，如：<em>CSS Grid</em>（网格布局）、<em>CSS Variables</em>（变量）等。</li><li>自动为你的 <em>CSS</em> 代码添加浏览器厂商前缀，如：-<em>webkit</em>-、-<em>moz</em>- 等。</li><li>根据你的浏览器兼容性需求，将 <em>CSS</em> 代码转换为旧版浏览器兼容的语法。</li><li>优化 <em>CSS</em> 代码，如：合并规则、删除重复的代码等。</li></ol><p>在正式演示 postcss-preset-env 之前，首先我们需要了解一个知识点，叫做 CSSDB，这是一个跟踪 CSS 新功能和特性的数据库。我们的 CSS 规范一共可以分为 5 个阶段：从 stage0（草案） 到 stage4（已经纳入 W3C 标准）。CSSDB 就可以非常方便的查询某一个特性目前处于哪一个阶段，具体的实现情况目前是什么样的。</p><p>下面是关于 stage0 到 stage4 各个阶段的介绍：</p><ul><li><em>Stage 0</em>：草案 - 此阶段的规范还在非正式的讨论和探讨阶段，可能会有很多变化。通常不建议在生产环境中使用这些特性。</li><li><em>Stage 1</em>：提案 - 此阶段的规范已经有了一个正式的文件，描述了新特性的初步设计。这些特性可能在未来变成标准，但仍然可能发生较大的改变。</li><li><em>Stage 2</em>：草稿 - 在这个阶段，规范已经相对稳定，描述了功能的详细设计。一般来说，浏览器厂商会开始实现并测试这些特性。开发者可以在实验性的项目中尝试使用这些功能，但要注意跟踪规范的变化。</li><li><em>Stage 3</em>：候选推荐 - 此阶段的规范已经基本稳定，主要进行浏览器兼容性测试和微调。开发者可以考虑在生产环境中使用这些特性，但需要确保兼容目标浏览器。</li><li><em>Stage 4</em>：已纳入 W3C 标准 - 这些特性已经成为 W3C CSS 标准的一部分，已经得到了广泛支持。开发者可以放心在生产环境中使用这些特性。</li></ul><p>你可以在 <a href="https://cssdb.org/" target="_blank" rel="noreferrer">https://cssdb.org/</a> 这里看到各种新特性目前处于哪一个阶段。</p><p>假设现在我们书写如下的 CSS 代码：</p><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#D19A66;">.a</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  color: </span><span style="color:#D19A66;">red</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  &amp;.b {</span></span>
<span class="line"><span style="color:#ABB2BF;">    color: </span><span style="color:#D19A66;">green</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    transform: </span><span style="color:#56B6C2;">translate</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">100</span><span style="color:#E06C75;">px</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  &amp; &gt; </span><span style="color:#D19A66;">.b</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    color: </span><span style="color:#D19A66;">blue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  &amp;</span><span style="color:#56B6C2;">:hover</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    color: </span><span style="color:#D19A66;">#000</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#B392F0;">.a {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">color</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">red</span><span style="color:#B392F0;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">  &amp;.</span><span style="color:#79B8FF;">b</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">color</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">green</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">transform</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> translate</span><span style="color:#F8F8F8;">(100px)</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">  &amp; </span><span style="color:#F97583;">&gt;</span><span style="color:#B392F0;"> .b {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">color</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">blue</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">  &amp;:hover {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">color</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">#000</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>这个 CSS 代码使用到了嵌套，这是原本只能在 CSS 预处理器里面才能使用的语法，目前官方已经在考虑原生支持了。</p><p>但是现在会涉及到一个问题，如果我们目前直接书写嵌套的语法，那么很多浏览器是不支持的，但是我又想使用最新的语法，我们就可以使用 postcss-preset-env 这个插件对最新的 CSS 语法进行降级处理。</p><p>首先第一步需要安装：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#ABB2BF;">pnpm </span><span style="color:#98C379;">add</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">postcss-preset-env</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-D</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#B392F0;">pnpm </span><span style="color:#9DB1C5;">add</span><span style="color:#B392F0;"> </span><span style="color:#9DB1C5;">postcss-preset-env</span><span style="color:#B392F0;"> </span><span style="color:#9DB1C5;">-D</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>该插件提供了一个配置选项：</p><ul><li><em>stage</em>：设置要使用的 <em>CSS</em> 特性的阶段，默认值为 <em>2</em>（<em>0-4</em>）。数字越小，包含的 <em>CSS</em> 草案特性越多，但稳定性可能较低。</li><li><em>browsers</em>：设置目标浏览器范围，如：&#39;<em>last 2 versions</em>&#39; 或 &#39;&gt; <em>1</em>%&#39;。</li><li><em>autoprefixer</em>：设置自动添加浏览器厂商前缀的配置，如：{ <em>grid</em>: <em>true</em> }。</li><li><em>preserve</em>：是否保留原始 <em>CSS</em> 代码，默认为 <em>false</em>。如果设置为 <em>true</em>，则会在转换后的代码后面保留原始代码，以便新浏览器优先使用新语法。</li></ul><p>在 postcss.config.js 配置文件中，配置该插件：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// postcss 配置主要其实就是做插件的配置</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">plugins</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;postcss-preset-env&quot;</span><span style="color:#ABB2BF;">)({</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">stage</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    }),</span></span>
<span class="line"><span style="color:#ABB2BF;">  ],</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#6B737C;">// postcss 配置主要其实就是做插件的配置</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  plugins</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> [</span></span>
<span class="line"><span style="color:#B392F0;">    require(</span><span style="color:#FFAB70;">&quot;postcss-preset-env&quot;</span><span style="color:#B392F0;">)({</span></span>
<span class="line"><span style="color:#B392F0;">      stage</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">2</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    })</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  ]</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>之后编译生成的 CSS 代码如下：</p><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#D19A66;">.a</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  color: </span><span style="color:#D19A66;">red</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#D19A66;">.a.b</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  color: </span><span style="color:#D19A66;">green</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#56B6C2;">-webkit-transform</span><span style="color:#ABB2BF;">: </span><span style="color:#56B6C2;">translate</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">100</span><span style="color:#E06C75;">px</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#56B6C2;">-ms-transform</span><span style="color:#ABB2BF;">: </span><span style="color:#56B6C2;">translate</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">100</span><span style="color:#E06C75;">px</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  transform: </span><span style="color:#56B6C2;">translate</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">100</span><span style="color:#E06C75;">px</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#D19A66;">.a</span><span style="color:#C678DD;"> </span><span style="color:#ABB2BF;">&gt;</span><span style="color:#C678DD;"> </span><span style="color:#D19A66;">.b</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  color: </span><span style="color:#D19A66;">blue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#D19A66;">.a</span><span style="color:#56B6C2;">:hover</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  color: </span><span style="color:#D19A66;">#000</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#B392F0;">.a {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">color</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">red</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"><span style="color:#B392F0;">.a.b {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">color</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">green</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">-webkit-transform</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> translate</span><span style="color:#F8F8F8;">(100px)</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">-ms-transform</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> translate</span><span style="color:#F8F8F8;">(100px)</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">transform</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> translate</span><span style="color:#F8F8F8;">(100px)</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"><span style="color:#B392F0;">.a </span><span style="color:#F97583;">&gt;</span><span style="color:#B392F0;"> .b {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">color</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">blue</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"><span style="color:#B392F0;">.a:hover {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">color</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">#000</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>通过这个插件，我们就可以使用 CSS 规范中最时髦的语法，而不用担心浏览器的兼容问题。</p><h3 id="postcss-import" tabindex="-1"><em>postcss-import</em> <a class="header-anchor" href="#postcss-import" aria-hidden="true">#</a></h3><p>该插件主要用于处理 CSS 文件中 @import 规则。在原生的 CSS 中，存在 @import，可以引入其他的 CSS 文件，但是在引入的时候会存在一个问题，就是客户端在解析 CSS 文件时，发现有 @import 就会发送 HTTP 请求去获取对应的 CSS 文件。</p><p>使用 postcss-import：</p><ul><li>将多个 CSS 文件合并为一个文件</li><li>避免了浏览器对 @import 规则的额外请求，因为减少了 HTTP 请求，所以提高了性能</li></ul><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#ABB2BF;">pnpm </span><span style="color:#98C379;">add</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">postcss-import</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-D</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#B392F0;">pnpm </span><span style="color:#9DB1C5;">add</span><span style="color:#B392F0;"> </span><span style="color:#9DB1C5;">postcss-import</span><span style="color:#B392F0;"> </span><span style="color:#9DB1C5;">-D</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>安装完成后，在配置文件中进行一个简单的配置：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// postcss 配置主要其实就是做插件的配置</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">plugins</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;postcss-import&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;postcss-preset-env&quot;</span><span style="color:#ABB2BF;">)({</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">stage</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    }),</span></span>
<span class="line"><span style="color:#ABB2BF;">  ],</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#6B737C;">// postcss 配置主要其实就是做插件的配置</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  plugins</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> [</span></span>
<span class="line"><span style="color:#B392F0;">    require(</span><span style="color:#FFAB70;">&quot;postcss-import&quot;</span><span style="color:#B392F0;">)</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    require(</span><span style="color:#FFAB70;">&quot;postcss-preset-env&quot;</span><span style="color:#B392F0;">)({</span></span>
<span class="line"><span style="color:#B392F0;">      stage</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">2</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    })</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  ]</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>最终编译后的 CSS 结果如下：</p><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#D19A66;">.box1</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  background-color: </span><span style="color:#D19A66;">red</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#D19A66;">.box2</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  background-color: </span><span style="color:#D19A66;">blue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#D19A66;">.a</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  color: </span><span style="color:#D19A66;">red</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#D19A66;">.a.b</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  color: </span><span style="color:#D19A66;">green</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#56B6C2;">-webkit-transform</span><span style="color:#ABB2BF;">: </span><span style="color:#56B6C2;">translate</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">100</span><span style="color:#E06C75;">px</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#56B6C2;">-ms-transform</span><span style="color:#ABB2BF;">: </span><span style="color:#56B6C2;">translate</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">100</span><span style="color:#E06C75;">px</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  transform: </span><span style="color:#56B6C2;">translate</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">100</span><span style="color:#E06C75;">px</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#D19A66;">.a</span><span style="color:#C678DD;"> </span><span style="color:#ABB2BF;">&gt;</span><span style="color:#C678DD;"> </span><span style="color:#D19A66;">.b</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  color: </span><span style="color:#D19A66;">blue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#D19A66;">.a</span><span style="color:#56B6C2;">:hover</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  color: </span><span style="color:#D19A66;">#000</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#B392F0;">.box1 {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">background-color</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">red</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"><span style="color:#B392F0;">.box2 {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">background-color</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">blue</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"><span style="color:#B392F0;">.a {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">color</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">red</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"><span style="color:#B392F0;">.a.b {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">color</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">green</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">-webkit-transform</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> translate</span><span style="color:#F8F8F8;">(100px)</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">-ms-transform</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> translate</span><span style="color:#F8F8F8;">(100px)</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">transform</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> translate</span><span style="color:#F8F8F8;">(100px)</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"><span style="color:#B392F0;">.a </span><span style="color:#F97583;">&gt;</span><span style="color:#B392F0;"> .b {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">color</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">blue</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"><span style="color:#B392F0;">.a:hover {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">color</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">#000</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>另外该插件也提供了一些配置项：</p><ul><li><em>path</em>：设置查找 <em>CSS</em> 文件的路径，默认为当前文件夹。</li><li><em>plugins</em>：允许你指定在处理被 @<em>import</em> 引入的 <em>CSS</em> 文件时使用的其他 <em>PostCSS</em> 插件。这些插件将在 <em>postcss-import</em> 合并文件之前对被引入的文件进行处理，之后再进行文件的合并</li></ul><p>例如：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">plugins</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;postcss-import&quot;</span><span style="color:#ABB2BF;">)({</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&quot;src/css&quot;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">plugins</span><span style="color:#ABB2BF;">: [</span><span style="color:#61AFEF;">postcssNested</span><span style="color:#ABB2BF;">()],</span></span>
<span class="line"><span style="color:#ABB2BF;">    }),</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 其他插件...</span></span>
<span class="line"><span style="color:#ABB2BF;">  ],</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  plugins</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> [</span></span>
<span class="line"><span style="color:#B392F0;">    require(</span><span style="color:#FFAB70;">&quot;postcss-import&quot;</span><span style="color:#B392F0;">)({</span></span>
<span class="line"><span style="color:#B392F0;">      path</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> [</span><span style="color:#FFAB70;">&quot;src/css&quot;</span><span style="color:#B392F0;">]</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">      plugins</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> [postcssNested()]</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    })</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">// 其他插件...</span></span>
<span class="line"><span style="color:#B392F0;">  ]</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>在上面的配置中，插件会在 src/css 目录下面去查找被引入的文件，另外文件在被合并到 index.css 之前，会被 postcssNested 这个插件先处理一遍，然后才会被合并到 index.css 里面。</p><p>你可以在 <a href="https://github.com/postcss/postcss-import" target="_blank" rel="noreferrer">https://github.com/postcss/postcss-import</a> 这里看到 postcss-import 所支持的所有配置项。</p><h3 id="purgecss" tabindex="-1"><em>purgecss</em> <a class="header-anchor" href="#purgecss" aria-hidden="true">#</a></h3><p>该插件专门用于移除没有使用到的 CSS 样式的工具，相当于是 CSS 版本的 tree shaking（树摇），它会找到你文件中实际使用的 CSS 类名，并且移除没有使用到的样式，这样可以有效的减少 CSS 文件的大小，提升传输速度。</p><p>官网地址：<a href="https://purgecss.com/" target="_blank" rel="noreferrer">https://purgecss.com/</a></p><p>首先我们还是安装该插件：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#ABB2BF;">pnpm </span><span style="color:#98C379;">add</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">@fullhuman/postcss-purgecss</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-D</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#B392F0;">pnpm </span><span style="color:#9DB1C5;">add</span><span style="color:#B392F0;"> </span><span style="color:#9DB1C5;">@fullhuman/postcss-purgecss</span><span style="color:#B392F0;"> </span><span style="color:#9DB1C5;">-D</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>接下来我们在 src 下面创建一个 index.html，书写如下的代码：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">meta</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">charset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">meta</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;viewport&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;Document&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">link</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">rel</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;stylesheet&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">href</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;./index.css&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;container&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;box1&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#B392F0;">&lt;</span><span style="color:#FFAB70;">head</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">  &lt;</span><span style="color:#FFAB70;">meta</span><span style="color:#B392F0;"> charset</span><span style="color:#F97583;">=</span><span style="color:#FFAB70;">&quot;UTF-8&quot;</span><span style="color:#B392F0;"> /&gt;</span></span>
<span class="line"><span style="color:#B392F0;">  &lt;</span><span style="color:#FFAB70;">meta</span><span style="color:#B392F0;"> name</span><span style="color:#F97583;">=</span><span style="color:#FFAB70;">&quot;viewport&quot;</span><span style="color:#B392F0;"> content</span><span style="color:#F97583;">=</span><span style="color:#FFAB70;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color:#B392F0;"> /&gt;</span></span>
<span class="line"><span style="color:#B392F0;">  &lt;</span><span style="color:#FFAB70;">title</span><span style="color:#B392F0;">&gt;Document&lt;/</span><span style="color:#FFAB70;">title</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">  &lt;</span><span style="color:#FFAB70;">link</span><span style="color:#B392F0;"> rel</span><span style="color:#F97583;">=</span><span style="color:#FFAB70;">&quot;stylesheet&quot;</span><span style="color:#B392F0;"> href</span><span style="color:#F97583;">=</span><span style="color:#FFAB70;">&quot;./index.css&quot;</span><span style="color:#B392F0;"> /&gt;</span></span>
<span class="line"><span style="color:#B392F0;">&lt;/</span><span style="color:#FFAB70;">head</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">&lt;</span><span style="color:#FFAB70;">body</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">  &lt;</span><span style="color:#FFAB70;">div</span><span style="color:#B392F0;"> class</span><span style="color:#F97583;">=</span><span style="color:#FFAB70;">&quot;container&quot;</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">    &lt;</span><span style="color:#FFAB70;">div</span><span style="color:#B392F0;"> class</span><span style="color:#F97583;">=</span><span style="color:#FFAB70;">&quot;box1&quot;</span><span style="color:#B392F0;">&gt;&lt;/</span><span style="color:#FFAB70;">div</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">  &lt;/</span><span style="color:#FFAB70;">div</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">&lt;/</span><span style="color:#FFAB70;">body</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>该 html 只用到了少量的 CSS 样式类。</p><p>目前我们的 index.css 代码如下：</p><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">@import</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;a.css&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">@import</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;b.css&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D19A66;">.a</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  color: </span><span style="color:#D19A66;">red</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  &amp;.b {</span></span>
<span class="line"><span style="color:#ABB2BF;">    color: </span><span style="color:#D19A66;">green</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    transform: </span><span style="color:#56B6C2;">translate</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">100</span><span style="color:#E06C75;">px</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  &amp; &gt; </span><span style="color:#D19A66;">.b</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    color: </span><span style="color:#D19A66;">blue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  &amp;</span><span style="color:#56B6C2;">:hover</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    color: </span><span style="color:#D19A66;">#000</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D19A66;">.container</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  font-size: </span><span style="color:#D19A66;">20</span><span style="color:#E06C75;">px</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  color: </span><span style="color:#D19A66;">red</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">@import</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;a.css&quot;</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#F97583;">@import</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;b.css&quot;</span><span style="color:#B392F0;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">.a {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">color</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">red</span><span style="color:#B392F0;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">  &amp;.</span><span style="color:#79B8FF;">b</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">color</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">green</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">transform</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> translate</span><span style="color:#F8F8F8;">(100px)</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">  &amp; </span><span style="color:#F97583;">&gt;</span><span style="color:#B392F0;"> .b {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">color</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">blue</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">  &amp;:hover {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">color</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">#000</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">.container {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">font-size</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">20px</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFAB70;">p</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">color</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">red</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><p>接下来我在 postcss.config.js 配置文件中引入 @fullhuman/postcss-purgecss 这个插件，具体的配置如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// postcss 配置主要其实就是做插件的配置</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">plugins</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;postcss-import&quot;</span><span style="color:#ABB2BF;">)({</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&quot;src/css&quot;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">    }),</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;postcss-preset-env&quot;</span><span style="color:#ABB2BF;">)({</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">stage</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    }),</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;@fullhuman/postcss-purgecss&quot;</span><span style="color:#ABB2BF;">)({</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">content</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&quot;./src/**/*.html&quot;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">    }),</span></span>
<span class="line"><span style="color:#ABB2BF;">  ],</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#6B737C;">// postcss 配置主要其实就是做插件的配置</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  plugins</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> [</span></span>
<span class="line"><span style="color:#B392F0;">    require(</span><span style="color:#FFAB70;">&quot;postcss-import&quot;</span><span style="color:#B392F0;">)({</span></span>
<span class="line"><span style="color:#B392F0;">      path</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> [</span><span style="color:#FFAB70;">&quot;src/css&quot;</span><span style="color:#B392F0;">]</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    })</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    require(</span><span style="color:#FFAB70;">&quot;postcss-preset-env&quot;</span><span style="color:#B392F0;">)({</span></span>
<span class="line"><span style="color:#B392F0;">      stage</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">2</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    })</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    require(</span><span style="color:#FFAB70;">&quot;@fullhuman/postcss-purgecss&quot;</span><span style="color:#B392F0;">)({</span></span>
<span class="line"><span style="color:#B392F0;">      content</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> [</span><span style="color:#FFAB70;">&quot;./src/**/*.html&quot;</span><span style="color:#B392F0;">]</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    })</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  ]</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>我们引入 @fullhuman/postcss-purgecss 这个插件后，还做了 content 这个配置项目的相关配置，该配置项表示我具体的参照文件。也就是说，CSS 样式类有没有用上需要有一个具体的参照文件。</p><p>最终编译出来的结果如下：</p><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#D19A66;">.box1</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  background-color: </span><span style="color:#D19A66;">red</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#D19A66;">.container</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  font-size: </span><span style="color:#D19A66;">20</span><span style="color:#E06C75;">px</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#B392F0;">.box1 {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">background-color</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">red</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"><span style="color:#B392F0;">.container {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">font-size</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">20px</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>@fullhuman/postcss-purgecss 这个插件除了 content 这个配置项，还有一个配置项也非常的常用：</p><ul><li>safelist：可以指定一个字符串的值，或者指定一个正则表达式，该配置项目所对应的值（CSS 样式规则）始终保留，即便在参照文件中没有使用到也需要保留</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">purgecss</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;@fullhuman/postcss-purgecss&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">plugins</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 其他插件...</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">purgecss</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">content</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&quot;./src/**/*.html&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;./src/**/*.js&quot;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">safelist</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">/</span><span style="color:#C678DD;">^</span><span style="color:#E06C75;">active-/</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">    }),</span></span>
<span class="line"><span style="color:#ABB2BF;">  ],</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">purgecss</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> require(</span><span style="color:#FFAB70;">&quot;@fullhuman/postcss-purgecss&quot;</span><span style="color:#B392F0;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  plugins</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> [</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">// 其他插件...</span></span>
<span class="line"><span style="color:#B392F0;">    purgecss({</span></span>
<span class="line"><span style="color:#B392F0;">      content</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> [</span><span style="color:#FFAB70;">&quot;./src/**/*.html&quot;</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;./src/**/*.js&quot;</span><span style="color:#B392F0;">]</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">      safelist</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> [</span><span style="color:#FFAB70;">/</span><span style="color:#F97583;">^</span><span style="color:#FFAB70;">active-/</span><span style="color:#B392F0;">]</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    })</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  ]</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>safelist 所对应的值的含义为：匹配 active- 开头的类名，这些类名即便在项目文件中没有使用到，但是也不要删除。</p><h2 id="抽象语法树" tabindex="-1">抽象语法树 <a class="header-anchor" href="#抽象语法树" aria-hidden="true">#</a></h2><p>自定义插件第一小节我们来看一下抽象语法树。</p><p>官方对 Postcss 的原理介绍如下：</p><blockquote><p><em>PostCSS takes a CSS file and provides an API to analyze and modify its rules (by transforming them into an Abstract Syntax Tree). This API can then be used by plugins to do a lot of useful things, e.g., to find errors automatically, or to insert vendor prefixes.</em></p></blockquote><p>Postcss 的工作流程如下图所示：</p><img src="https://resource.duyiedu.com/xiejie/2023-06-26-113847.png" alt="image-20230626193847754" style="zoom:50%;"><p>关于抽象语法树这个概念其实是非常重要的，你在很多地方都能看到它。</p><p>当我们遇到一个难以理解的术语的时候，有一个最简单的方式就是“拆词”。“抽象语法树”经过拆词就可以拆解为三个词：</p><ul><li>抽象</li><li>语法</li><li>树</li></ul><p>我们首先来看树。“树”实际上是一种数据结构。</p><p>所谓数据结构，就是指数据在计算机中组织和存储的一种方式。数据结构通常会分为两类：</p><ul><li>线性数据结构 <ul><li>数组（<em>Array</em>）：一种连续存储空间中的固定大小的数据项集合。数组将相同类型的元素存储在连续的内存位置中，允许通过索引快速访问元素。</li><li>链表（<em>Linked List</em>）：一种由节点组成的线性集合，每个节点包含数据和指向下一个节点的指针。链表允许在不重新分配整个数据结构的情况下插入和删除元素。</li><li>栈（<em>Stack</em>）：一种遵循后进先出（<em>LIFO，Last In First Out</em>）原则的线性数据结构。在栈中，数据项的添加和移除都在同一端进行，称为栈顶。</li><li>队列（<em>Queue</em>）：一种遵循先进先出（<em>FIFO，First In First Out</em>）原则的线性数据结构。在队列中，数据项的添加在一端进行（队尾），移除在另一端进行（队头）。</li></ul></li><li>非线性数据结构 <ul><li>树（<em>Tree</em>）：一种分层结构，由节点组成，其中有一个特殊的节点称为根节点，其余节点按照层级组织。每个节点（除根节点外）都有一个父节点，可以有多个子节点。常见的树结构有二叉树、红黑树、<em>AVL</em> 树等。</li><li>图（<em>Graph</em>）：一种由顶点（节点）和边组成的数据结构，边连接了顶点。图可以是有向的（边有方向）或无向的（边无方向）。图可用于表示具有复杂关系的数据集合。</li></ul></li></ul><p>接下来我们聚焦到“树”这种数据结构，树这种非线性的数据结构，在解决某些问题的时候有一些显著的特点：</p><ul><li>层次关系：通过树结构能够非常自然的表示出数据之间的层次关系，这是其他数据结构办不到的。</li><li>搜索效率：通过树的结构（平衡二叉树），在执行搜索、插入以及删除等操作时，效率是比较高的，时间复杂度通常为 O(log n)，n是树的节点数量。一般比线性的数据结构（数组、链表）要高很多。</li><li>动态数据集合：与数组等固定大小的数据结构相比，树结构可以方便地添加、删除和重新组织节点。这使得树结构非常适合用于动态变化的数据集合。</li><li>有序存储：在二叉搜索树等有序树结构中，数据按照一定的顺序进行组织。这允许我们在 O(log n) 时间内完成有序数据集合的操作，如查找最大值、最小值和前驱、后继等。</li><li>空间优化：在某些应用场景中，树结构可以有效地节省空间。例如，字典树（<em>Trie</em>）可以用于存储大量字符串，同时节省空间，因为公共前缀只存储一次。</li><li>分治策略：树结构天然地适应分治策略，可以将复杂问题分解为较小的子问题并递归求解。许多高效的算法都基于树结构，如排序算法（归并排序、快速排序）、图算法（最小生成树、最短路径等）。</li></ul><p>上面的这些优点，如果你没有系统的学习过数据结构相关的知识，你是没有办法很多的进行理解。但是这个并不影响我们学习抽象语法树。上面所罗列的这些特点只是为了说明一点：树这种数据结构是存在很多优点的，所以我们能够在很多地方看到树的身影，例如：DOM树、CSSOM树、语法树。</p><p>接下来我们重点来说语法树。什么是语法树？简单来讲，就是将我们所书写的源代码转为树的结构。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">42</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">addA</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">d</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">d</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">c</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">addA</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#B392F0;"> a </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">42</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#B392F0;"> b </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">5</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> addA(d) {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> a </span><span style="color:#F97583;">+</span><span style="color:#B392F0;"> d;</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#B392F0;"> c </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> addA(</span><span style="color:#F8F8F8;">2</span><span style="color:#B392F0;">) </span><span style="color:#F97583;">+</span><span style="color:#B392F0;"> b;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>对于编译器或者解释器来讲，上面的代码它们并不能够理解。上面的这些代码对于编译器或者解释器来讲，无非就是一段字符串而已：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#98C379;">&#39;var a = 42;var b = 5;function addA(d) {return a + d;}var c = addA(2) + b;&#39;</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#FFAB70;">&#39;var a = 42;var b = 5;function addA(d) {return a + d;}var c = addA(2) + b;&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>因此要执行这个代码，编译器或解释器首先第一步就是要分析出来这个字符串里面哪些是关键字，哪些是标志符，哪些是运算符。之后会形成一个一个的 token，例如上面的代码，最终就会形成各种各样的 token（不可再拆分、最小的单位）：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#61AFEF;">Keyword</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">var</span><span style="color:#ABB2BF;">) </span><span style="color:#61AFEF;">Identifier</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">) </span><span style="color:#61AFEF;">Punctuator</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">) </span><span style="color:#61AFEF;">Numeric</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">42</span><span style="color:#ABB2BF;">) </span><span style="color:#61AFEF;">Punctuator</span><span style="color:#ABB2BF;">(;) </span><span style="color:#61AFEF;">Keyword</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">var</span><span style="color:#ABB2BF;">) </span></span>
<span class="line"><span style="color:#61AFEF;">Identifier</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">) </span><span style="color:#61AFEF;">Punctuator</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">) </span><span style="color:#61AFEF;">Numeric</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">) </span><span style="color:#61AFEF;">Punctuator</span><span style="color:#ABB2BF;">(;) </span><span style="color:#61AFEF;">Keyword</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">) </span></span>
<span class="line"><span style="color:#61AFEF;">Identifier</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">addA</span><span style="color:#ABB2BF;">) </span><span style="color:#61AFEF;">Punctuator</span><span style="color:#ABB2BF;">(() </span><span style="color:#61AFEF;">Identifier</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">d</span><span style="color:#ABB2BF;">) </span><span style="color:#61AFEF;">Punctuator</span><span style="color:#ABB2BF;">()) </span><span style="color:#61AFEF;">Punctuator</span><span style="color:#ABB2BF;">({) </span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">Keyword</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">return</span><span style="color:#ABB2BF;">) </span><span style="color:#E06C75;font-style:italic;">Identifier</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">) </span><span style="color:#E06C75;font-style:italic;">Punctuator</span><span style="color:#ABB2BF;">(+) </span><span style="color:#E06C75;font-style:italic;">Identifier</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">d</span><span style="color:#ABB2BF;">) </span><span style="color:#E06C75;font-style:italic;">Punctuator</span><span style="color:#ABB2BF;">(;) </span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">Punctuator</span><span style="color:#ABB2BF;">(}) </span><span style="color:#61AFEF;">Keyword</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">var</span><span style="color:#ABB2BF;">) </span><span style="color:#61AFEF;">Identifier</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">c</span><span style="color:#ABB2BF;">) </span><span style="color:#61AFEF;">Punctuator</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">) </span><span style="color:#61AFEF;">Identifier</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">addA</span><span style="color:#ABB2BF;">) </span></span>
<span class="line"><span style="color:#61AFEF;">Punctuator</span><span style="color:#ABB2BF;">(() </span><span style="color:#61AFEF;">Numeric</span><span style="color:#ABB2BF;">(2) </span><span style="color:#61AFEF;">Punctuator</span><span style="color:#ABB2BF;">()) </span><span style="color:#61AFEF;">Punctuator</span><span style="color:#ABB2BF;">(+) </span><span style="color:#61AFEF;">Identifier</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">) </span><span style="color:#61AFEF;">Punctuator</span><span style="color:#ABB2BF;">(;)</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#B392F0;">Keyword(var) Identifier(a) Punctuator(</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">) Numeric(</span><span style="color:#F8F8F8;">42</span><span style="color:#B392F0;">) Punctuator(;) Keyword(var) </span></span>
<span class="line"><span style="color:#B392F0;">Identifier(b) Punctuator(</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">) Numeric(</span><span style="color:#F8F8F8;">5</span><span style="color:#B392F0;">) Punctuator(;) Keyword(</span><span style="color:#F97583;">function</span><span style="color:#B392F0;">) </span></span>
<span class="line"><span style="color:#B392F0;">Identifier(addA) Punctuator(() Identifier(d) Punctuator()) Punctuator({) </span></span>
<span class="line"><span style="color:#B392F0;">Keyword(return) Identifier(a) Punctuator(+) Identifier(d) Punctuator(;) </span></span>
<span class="line"><span style="color:#B392F0;">Punctuator(}) Keyword(var) Identifier(c) Punctuator(</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">) Identifier(addA) </span></span>
<span class="line"><span style="color:#B392F0;">Punctuator(() Numeric(2) Punctuator()) Punctuator(+) Identifier(b) Punctuator(;)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>拆解成一个一个的 token 之后，会将这些 token 以树的形式来存储，最终会形成如下的一个树结构：</p><img src="https://resource.duyiedu.com/xiejie/2023-06-26-120343.png" alt="image-20230626200342918" style="zoom:50%;"><p>在 <a href="https://www.jointjs.com/demos/abstract-syntax-tree" target="_blank" rel="noreferrer">https://www.jointjs.com/demos/abstract-syntax-tree</a> 这个网站可以看到 JS 代码所形成的抽象语法树长什么样子。</p><p>至此，你就知道什么叫做语法树。</p><p>最后我们还需要解释一下什么叫做“抽象语法树”。</p><p>抽象（abstraction）是一种思维方式。所谓抽象，指的是从具体的事物里面提取出本质特征、规律，忽略不相关、不重要的细节。在计算机科学和编程里面，抽象是一种非常重要的方法，因为抽象能够将一个复杂的问题抽离成简单的、更加容易理解的问题</p><p>抽象语法树是将源代码抽象成一种更高阶别的表示方式，只关注代码的结构和语法，会去忽略空格、换行、制表符之类的表达细节。</p><p>最后说一下抽象语法树的优点：</p><ol><li><p>易于操作和遍历：可以更方便地进行操作和遍历。<em>AST</em> 中的每个节点都有确定的类型和结构，这使得插件作者可以轻松地定位和修改特定类型的节点，而无需解析和操作原始 <em>CSS</em> 文本。</p></li><li><p>易于扩展：使用 <em>AST</em> 可以轻松地支持新的 <em>CSS</em> 语法和特性。只需在 <em>AST</em> 中添加相应的节点类型和规则，就可以在插件中处理新的语法结构，而无需对整个解析器进行重大改动。</p></li><li><p>提高性能：将 <em>CSS</em> 代码转换为 <em>AST</em> 后，可以对整个树进行一次遍历，同时应用多个插件的变换操作。这样可以减少重复解析和操作 <em>CSS</em> 文本的开销，从而提高处理性能。</p></li><li><p>代码重用和模块化：由于 <em>AST</em> 的结构化特性，插件开发者可以在多个插件之间重用和共享操作 <em>AST</em> 的代码。这有助于降低插件间的冗余，并提高代码的模块化程度。</p></li><li><p>易于调试和错误处理：<em>AST</em> 中的每个节点都包含有关其源代码位置的元信息。这使得插件可以在出现错误时提供更具体的错误信息和上下文，从而帮助开发者快速定位和解决问题。</p></li></ol><p>著名的 babel 项目在处理 JS 的时候就是会先将 JS 转为抽象语法树，然后再交给其他的插件做处理。ESlint 工具检查代码是否规范，那它怎么检查的？它其实也是先将代码转为抽象语法树，然后再去检查。我们这里所学习的 postcss 也是同样的原理，只不过它是将 css 代码转为对应的 css 抽象语法树。</p><h2 id="自定义插件" tabindex="-1">自定义插件 <a class="header-anchor" href="#自定义插件" aria-hidden="true">#</a></h2><p>在 PostCSS 官网，实际上已经介绍了如何去编写一个自定义插件：<a href="https://postcss.org/docs/writing-a-postcss-plugin" target="_blank" rel="noreferrer">https://postcss.org/docs/writing-a-postcss-plugin</a></p><ol><li>需要有一个模板</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">opts</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {}) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// Plugin creator to check options or prepare caches</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">postcssPlugin</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;PLUGIN NAME&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// Plugin listeners</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">postcss</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">true</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> (opts </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> {}) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// Plugin creator to check options or prepare caches</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    postcssPlugin</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;PLUGIN NAME&#39;</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">// Plugin listeners</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#B392F0;">.postcss </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>接下来就可以在插件里面添加一组监听器，对应的能够设置的监听器如下：</p><ul><li><a href="https://postcss.org/api/#root" target="_blank" rel="noreferrer"><code>Root</code></a>: node of the top of the tree, which represent CSS file.</li><li><a href="https://postcss.org/api/#atrule" target="_blank" rel="noreferrer"><code>AtRule</code></a>: statements begin with <code>@</code> like <code>@charset &quot;UTF-8&quot;</code> or <code>@media (screen) {}</code>.</li><li><a href="https://postcss.org/api/#rule" target="_blank" rel="noreferrer"><code>Rule</code></a>: selector with declaration inside. For instance <code>input, button {}</code>.</li><li><a href="https://postcss.org/api/#declaration" target="_blank" rel="noreferrer"><code>Declaration</code></a>: key-value pair like <code>color: black</code>;</li><li><a href="https://postcss.org/api/#comment" target="_blank" rel="noreferrer"><code>Comment</code></a>: stand-alone comment. Comments inside selectors, at-rule parameters and values are stored in node’s <code>raws</code> property.</li></ul><ol start="2"><li>具体示例</li></ol><p>现在在我们的 src 中新建一个 my-plugin.js 的文件，代码如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">opts</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {}) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// Plugin creator to check options or prepare caches</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">postcssPlugin</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;PLUGIN NAME&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">Declaration</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">decl</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">decl</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prop</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">decl</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  };</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">postcss</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> (opts </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> {}) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// Plugin creator to check options or prepare caches</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    postcssPlugin</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;PLUGIN NAME&quot;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    Declaration(decl){</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#79B8FF;">decl</span><span style="color:#B392F0;">.prop</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">decl</span><span style="color:#B392F0;">.value)</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"><span style="color:#B392F0;">  };</span></span>
<span class="line"><span style="color:#B392F0;">};</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#B392F0;">.postcss </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">true</span><span style="color:#B392F0;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>在上面的代码中，我们添加了 Declaration 的监听器，通过该监听器能够拿到 CSS 文件中所有的声明。</p><p>接下来我们就可以对其进行相应的操作。</p><p>现在我们来做一个具体的示例：编写一个插件，该插件能够将 CSS 代码中所有的颜色统一转为十六进制。</p><p>这里我们需要使用到一个依赖包：color 该依赖就是专门做颜色处理的</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#ABB2BF;">pnpm </span><span style="color:#98C379;">add</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">color</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-D</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#B392F0;">pnpm </span><span style="color:#9DB1C5;">add</span><span style="color:#B392F0;"> </span><span style="color:#9DB1C5;">color</span><span style="color:#B392F0;"> </span><span style="color:#9DB1C5;">-D</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>之后通过该依赖所提供的 hex 方法来进行颜色值的修改，具体代码如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Color</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;color&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">opts</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {}) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// Plugin creator to check options or prepare caches</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">postcssPlugin</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;convertColorsToHex&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">Declaration</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">decl</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#7F848E;font-style:italic;">// 先创建一个正则表达式，提取出如下的声明</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#7F848E;font-style:italic;">// 因为如下的声明对应的值一般都是颜色值</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">colorRegex</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">/(</span><span style="color:#C678DD;">^</span><span style="color:#E06C75;">color)</span><span style="color:#ABB2BF;">|</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">^</span><span style="color:#E06C75;">background(-color)</span><span style="color:#D19A66;">?</span><span style="color:#E06C75;">)/</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">colorRegex</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">decl</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prop</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#7F848E;font-style:italic;">// 将颜色值转为 Color 对象，因为这个 Color 对象对应了一系列的方法</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#7F848E;font-style:italic;">// 方便我们进行转换</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">color</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Color</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">decl</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#7F848E;font-style:italic;">// 将颜色值转换为十六进制</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">hex</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">color</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">hex</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#7F848E;font-style:italic;">// 更新属性值</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#E5C07B;">decl</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">hex</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">error</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#98C379;">\`[convertColorsToHex] Error processing </span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">decl</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prop</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">: </span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">error</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">message</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span></span>
<span class="line"><span style="color:#ABB2BF;">          );</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#ABB2BF;">  };</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">postcss</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Color</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> require(</span><span style="color:#FFAB70;">&quot;color&quot;</span><span style="color:#B392F0;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> (opts </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> {}) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// Plugin creator to check options or prepare caches</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    postcssPlugin</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;convertColorsToHex&quot;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    Declaration(decl) {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#6B737C;">// 先创建一个正则表达式，提取出如下的声明</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#6B737C;">// 因为如下的声明对应的值一般都是颜色值</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">colorRegex</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">/(</span><span style="color:#F97583;">^</span><span style="color:#FFAB70;">color)</span><span style="color:#F97583;">|</span><span style="color:#FFAB70;">(</span><span style="color:#F97583;">^</span><span style="color:#FFAB70;">background(-color)</span><span style="color:#F97583;">?</span><span style="color:#FFAB70;">)/</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">colorRegex</span><span style="color:#B392F0;">.test(</span><span style="color:#79B8FF;">decl</span><span style="color:#B392F0;">.prop)) {</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">try</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">          </span><span style="color:#6B737C;">// 将颜色值转为 Color 对象，因为这个 Color 对象对应了一系列的方法</span></span>
<span class="line"><span style="color:#B392F0;">          </span><span style="color:#6B737C;">// 方便我们进行转换</span></span>
<span class="line"><span style="color:#B392F0;">          </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">color</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> Color(</span><span style="color:#79B8FF;">decl</span><span style="color:#B392F0;">.value);</span></span>
<span class="line"><span style="color:#B392F0;">          </span><span style="color:#6B737C;">// 将颜色值转换为十六进制</span></span>
<span class="line"><span style="color:#B392F0;">          </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">hex</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">color</span><span style="color:#B392F0;">.hex();</span></span>
<span class="line"><span style="color:#B392F0;">          </span><span style="color:#6B737C;">// 更新属性值</span></span>
<span class="line"><span style="color:#B392F0;">          </span><span style="color:#79B8FF;">decl</span><span style="color:#B392F0;">.value </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> hex;</span></span>
<span class="line"><span style="color:#B392F0;">        } </span><span style="color:#F97583;">catch</span><span style="color:#B392F0;"> (err) {</span></span>
<span class="line"><span style="color:#B392F0;">          </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.error(</span></span>
<span class="line"><span style="color:#B392F0;">            </span><span style="color:#FFAB70;">\`[convertColorsToHex] Error processing </span><span style="color:#F97583;">\${</span><span style="color:#79B8FF;">decl</span><span style="color:#B392F0;">.prop</span><span style="color:#F97583;">}</span><span style="color:#FFAB70;">: </span><span style="color:#F97583;">\${</span><span style="color:#79B8FF;">error</span><span style="color:#B392F0;">.message</span><span style="color:#F97583;">}</span><span style="color:#FFAB70;">\`</span></span>
<span class="line"><span style="color:#B392F0;">          );</span></span>
<span class="line"><span style="color:#B392F0;">        }</span></span>
<span class="line"><span style="color:#B392F0;">      }</span></span>
<span class="line"><span style="color:#B392F0;">    }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  };</span></span>
<span class="line"><span style="color:#B392F0;">};</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#B392F0;">.postcss </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">true</span><span style="color:#B392F0;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div>`,202)]))}const u=n(o,[["render",e]]);export{F as __pageData,u as default};
