import{_ as l,o as p,c as o,a,b as s}from"./app.f9cf8683.js";const A=JSON.parse('{"title":"如何给所有的 async 函数添加 try/catch？","description":"","frontmatter":{},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"async 如果不加 try/catch 会发生什么事？","slug":"async-如果不加-try-catch-会发生什么事","link":"#async-如果不加-try-catch-会发生什么事","children":[]},{"level":2,"title":"babel 插件的最终效果","slug":"babel-插件的最终效果","link":"#babel-插件的最终效果","children":[]},{"level":2,"title":"babel 插件的实现思路","slug":"babel-插件的实现思路","link":"#babel-插件的实现思路","children":[]},{"level":2,"title":"babel 的核心：AST","slug":"babel-的核心-ast","link":"#babel-的核心-ast","children":[]},{"level":2,"title":"常用的 AST 节点类型对照表","slug":"常用的-ast-节点类型对照表","link":"#常用的-ast-节点类型对照表","children":[]},{"level":2,"title":"await 节点对应的 AST 结构","slug":"await-节点对应的-ast-结构","link":"#await-节点对应的-ast-结构","children":[]},{"level":2,"title":"babel 插件开发","slug":"babel-插件开发","link":"#babel-插件开发","children":[{"level":3,"title":"插件的基本格式示例","slug":"插件的基本格式示例","link":"#插件的基本格式示例","children":[]},{"level":3,"title":"寻找 await 节点","slug":"寻找-await-节点","link":"#寻找-await-节点","children":[]},{"level":3,"title":"向上查找 async 函数","slug":"向上查找-async-函数","link":"#向上查找-async-函数","children":[]},{"level":3,"title":"利用 babel-template 生成 try/catch 节点","slug":"利用-babel-template-生成-try-catch-节点","link":"#利用-babel-template-生成-try-catch-节点","children":[]},{"level":3,"title":"async 函数体替换成 try 语句","slug":"async-函数体替换成-try-语句","link":"#async-函数体替换成-try-语句","children":[]},{"level":3,"title":"若函数已存在 try/catch，则不处理","slug":"若函数已存在-try-catch-则不处理","link":"#若函数已存在-try-catch-则不处理","children":[]},{"level":3,"title":"添加报错信息","slug":"添加报错信息","link":"#添加报错信息","children":[]},{"level":3,"title":"添加用户选项","slug":"添加用户选项","link":"#添加用户选项","children":[]},{"level":3,"title":"最终代码","slug":"最终代码","link":"#最终代码","children":[]}]}],"relativePath":"fragment/auto-try-catch.md","lastUpdated":1740908463000}'),e={name:"fragment/auto-try-catch.md"};function c(t,n,r,B,y,F){return p(),o("div",null,n[0]||(n[0]=[a(`<h1 id="如何给所有的-async-函数添加-try-catch" tabindex="-1">如何给所有的 async 函数添加 try/catch？ <a class="header-anchor" href="#如何给所有的-async-函数添加-try-catch" aria-hidden="true">#</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-hidden="true">#</a></h2><p>阿里三面的时候被问到了这个问题，当时思路虽然正确，可惜表述的不够清晰</p><p>后来花了一些时间整理了下思路，那么如何实现给所有的 async 函数添加 try/catch 呢？</p><h2 id="async-如果不加-try-catch-会发生什么事" tabindex="-1">async 如果不加 try/catch 会发生什么事？ <a class="header-anchor" href="#async-如果不加-try-catch-会发生什么事" aria-hidden="true">#</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 示例</span></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">reject</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;failure&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  });</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;do something...&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#6B737C;">// 示例</span></span>
<span class="line"><span style="color:#F97583;">async</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> fn() {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">let</span><span style="color:#B392F0;"> value </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">await</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#B392F0;">((resolve</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> reject) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    reject(</span><span style="color:#FFAB70;">&quot;failure&quot;</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#B392F0;">  });</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#FFAB70;">&quot;do something...&quot;</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"><span style="color:#B392F0;">fn();</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>导致浏览器报错：一个未捕获的错误</p><p>在开发过程中，为了保证系统健壮性，或者是为了捕获异步的错误，需要频繁的在 async 函数中添加 try/catch，避免出现上述示例的情况</p><p>可是我很懒，不想一个个加，<code>懒惰使我们进步</code>😂</p><p>下面，通过手写一个 babel 插件，来给所有的 async 函数添加 try/catch</p><h2 id="babel-插件的最终效果" tabindex="-1">babel 插件的最终效果 <a class="header-anchor" href="#babel-插件的最终效果" aria-hidden="true">#</a></h2><p>原始代码：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">reject</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;报错&quot;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;do something...&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">async</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> fn() {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">await</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#B392F0;">((resolve</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> reject) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> reject(</span><span style="color:#FFAB70;">&quot;报错&quot;</span><span style="color:#B392F0;">));</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">await</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#B392F0;">((resolve) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> resolve(</span><span style="color:#F8F8F8;">1</span><span style="color:#B392F0;">));</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#FFAB70;">&quot;do something...&quot;</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"><span style="color:#B392F0;">fn();</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>使用插件转化后的代码：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">reject</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;报错&quot;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;do something...&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">filePath: E:</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">myapp</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">src</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">main.js</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">funcName: fn</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">Error:&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">async</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> fn() {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">try</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">await</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#B392F0;">((resolve</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> reject) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> reject(</span><span style="color:#FFAB70;">&quot;报错&quot;</span><span style="color:#B392F0;">));</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">await</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#B392F0;">((resolve) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> resolve(</span><span style="color:#F8F8F8;">1</span><span style="color:#B392F0;">));</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#FFAB70;">&quot;do something...&quot;</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#B392F0;">  } </span><span style="color:#F97583;">catch</span><span style="color:#B392F0;"> (e) {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#FFAB70;">&quot;\\nfilePath: E:\\\\myapp\\\\src\\\\main.js\\nfuncName: fn\\nError:&quot;</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> e);</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"><span style="color:#B392F0;">fn();</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>通过详细的报错信息，帮助我们快速找到目标文件和具体的报错方法，方便去定位问题</p><h2 id="babel-插件的实现思路" tabindex="-1">babel 插件的实现思路 <a class="header-anchor" href="#babel-插件的实现思路" aria-hidden="true">#</a></h2><p>1）借助 AST 抽象语法树，遍历查找代码中的 await 关键字</p><p>2）找到 await 节点后，从父路径中查找声明的 async 函数，获取该函数的 body（函数中包含的代码）</p><p>3）创建 try/catch 语句，将原来 async 的 body 放入其中</p><p>4）最后将 async 的 body 替换成创建的 try/catch 语句</p><h2 id="babel-的核心-ast" tabindex="-1">babel 的核心：AST <a class="header-anchor" href="#babel-的核心-ast" aria-hidden="true">#</a></h2><p>先聊聊 AST 这个帅小伙 🤠，不然后面的开发流程走不下去</p><p>AST 是代码的树形结构，生成 AST 分为两个阶段：<a href="https://en.wikipedia.org/wiki/Lexical_analysis" target="_blank" rel="noreferrer"><strong>词法分析</strong></a>和  <a href="https://en.wikipedia.org/wiki/Parsing" target="_blank" rel="noreferrer"><strong>语法分析</strong></a></p><p><strong>词法分析</strong></p><p>词法分析阶段把字符串形式的代码转换为<strong>令牌（tokens）</strong> ，可以把 tokens 看作是一个扁平的语法片段数组，描述了代码片段在整个代码中的位置和记录当前值的一些信息</p><p><strong>语法分析</strong></p><p>语法分析阶段会把 token 转换成 AST 的形式，这个阶段会使用 token 中的信息把它们转换成一个 AST 的表述结构，使用 type 属性记录当前的类型</p><p>例如 let 代表着一个变量声明的关键字，所以它的 type 为 <code>VariableDeclaration</code>，而 a = 1 会作为 let 的声明描述，它的 type 为 <code>VariableDeclarator</code></p><p>AST 在线查看工具：<a href="https://astexplorer.net/" target="_blank" rel="noreferrer"><strong>AST explorer</strong></a></p><p><strong>再举个 🌰，加深对 AST 的理解</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">demo</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">n</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">n</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">n</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> demo(n) {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> n </span><span style="color:#F97583;">*</span><span style="color:#B392F0;"> n;</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>转化成 AST 的结构</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#98C379;">&quot;type&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Program&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 整段代码的主体</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#98C379;">&quot;body&quot;</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#98C379;">&quot;type&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;FunctionDeclaration&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// function 的类型叫函数声明；</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#98C379;">&quot;id&quot;</span><span style="color:#ABB2BF;">: { </span><span style="color:#7F848E;font-style:italic;">// id 为函数声明的 id</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#98C379;">&quot;type&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Identifier&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 标识符 类型</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#98C379;">&quot;name&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;demo&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// 标识符 具有名字</span></span>
<span class="line"><span style="color:#ABB2BF;">      },</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#98C379;">&quot;expression&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#98C379;">&quot;generator&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#98C379;">&quot;async&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 代表是否 是 async function</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#98C379;">&quot;params&quot;</span><span style="color:#ABB2BF;">: [ </span><span style="color:#7F848E;font-style:italic;">// 同级 函数的参数</span></span>
<span class="line"><span style="color:#ABB2BF;">        {</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#98C379;">&quot;type&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Identifier&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#7F848E;font-style:italic;">// 参数类型也是 Identifier</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#98C379;">&quot;name&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;n&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">      ],</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#98C379;">&quot;body&quot;</span><span style="color:#ABB2BF;">: { </span><span style="color:#7F848E;font-style:italic;">// 函数体内容 整个格式呈现一种树的格式</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#98C379;">&quot;type&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;BlockStatement&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 整个函数体内容 为一个块状代码块类型</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#98C379;">&quot;body&quot;</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">          {</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#98C379;">&quot;type&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;ReturnStatement&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// return 类型</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#98C379;">&quot;argument&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">              </span><span style="color:#98C379;">&quot;type&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;BinaryExpression&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#7F848E;font-style:italic;">// BinaryExpression 二进制表达式类型</span></span>
<span class="line"><span style="color:#ABB2BF;">              </span><span style="color:#98C379;">&quot;start&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">30</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">              </span><span style="color:#98C379;">&quot;end&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">35</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">              </span><span style="color:#98C379;">&quot;left&quot;</span><span style="color:#ABB2BF;">: { </span><span style="color:#7F848E;font-style:italic;">// 分左 右 中 结构</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#98C379;">&quot;type&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Identifier&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#98C379;">&quot;name&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;n&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">              },</span></span>
<span class="line"><span style="color:#ABB2BF;">              </span><span style="color:#98C379;">&quot;operator&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;*&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 属于操作符</span></span>
<span class="line"><span style="color:#ABB2BF;">              </span><span style="color:#98C379;">&quot;right&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#98C379;">&quot;type&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Identifier&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#98C379;">&quot;name&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;n&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">              }</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">          }</span></span>
<span class="line"><span style="color:#ABB2BF;">        ]</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  ],</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#98C379;">&quot;sourceType&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;module&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#B392F0;">{</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#FFAB70;">&quot;type&quot;</span><span style="color:#B392F0;">: </span><span style="color:#FFAB70;">&quot;Program&quot;</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#6B737C;">// 整段代码的主体</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#FFAB70;">&quot;body&quot;</span><span style="color:#B392F0;">: [</span></span>
<span class="line"><span style="color:#B392F0;">    {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#FFAB70;">&quot;type&quot;</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;FunctionDeclaration&quot;</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#6B737C;">// function 的类型叫函数声明；</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#FFAB70;">&quot;id&quot;</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> { </span><span style="color:#6B737C;">// id 为函数声明的 id</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#FFAB70;">&quot;type&quot;</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;Identifier&quot;</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#6B737C;">// 标识符 类型</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#FFAB70;">&quot;name&quot;</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;demo&quot;</span><span style="color:#B392F0;"> </span><span style="color:#6B737C;">// 标识符 具有名字</span></span>
<span class="line"><span style="color:#B392F0;">      }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#FFAB70;">&quot;expression&quot;</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">false</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#FFAB70;">&quot;generator&quot;</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">false</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#FFAB70;">&quot;async&quot;</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">false</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#6B737C;">// 代表是否 是 async function</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#FFAB70;">&quot;params&quot;</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> [ </span><span style="color:#6B737C;">// 同级 函数的参数</span></span>
<span class="line"><span style="color:#B392F0;">        {</span></span>
<span class="line"><span style="color:#B392F0;">          </span><span style="color:#FFAB70;">&quot;type&quot;</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;Identifier&quot;</span><span style="color:#BBBBBB;">,</span><span style="color:#6B737C;">// 参数类型也是 Identifier</span></span>
<span class="line"><span style="color:#B392F0;">          </span><span style="color:#FFAB70;">&quot;name&quot;</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;n&quot;</span></span>
<span class="line"><span style="color:#B392F0;">        }</span></span>
<span class="line"><span style="color:#B392F0;">      ]</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#FFAB70;">&quot;body&quot;</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> { </span><span style="color:#6B737C;">// 函数体内容 整个格式呈现一种树的格式</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#FFAB70;">&quot;type&quot;</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;BlockStatement&quot;</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#6B737C;">// 整个函数体内容 为一个块状代码块类型</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#FFAB70;">&quot;body&quot;</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> [</span></span>
<span class="line"><span style="color:#B392F0;">          {</span></span>
<span class="line"><span style="color:#B392F0;">            </span><span style="color:#FFAB70;">&quot;type&quot;</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;ReturnStatement&quot;</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#6B737C;">// return 类型</span></span>
<span class="line"><span style="color:#B392F0;">            </span><span style="color:#FFAB70;">&quot;argument&quot;</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">              </span><span style="color:#FFAB70;">&quot;type&quot;</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;BinaryExpression&quot;</span><span style="color:#BBBBBB;">,</span><span style="color:#6B737C;">// BinaryExpression 二进制表达式类型</span></span>
<span class="line"><span style="color:#B392F0;">              </span><span style="color:#FFAB70;">&quot;start&quot;</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">30</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">              </span><span style="color:#FFAB70;">&quot;end&quot;</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">35</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">              </span><span style="color:#FFAB70;">&quot;left&quot;</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> { </span><span style="color:#6B737C;">// 分左 右 中 结构</span></span>
<span class="line"><span style="color:#B392F0;">                </span><span style="color:#FFAB70;">&quot;type&quot;</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;Identifier&quot;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">                </span><span style="color:#FFAB70;">&quot;name&quot;</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;n&quot;</span></span>
<span class="line"><span style="color:#B392F0;">              }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">              </span><span style="color:#FFAB70;">&quot;operator&quot;</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;*&quot;</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#6B737C;">// 属于操作符</span></span>
<span class="line"><span style="color:#B392F0;">              </span><span style="color:#FFAB70;">&quot;right&quot;</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">                </span><span style="color:#FFAB70;">&quot;type&quot;</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;Identifier&quot;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">                </span><span style="color:#FFAB70;">&quot;name&quot;</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;n&quot;</span></span>
<span class="line"><span style="color:#B392F0;">              }</span></span>
<span class="line"><span style="color:#B392F0;">            }</span></span>
<span class="line"><span style="color:#B392F0;">          }</span></span>
<span class="line"><span style="color:#B392F0;">        ]</span></span>
<span class="line"><span style="color:#B392F0;">      }</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"><span style="color:#B392F0;">  ]</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#FFAB70;">&quot;sourceType&quot;</span><span style="color:#B392F0;">: </span><span style="color:#FFAB70;">&quot;module&quot;</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br></div></div><h2 id="常用的-ast-节点类型对照表" tabindex="-1">常用的 AST 节点类型对照表 <a class="header-anchor" href="#常用的-ast-节点类型对照表" aria-hidden="true">#</a></h2>`,35),s("table",null,[s("thead",null,[s("tr",null,[s("th",null,"类型原名称"),s("th",null,"中文名称"),s("th",null,"描述")])]),s("tbody",null,[s("tr",null,[s("td",null,"Program"),s("td",null,"程序主体"),s("td",null,"整段代码的主体")]),s("tr",null,[s("td",null,"VariableDeclaration"),s("td",null,"变量声明"),s("td",null,"声明一个变量，例如 var let const")]),s("tr",null,[s("td",null,[s("code",null,"FunctionDeclaration")]),s("td",null,"函数声明"),s("td",null,"声明一个函数，例如 function")]),s("tr",null,[s("td",null,"ExpressionStatement"),s("td",null,"表达式语句"),s("td",null,"通常是调用一个函数，例如 console.log()")]),s("tr",{var:"",a:""},[s("td",null,"BlockStatement"),s("td",null,"块语句"),s("td",null,"包裹在 {} 块内的代码，例如 if (condition)")]),s("tr",null,[s("td",null,"BreakStatement"),s("td",null,"中断语句"),s("td",null,"通常指 break")]),s("tr",null,[s("td",null,"ContinueStatement"),s("td",null,"持续语句"),s("td",null,"通常指 continue")]),s("tr",null,[s("td",null,"ReturnStatement"),s("td",null,"返回语句"),s("td",null,"通常指 return")]),s("tr",null,[s("td",null,"SwitchStatement"),s("td",null,"Switch 语句"),s("td",null,"通常指 Switch Case 语句中的 Switch")]),s("tr",null,[s("td",null,"IfStatement"),s("td",null,"If 控制流语句"),s("td",null,"控制流语句，通常指 if(condition){}else{}")]),s("tr",null,[s("td",null,"Identifier"),s("td",null,"标识符"),s("td",null,"标识，例如声明变量时 var identi = 5 中的 identi")]),s("tr",null,[s("td",null,"CallExpression"),s("td",null,"调用表达式"),s("td",null,"通常指调用一个函数，例如 console.log()")]),s("tr",null,[s("td",null,"BinaryExpression"),s("td",null,"二进制表达式"),s("td",null,"通常指运算，例如 1+2")]),s("tr",null,[s("td",null,"MemberExpression"),s("td",null,"成员表达式"),s("td",null,"通常指调用对象的成员，例如 console 对象的 log 成员")]),s("tr",null,[s("td",null,"ArrayExpression"),s("td",null,"数组表达式"),s("td",null,"通常指一个数组，例如 [1, 3, 5]")]),s("tr",null,[s("td",null,[s("code",null,"FunctionExpression")]),s("td",null,"函数表达式"),s("td",null,"例如 const func = function () {}")]),s("tr",null,[s("td",null,[s("code",null,"ArrowFunctionExpression")]),s("td",null,"箭头函数表达式"),s("td",null,"例如 const func = ()=> {}")]),s("tr",null,[s("td",null,[s("code",null,"AwaitExpression")]),s("td",null,"await 表达式"),s("td",null,"例如 let val = await f()")]),s("tr",null,[s("td",null,[s("code",null,"ObjectMethod")]),s("td",null,"对象中定义的方法"),s("td",null,"例如 let obj = { fn ()")]),s("tr",null,[s("td",null,"NewExpression"),s("td",null,"New 表达式"),s("td",null,"通常指使用 New 关键词")]),s("tr",null,[s("td",null,"AssignmentExpression"),s("td",null,"赋值表达式"),s("td",null,"通常指将函数的返回值赋值给变量")]),s("tr",null,[s("td",null,"UpdateExpression"),s("td",null,"更新表达式"),s("td",null,"通常指更新成员值，例如 i++")]),s("tr",null,[s("td",null,"Literal"),s("td",null,"字面量"),s("td",null,"字面量")]),s("tr",null,[s("td",null,"BooleanLiteral"),s("td",null,"布尔型字面量"),s("td",null,"布尔值，例如 true false")]),s("tr",null,[s("td",null,"NumericLiteral"),s("td",null,"数字型字面量"),s("td",null,"数字，例如 100")]),s("tr",null,[s("td",null,"StringLiteral"),s("td",null,"字符型字面量"),s("td",null,"字符串，例如 vansenb")]),s("tr",null,[s("td",null,"SwitchCase"),s("td",null,"Case 语句"),s("td",null,"通常指 Switch 语句中的 Case")])])],-1),a(`<h2 id="await-节点对应的-ast-结构" tabindex="-1">await 节点对应的 AST 结构 <a class="header-anchor" href="#await-节点对应的-ast-结构" aria-hidden="true">#</a></h2><p>1）原始代码</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">f</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">async</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> fn() {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">await</span><span style="color:#B392F0;"> f();</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>2）增加 try catch 后的代码</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">f</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">async</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> fn() {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">try</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">await</span><span style="color:#B392F0;"> f();</span></span>
<span class="line"><span style="color:#B392F0;">  } </span><span style="color:#F97583;">catch</span><span style="color:#B392F0;"> (e) {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(e);</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><strong>通过 AST 结构对比，插件的核心就是将原始函数的 body 放到 try 语句中</strong></p><h2 id="babel-插件开发" tabindex="-1">babel 插件开发 <a class="header-anchor" href="#babel-插件开发" aria-hidden="true">#</a></h2><p>作者曾在<a href="https://juejin.cn/post/7146976516692410376#heading-34" target="_blank" rel="noreferrer">《「历时 8 个月」10 万字前端知识体系总结（工程化篇）🔥》</a>中聊过如何开发一个 babel 插件</p><p>这里简单回顾一下</p><h3 id="插件的基本格式示例" tabindex="-1">插件的基本格式示例 <a class="header-anchor" href="#插件的基本格式示例" aria-hidden="true">#</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">babel</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">t</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">babel</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">type</span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">     </span><span style="color:#E06C75;">visitor</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">       </span><span style="color:#7F848E;font-style:italic;">// 设置需要范围的节点类型</span></span>
<span class="line"><span style="color:#ABB2BF;">       </span><span style="color:#61AFEF;">CallExression</span><span style="color:#ABB2BF;">: (</span><span style="color:#E06C75;font-style:italic;">path</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">         </span><span style="color:#C678DD;">do</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">soming</span><span style="color:#ABB2BF;"> ……</span></span>
<span class="line"><span style="color:#ABB2BF;">       }</span></span>
<span class="line"><span style="color:#ABB2BF;">     }</span></span>
<span class="line"><span style="color:#ABB2BF;">   }</span></span>
<span class="line"><span style="color:#ABB2BF;"> }</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> (babel) {</span></span>
<span class="line"><span style="color:#B392F0;">   </span><span style="color:#F97583;">let</span><span style="color:#B392F0;"> t </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">babel</span><span style="color:#B392F0;">.type</span></span>
<span class="line"><span style="color:#B392F0;">   </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">     visitor</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">       </span><span style="color:#6B737C;">// 设置需要范围的节点类型</span></span>
<span class="line"><span style="color:#B392F0;">       CallExression</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> (path</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> state) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">         </span><span style="color:#F97583;">do</span><span style="color:#B392F0;"> soming ……</span></span>
<span class="line"><span style="color:#B392F0;">       }</span></span>
<span class="line"><span style="color:#B392F0;">     }</span></span>
<span class="line"><span style="color:#B392F0;">   }</span></span>
<span class="line"><span style="color:#B392F0;"> }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>1）通过 <code>babel</code> 拿到 <code>types</code> 对象，操作 AST 节点，比如创建、校验、转变等</p><p>2）<code>visitor</code>：定义了一个访问者，可以设置需要访问的节点类型，当访问到目标节点后，做相应的处理来实现插件的功能</p><h3 id="寻找-await-节点" tabindex="-1">寻找 await 节点 <a class="header-anchor" href="#寻找-await-节点" aria-hidden="true">#</a></h3><p>回到业务需求，现在需要找到 await 节点，可以通过<code>AwaitExpression</code>表达式获取</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">babel</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">t</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">babel</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">visitor</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#7F848E;font-style:italic;">// 设置AwaitExpression</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#61AFEF;">AwaitExpression</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">path</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// 获取当前的await节点</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">node</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">node</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">      },</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#ABB2BF;">  };</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> (babel) {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">let</span><span style="color:#B392F0;"> t </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">babel</span><span style="color:#B392F0;">.type;</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    visitor</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#6B737C;">// 设置AwaitExpression</span></span>
<span class="line"><span style="color:#B392F0;">      AwaitExpression(path) {</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#6B737C;">// 获取当前的await节点</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">let</span><span style="color:#B392F0;"> node </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">path</span><span style="color:#B392F0;">.node;</span></span>
<span class="line"><span style="color:#B392F0;">      }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  };</span></span>
<span class="line"><span style="color:#B392F0;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="向上查找-async-函数" tabindex="-1">向上查找 async 函数 <a class="header-anchor" href="#向上查找-async-函数" aria-hidden="true">#</a></h3><p>通过<code>findParent</code>方法，在父节点中搜寻 async 节点</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// async节点的属性为true</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">asyncPath</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">findParent</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">p</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">node</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">async</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#6B737C;">// async节点的属性为true</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">asyncPath</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">path</span><span style="color:#B392F0;">.findParent((p) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">p</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">node</span><span style="color:#B392F0;">.async);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>这里要注意，async 函数分为 4 种情况：函数声明 、箭头函数 、函数表达式 、函数为对象的方法</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 1️⃣：函数声明</span></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">f</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 2️⃣：函数表达式</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">f</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 3️⃣：箭头函数</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">f</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 4️⃣：async函数定义在对象中</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">f</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#6B737C;">// 1️⃣：函数声明</span></span>
<span class="line"><span style="color:#F97583;">async</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> fn() {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">await</span><span style="color:#B392F0;"> f();</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 2️⃣：函数表达式</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> fn </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">async</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> () {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">await</span><span style="color:#B392F0;"> f();</span></span>
<span class="line"><span style="color:#B392F0;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 3️⃣：箭头函数</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> fn </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">async</span><span style="color:#B392F0;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">await</span><span style="color:#B392F0;"> f();</span></span>
<span class="line"><span style="color:#B392F0;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 4️⃣：async函数定义在对象中</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">obj</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">async</span><span style="color:#B392F0;"> fn() {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">await</span><span style="color:#B392F0;"> f();</span></span>
<span class="line"><span style="color:#B392F0;">  }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>需要对这几种情况进行分别判断</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">babel</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">t</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">babel</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">visitor</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#7F848E;font-style:italic;">// 设置AwaitExpression</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#61AFEF;">AwaitExpression</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">path</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// 获取当前的await节点</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">node</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">node</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// 查找async函数的节点</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">asyncPath</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">findParent</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">          (</span><span style="color:#E06C75;font-style:italic;">p</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">node</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">async</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;&amp;</span></span>
<span class="line"><span style="color:#ABB2BF;">            (</span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isFunctionDeclaration</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">||</span></span>
<span class="line"><span style="color:#ABB2BF;">              </span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isArrowFunctionExpression</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">||</span></span>
<span class="line"><span style="color:#ABB2BF;">              </span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isFunctionExpression</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">||</span></span>
<span class="line"><span style="color:#ABB2BF;">              </span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isObjectMethod</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">        );</span></span>
<span class="line"><span style="color:#ABB2BF;">      },</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#ABB2BF;">  };</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> (babel) {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">let</span><span style="color:#B392F0;"> t </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">babel</span><span style="color:#B392F0;">.type;</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    visitor</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#6B737C;">// 设置AwaitExpression</span></span>
<span class="line"><span style="color:#B392F0;">      AwaitExpression(path) {</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#6B737C;">// 获取当前的await节点</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">let</span><span style="color:#B392F0;"> node </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">path</span><span style="color:#B392F0;">.node;</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#6B737C;">// 查找async函数的节点</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">asyncPath</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">path</span><span style="color:#B392F0;">.findParent(</span></span>
<span class="line"><span style="color:#B392F0;">          (p) </span><span style="color:#F97583;">=&gt;</span></span>
<span class="line"><span style="color:#B392F0;">            </span><span style="color:#79B8FF;">p</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">node</span><span style="color:#B392F0;">.async </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#B392F0;">            (</span><span style="color:#79B8FF;">p</span><span style="color:#B392F0;">.isFunctionDeclaration() </span><span style="color:#F97583;">||</span></span>
<span class="line"><span style="color:#B392F0;">              </span><span style="color:#79B8FF;">p</span><span style="color:#B392F0;">.isArrowFunctionExpression() </span><span style="color:#F97583;">||</span></span>
<span class="line"><span style="color:#B392F0;">              </span><span style="color:#79B8FF;">p</span><span style="color:#B392F0;">.isFunctionExpression() </span><span style="color:#F97583;">||</span></span>
<span class="line"><span style="color:#B392F0;">              </span><span style="color:#79B8FF;">p</span><span style="color:#B392F0;">.isObjectMethod())</span></span>
<span class="line"><span style="color:#B392F0;">        );</span></span>
<span class="line"><span style="color:#B392F0;">      }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  };</span></span>
<span class="line"><span style="color:#B392F0;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h3 id="利用-babel-template-生成-try-catch-节点" tabindex="-1">利用 babel-template 生成 try/catch 节点 <a class="header-anchor" href="#利用-babel-template-生成-try-catch-节点" aria-hidden="true">#</a></h3><p><a href="https://babel.docschina.org/docs/en/babel-template/" target="_blank" rel="noreferrer">babel-template</a>可以用以字符串形式的代码来构建 AST 树节点，快速优雅开发插件</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 引入babel-template</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">template</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;babel-template&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 定义try/catch语句模板</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">tryTemplate</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">\`</span></span>
<span class="line"><span style="color:#98C379;">try {</span></span>
<span class="line"><span style="color:#98C379;">} catch (e) {</span></span>
<span class="line"><span style="color:#98C379;">console.log(CatchError：e)</span></span>
<span class="line"><span style="color:#98C379;">}\`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 创建模板</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">temp</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">template</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">tryTemplate</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 给模版增加key，添加console.log打印信息</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">tempArgumentObj</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 通过types.stringLiteral创建字符串字面量</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">CatchError</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">types</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stringLiteral</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Error&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 通过temp创建try语句的AST节点</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">tryNode</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">temp</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">tempArgumentObj</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#6B737C;">// 引入babel-template</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">template</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> require(</span><span style="color:#FFAB70;">&quot;babel-template&quot;</span><span style="color:#B392F0;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 定义try/catch语句模板</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#B392F0;"> tryTemplate </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">\`</span></span>
<span class="line"><span style="color:#FFAB70;">try {</span></span>
<span class="line"><span style="color:#FFAB70;">} catch (e) {</span></span>
<span class="line"><span style="color:#FFAB70;">console.log(CatchError：e)</span></span>
<span class="line"><span style="color:#FFAB70;">}\`</span><span style="color:#B392F0;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 创建模板</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">temp</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> template(tryTemplate);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 给模版增加key，添加console.log打印信息</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#B392F0;"> tempArgumentObj </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// 通过types.stringLiteral创建字符串字面量</span></span>
<span class="line"><span style="color:#B392F0;">  CatchError</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">types</span><span style="color:#B392F0;">.stringLiteral(</span><span style="color:#FFAB70;">&quot;Error&quot;</span><span style="color:#B392F0;">)</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 通过temp创建try语句的AST节点</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#B392F0;"> tryNode </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> temp(tempArgumentObj);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h3 id="async-函数体替换成-try-语句" tabindex="-1">async 函数体替换成 try 语句 <a class="header-anchor" href="#async-函数体替换成-try-语句" aria-hidden="true">#</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">babel</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">t</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">babel</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">visitor</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#61AFEF;">AwaitExpression</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">path</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">node</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">node</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">asyncPath</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">findParent</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">          (</span><span style="color:#E06C75;font-style:italic;">p</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">node</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">async</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;&amp;</span></span>
<span class="line"><span style="color:#ABB2BF;">            (</span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isFunctionDeclaration</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">||</span></span>
<span class="line"><span style="color:#ABB2BF;">              </span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isArrowFunctionExpression</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">||</span></span>
<span class="line"><span style="color:#ABB2BF;">              </span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isFunctionExpression</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">||</span></span>
<span class="line"><span style="color:#ABB2BF;">              </span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isObjectMethod</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">        );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">tryNode</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">temp</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">tempArgumentObj</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// 获取父节点的函数体body</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">info</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">asyncPath</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">node</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// 将函数体放到try语句的body中</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">tryNode</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">block</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">body</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(...</span><span style="color:#E5C07B;">info</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// 将父节点的body替换成新创建的try语句</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">info</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">tryNode</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">      },</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#ABB2BF;">  };</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> (babel) {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">let</span><span style="color:#B392F0;"> t </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">babel</span><span style="color:#B392F0;">.type;</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    visitor</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">      AwaitExpression(path) {</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">let</span><span style="color:#B392F0;"> node </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">path</span><span style="color:#B392F0;">.node;</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">asyncPath</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">path</span><span style="color:#B392F0;">.findParent(</span></span>
<span class="line"><span style="color:#B392F0;">          (p) </span><span style="color:#F97583;">=&gt;</span></span>
<span class="line"><span style="color:#B392F0;">            </span><span style="color:#79B8FF;">p</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">node</span><span style="color:#B392F0;">.async </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#B392F0;">            (</span><span style="color:#79B8FF;">p</span><span style="color:#B392F0;">.isFunctionDeclaration() </span><span style="color:#F97583;">||</span></span>
<span class="line"><span style="color:#B392F0;">              </span><span style="color:#79B8FF;">p</span><span style="color:#B392F0;">.isArrowFunctionExpression() </span><span style="color:#F97583;">||</span></span>
<span class="line"><span style="color:#B392F0;">              </span><span style="color:#79B8FF;">p</span><span style="color:#B392F0;">.isFunctionExpression() </span><span style="color:#F97583;">||</span></span>
<span class="line"><span style="color:#B392F0;">              </span><span style="color:#79B8FF;">p</span><span style="color:#B392F0;">.isObjectMethod())</span></span>
<span class="line"><span style="color:#B392F0;">        );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">let</span><span style="color:#B392F0;"> tryNode </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> temp(tempArgumentObj);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#6B737C;">// 获取父节点的函数体body</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">let</span><span style="color:#B392F0;"> info </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">asyncPath</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">node</span><span style="color:#B392F0;">.body;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#6B737C;">// 将函数体放到try语句的body中</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#79B8FF;">tryNode</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">block</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">body</span><span style="color:#B392F0;">.push(</span><span style="color:#F97583;">...</span><span style="color:#79B8FF;">info</span><span style="color:#B392F0;">.body);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#6B737C;">// 将父节点的body替换成新创建的try语句</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#79B8FF;">info</span><span style="color:#B392F0;">.body </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> [tryNode];</span></span>
<span class="line"><span style="color:#B392F0;">      }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  };</span></span>
<span class="line"><span style="color:#B392F0;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>到这里，插件的基本结构已经成型，但还有点问题，如果函数已存在 try/catch，该怎么处理判断呢？</p><h3 id="若函数已存在-try-catch-则不处理" tabindex="-1">若函数已存在 try/catch，则不处理 <a class="header-anchor" href="#若函数已存在-try-catch-则不处理" aria-hidden="true">#</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 示例代码，不再添加try/catch</span></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">f</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#6B737C;">// 示例代码，不再添加try/catch</span></span>
<span class="line"><span style="color:#F97583;">async</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> fn() {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">try</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">await</span><span style="color:#B392F0;"> f();</span></span>
<span class="line"><span style="color:#B392F0;">  } </span><span style="color:#F97583;">catch</span><span style="color:#B392F0;"> (e) {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(e);</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>通过<code>isTryStatement</code>判断是否已存在 try 语句</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">babel</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">t</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">babel</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">visitor</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#61AFEF;">AwaitExpression</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">path</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// 判断父路径中是否已存在try语句，若存在直接返回</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">findParent</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">p</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isTryStatement</span><span style="color:#ABB2BF;">())) {</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">node</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">node</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">asyncPath</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">findParent</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">          (</span><span style="color:#E06C75;font-style:italic;">p</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">node</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">async</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;&amp;</span></span>
<span class="line"><span style="color:#ABB2BF;">            (</span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isFunctionDeclaration</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">||</span></span>
<span class="line"><span style="color:#ABB2BF;">              </span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isArrowFunctionExpression</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">||</span></span>
<span class="line"><span style="color:#ABB2BF;">              </span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isFunctionExpression</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">||</span></span>
<span class="line"><span style="color:#ABB2BF;">              </span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isObjectMethod</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">        );</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">tryNode</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">temp</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">tempArgumentObj</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">info</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">asyncPath</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">node</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">tryNode</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">block</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">body</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(...</span><span style="color:#E5C07B;">info</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">info</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">tryNode</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">      },</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#ABB2BF;">  };</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> (babel) {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">let</span><span style="color:#B392F0;"> t </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">babel</span><span style="color:#B392F0;">.type;</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    visitor</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">      AwaitExpression(path) {</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#6B737C;">// 判断父路径中是否已存在try语句，若存在直接返回</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">path</span><span style="color:#B392F0;">.findParent((p) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">p</span><span style="color:#B392F0;">.isTryStatement())) {</span></span>
<span class="line"><span style="color:#B392F0;">          </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">false</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">let</span><span style="color:#B392F0;"> node </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">path</span><span style="color:#B392F0;">.node;</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">asyncPath</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">path</span><span style="color:#B392F0;">.findParent(</span></span>
<span class="line"><span style="color:#B392F0;">          (p) </span><span style="color:#F97583;">=&gt;</span></span>
<span class="line"><span style="color:#B392F0;">            </span><span style="color:#79B8FF;">p</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">node</span><span style="color:#B392F0;">.async </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#B392F0;">            (</span><span style="color:#79B8FF;">p</span><span style="color:#B392F0;">.isFunctionDeclaration() </span><span style="color:#F97583;">||</span></span>
<span class="line"><span style="color:#B392F0;">              </span><span style="color:#79B8FF;">p</span><span style="color:#B392F0;">.isArrowFunctionExpression() </span><span style="color:#F97583;">||</span></span>
<span class="line"><span style="color:#B392F0;">              </span><span style="color:#79B8FF;">p</span><span style="color:#B392F0;">.isFunctionExpression() </span><span style="color:#F97583;">||</span></span>
<span class="line"><span style="color:#B392F0;">              </span><span style="color:#79B8FF;">p</span><span style="color:#B392F0;">.isObjectMethod())</span></span>
<span class="line"><span style="color:#B392F0;">        );</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">let</span><span style="color:#B392F0;"> tryNode </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> temp(tempArgumentObj);</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">let</span><span style="color:#B392F0;"> info </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">asyncPath</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">node</span><span style="color:#B392F0;">.body;</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#79B8FF;">tryNode</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">block</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">body</span><span style="color:#B392F0;">.push(</span><span style="color:#F97583;">...</span><span style="color:#79B8FF;">info</span><span style="color:#B392F0;">.body);</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#79B8FF;">info</span><span style="color:#B392F0;">.body </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> [tryNode];</span></span>
<span class="line"><span style="color:#B392F0;">      }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  };</span></span>
<span class="line"><span style="color:#B392F0;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h3 id="添加报错信息" tabindex="-1">添加报错信息 <a class="header-anchor" href="#添加报错信息" aria-hidden="true">#</a></h3><p>获取报错时的文件路径 <code>filePath</code> 和方法名称 <code>funcName</code>，方便快速定位问题</p><p><strong>获取文件路径</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 获取编译目标文件的路径，如：E:\\myapp\\src\\App.vue</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">filePath</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">filename</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">file</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">opts</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">filename</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;unknown&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#6B737C;">// 获取编译目标文件的路径，如：E:\\myapp\\src\\App.vue</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">filePath</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.filename </span><span style="color:#F97583;">||</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">file</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">opts</span><span style="color:#B392F0;">.filename </span><span style="color:#F97583;">||</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;unknown&quot;</span><span style="color:#B392F0;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>获取报错的方法名称</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 定义方法名</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">asyncName</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 获取async节点的type类型</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">asyncPath</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">node</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">switch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 1️⃣函数表达式</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 情况1：普通函数，如const func = async function () {}</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 情况2：箭头函数，如const func = async () =&gt; {}</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">case</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;FunctionExpression&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">case</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;ArrowFunctionExpression&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 使用path.getSibling(index)来获得同级的id路径</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">identifier</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">asyncPath</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSibling</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;id&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 获取func方法名</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">asyncName</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">identifier</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">identifier</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">node</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">identifier</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">node</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 2️⃣函数声明，如async function fn2() {}</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">case</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;FunctionDeclaration&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">asyncName</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">asyncPath</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">node</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">asyncPath</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">node</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">id</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 3️⃣async函数作为对象的方法，如vue项目中，在methods中定义的方法: methods: { async func() {} }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">case</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;ObjectMethod&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">asyncName</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">asyncPath</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">node</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">key</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 若asyncName不存在，通过argument.callee获取当前执行函数的name</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">funcName</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">asyncName</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">node</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">argument</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">callee</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">node</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">argument</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">callee</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#6B737C;">// 定义方法名</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#B392F0;"> asyncName </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;&quot;</span><span style="color:#B392F0;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 获取async节点的type类型</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#B392F0;"> type </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">asyncPath</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">node</span><span style="color:#B392F0;">.type;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">switch</span><span style="color:#B392F0;"> (type) {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// 1️⃣函数表达式</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// 情况1：普通函数，如const func = async function () {}</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// 情况2：箭头函数，如const func = async () =&gt; {}</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">case</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;FunctionExpression&quot;</span><span style="color:#B392F0;">:</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">case</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;ArrowFunctionExpression&quot;</span><span style="color:#B392F0;">:</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">// 使用path.getSibling(index)来获得同级的id路径</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">let</span><span style="color:#B392F0;"> identifier </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">asyncPath</span><span style="color:#B392F0;">.getSibling(</span><span style="color:#FFAB70;">&quot;id&quot;</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">// 获取func方法名</span></span>
<span class="line"><span style="color:#B392F0;">    asyncName </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> identifier </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">identifier</span><span style="color:#B392F0;">.node </span><span style="color:#F97583;">?</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">identifier</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">node</span><span style="color:#B392F0;">.name </span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;&quot;</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">break</span><span style="color:#B392F0;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// 2️⃣函数声明，如async function fn2() {}</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">case</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;FunctionDeclaration&quot;</span><span style="color:#B392F0;">:</span></span>
<span class="line"><span style="color:#B392F0;">    asyncName </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">asyncPath</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">node</span><span style="color:#B392F0;">.id </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">asyncPath</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">node</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">id</span><span style="color:#B392F0;">.name) </span><span style="color:#F97583;">||</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;&quot;</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">break</span><span style="color:#B392F0;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// 3️⃣async函数作为对象的方法，如vue项目中，在methods中定义的方法: methods: { async func() {} }</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">case</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;ObjectMethod&quot;</span><span style="color:#B392F0;">:</span></span>
<span class="line"><span style="color:#B392F0;">    asyncName </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">asyncPath</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">node</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">key</span><span style="color:#B392F0;">.name </span><span style="color:#F97583;">||</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;&quot;</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">break</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 若asyncName不存在，通过argument.callee获取当前执行函数的name</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#B392F0;"> funcName </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#B392F0;">  asyncName </span><span style="color:#F97583;">||</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">node</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">argument</span><span style="color:#B392F0;">.callee </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">node</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">argument</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">callee</span><span style="color:#B392F0;">.name) </span><span style="color:#F97583;">||</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;&quot;</span><span style="color:#B392F0;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><h3 id="添加用户选项" tabindex="-1">添加用户选项 <a class="header-anchor" href="#添加用户选项" aria-hidden="true">#</a></h3><p>用户引入插件时，可以设置<code>exclude</code>、<code>include</code>、 <code>customLog</code>选项</p><p><code>exclude</code>： 设置需要排除的文件，不对该文件进行处理</p><p><code>include</code>： 设置需要处理的文件，只对该文件进行处理</p><p><code>customLog</code>： 用户自定义的打印信息</p><h3 id="最终代码" tabindex="-1">最终代码 <a class="header-anchor" href="#最终代码" aria-hidden="true">#</a></h3><p><strong>入口文件 index.js</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// babel-template 用于将字符串形式的代码来构建AST树节点</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">template</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;babel-template&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">tryTemplate</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">catchConsole</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">mergeOptions</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">matchesFile</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;./util&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">babel</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 通过babel 拿到 types 对象，操作 AST 节点，比如创建、校验、转变等</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">types</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">babel</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">types</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// visitor：插件核心对象，定义了插件的工作流程，属于访问者模式</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">visitor</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">AwaitExpression</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">path</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#7F848E;font-style:italic;">// 通过this.opts 获取用户的配置</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">opts</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">!</span><span style="color:#C678DD;">typeof</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">opts</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;object&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">error</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#98C379;">&quot;[babel-plugin-await-add-trycatch]: options need to be an object.&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">        );</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#7F848E;font-style:italic;">// 判断父路径中是否已存在try语句，若存在直接返回</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">findParent</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">p</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isTryStatement</span><span style="color:#ABB2BF;">())) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#7F848E;font-style:italic;">// 合并插件的选项</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">mergeOptions</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">opts</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#7F848E;font-style:italic;">// 获取编译目标文件的路径，如：E:\\myapp\\src\\App.vue</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">filePath</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">filename</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">file</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">opts</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">filename</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;unknown&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#7F848E;font-style:italic;">// 在排除列表的文件不编译</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">matchesFile</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">exclude</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">filePath</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#7F848E;font-style:italic;">// 如果设置了include，只编译include中的文件</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">include</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">!</span><span style="color:#61AFEF;">matchesFile</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">include</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">filePath</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#7F848E;font-style:italic;">// 获取当前的await节点</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">node</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">node</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#7F848E;font-style:italic;">// 在父路径节点中查找声明 async 函数的节点</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#7F848E;font-style:italic;">// async 函数分为4种情况：函数声明 || 箭头函数 || 函数表达式 || 对象的方法</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">asyncPath</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">findParent</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">        (</span><span style="color:#E06C75;font-style:italic;">p</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">node</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">async</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;&amp;</span></span>
<span class="line"><span style="color:#ABB2BF;">          (</span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isFunctionDeclaration</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">||</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isArrowFunctionExpression</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">||</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isFunctionExpression</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">||</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isObjectMethod</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">      );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#7F848E;font-style:italic;">// 获取async的方法名</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">asyncName</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">asyncPath</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">node</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">switch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// 1️⃣函数表达式</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// 情况1：普通函数，如const func = async function () {}</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// 情况2：箭头函数，如const func = async () =&gt; {}</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">case</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;FunctionExpression&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">case</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;ArrowFunctionExpression&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#7F848E;font-style:italic;">// 使用path.getSibling(index)来获得同级的id路径</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">identifier</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">asyncPath</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSibling</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;id&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#7F848E;font-style:italic;">// 获取func方法名</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#E06C75;">asyncName</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">identifier</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">identifier</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">node</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">identifier</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">node</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#C678DD;">break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// 2️⃣函数声明，如async function fn2() {}</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">case</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;FunctionDeclaration&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#E06C75;">asyncName</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">asyncPath</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">node</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">asyncPath</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">node</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">id</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#C678DD;">break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// 3️⃣async函数作为对象的方法，如vue项目中，在methods中定义的方法: methods: { async func() {} }</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">case</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;ObjectMethod&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#E06C75;">asyncName</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">asyncPath</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">node</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">key</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#C678DD;">break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#7F848E;font-style:italic;">// 若asyncName不存在，通过argument.callee获取当前执行函数的name</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">funcName</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">asyncName</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">node</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">argument</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">callee</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">node</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">argument</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">callee</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">temp</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">template</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">tryTemplate</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#7F848E;font-style:italic;">// 给模版增加key，添加console.log打印信息</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">tempArgumentObj</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// 通过types.stringLiteral创建字符串字面量</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">CatchError</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">types</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stringLiteral</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#61AFEF;">catchConsole</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">filePath</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">funcName</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">customLog</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        ),</span></span>
<span class="line"><span style="color:#ABB2BF;">      };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#7F848E;font-style:italic;">// 通过temp创建try语句</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">tryNode</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">temp</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">tempArgumentObj</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#7F848E;font-style:italic;">// 获取async节点(父节点)的函数体</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">info</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">asyncPath</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">node</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#7F848E;font-style:italic;">// 将父节点原来的函数体放到try语句中</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">tryNode</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">block</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">body</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(...</span><span style="color:#E5C07B;">info</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#7F848E;font-style:italic;">// 将父节点的内容替换成新创建的try语句</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">info</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">tryNode</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#ABB2BF;">  };</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;babel-plugin-await-add-trycatch&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">visitor</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  };</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#6B737C;">// babel-template 用于将字符串形式的代码来构建AST树节点</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">template</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> require(</span><span style="color:#FFAB70;">&quot;babel-template&quot;</span><span style="color:#B392F0;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">tryTemplate</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">catchConsole</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">mergeOptions</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">matchesFile</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">} </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> require(</span><span style="color:#FFAB70;">&quot;./util&quot;</span><span style="color:#B392F0;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> (babel) {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// 通过babel 拿到 types 对象，操作 AST 节点，比如创建、校验、转变等</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">let</span><span style="color:#B392F0;"> types </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">babel</span><span style="color:#B392F0;">.types;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// visitor：插件核心对象，定义了插件的工作流程，属于访问者模式</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">visitor</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    AwaitExpression(path) {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#6B737C;">// 通过this.opts 获取用户的配置</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.opts </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">!typeof</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.opts </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;object&quot;</span><span style="color:#B392F0;">) {</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.error(</span></span>
<span class="line"><span style="color:#B392F0;">          </span><span style="color:#FFAB70;">&quot;[babel-plugin-await-add-trycatch]: options need to be an object.&quot;</span></span>
<span class="line"><span style="color:#B392F0;">        );</span></span>
<span class="line"><span style="color:#B392F0;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#6B737C;">// 判断父路径中是否已存在try语句，若存在直接返回</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">path</span><span style="color:#B392F0;">.findParent((p) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">p</span><span style="color:#B392F0;">.isTryStatement())) {</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">false</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#6B737C;">// 合并插件的选项</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">options</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> mergeOptions(</span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.opts);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#6B737C;">// 获取编译目标文件的路径，如：E:\\myapp\\src\\App.vue</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">filePath</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.filename </span><span style="color:#F97583;">||</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">file</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">opts</span><span style="color:#B392F0;">.filename </span><span style="color:#F97583;">||</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;unknown&quot;</span><span style="color:#B392F0;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#6B737C;">// 在排除列表的文件不编译</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (matchesFile(</span><span style="color:#79B8FF;">options</span><span style="color:#B392F0;">.exclude</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> filePath)) {</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">return</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#6B737C;">// 如果设置了include，只编译include中的文件</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">options</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">include</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">length</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">!</span><span style="color:#B392F0;">matchesFile(</span><span style="color:#79B8FF;">options</span><span style="color:#B392F0;">.include</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> filePath)) {</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">return</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#6B737C;">// 获取当前的await节点</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">let</span><span style="color:#B392F0;"> node </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">path</span><span style="color:#B392F0;">.node;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#6B737C;">// 在父路径节点中查找声明 async 函数的节点</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#6B737C;">// async 函数分为4种情况：函数声明 || 箭头函数 || 函数表达式 || 对象的方法</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">asyncPath</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">path</span><span style="color:#B392F0;">.findParent(</span></span>
<span class="line"><span style="color:#B392F0;">        (p) </span><span style="color:#F97583;">=&gt;</span></span>
<span class="line"><span style="color:#B392F0;">          </span><span style="color:#79B8FF;">p</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">node</span><span style="color:#B392F0;">.async </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#B392F0;">          (</span><span style="color:#79B8FF;">p</span><span style="color:#B392F0;">.isFunctionDeclaration() </span><span style="color:#F97583;">||</span></span>
<span class="line"><span style="color:#B392F0;">            </span><span style="color:#79B8FF;">p</span><span style="color:#B392F0;">.isArrowFunctionExpression() </span><span style="color:#F97583;">||</span></span>
<span class="line"><span style="color:#B392F0;">            </span><span style="color:#79B8FF;">p</span><span style="color:#B392F0;">.isFunctionExpression() </span><span style="color:#F97583;">||</span></span>
<span class="line"><span style="color:#B392F0;">            </span><span style="color:#79B8FF;">p</span><span style="color:#B392F0;">.isObjectMethod())</span></span>
<span class="line"><span style="color:#B392F0;">      );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#6B737C;">// 获取async的方法名</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">let</span><span style="color:#B392F0;"> asyncName </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;&quot;</span><span style="color:#B392F0;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">let</span><span style="color:#B392F0;"> type </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">asyncPath</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">node</span><span style="color:#B392F0;">.type;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">switch</span><span style="color:#B392F0;"> (type) {</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#6B737C;">// 1️⃣函数表达式</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#6B737C;">// 情况1：普通函数，如const func = async function () {}</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#6B737C;">// 情况2：箭头函数，如const func = async () =&gt; {}</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">case</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;FunctionExpression&quot;</span><span style="color:#B392F0;">:</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">case</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;ArrowFunctionExpression&quot;</span><span style="color:#B392F0;">:</span></span>
<span class="line"><span style="color:#B392F0;">          </span><span style="color:#6B737C;">// 使用path.getSibling(index)来获得同级的id路径</span></span>
<span class="line"><span style="color:#B392F0;">          </span><span style="color:#F97583;">let</span><span style="color:#B392F0;"> identifier </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">asyncPath</span><span style="color:#B392F0;">.getSibling(</span><span style="color:#FFAB70;">&quot;id&quot;</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#B392F0;">          </span><span style="color:#6B737C;">// 获取func方法名</span></span>
<span class="line"><span style="color:#B392F0;">          asyncName </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> identifier </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">identifier</span><span style="color:#B392F0;">.node </span><span style="color:#F97583;">?</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">identifier</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">node</span><span style="color:#B392F0;">.name </span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;&quot;</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">          </span><span style="color:#F97583;">break</span><span style="color:#B392F0;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#6B737C;">// 2️⃣函数声明，如async function fn2() {}</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">case</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;FunctionDeclaration&quot;</span><span style="color:#B392F0;">:</span></span>
<span class="line"><span style="color:#B392F0;">          asyncName </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">asyncPath</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">node</span><span style="color:#B392F0;">.id </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">asyncPath</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">node</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">id</span><span style="color:#B392F0;">.name) </span><span style="color:#F97583;">||</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;&quot;</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">          </span><span style="color:#F97583;">break</span><span style="color:#B392F0;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#6B737C;">// 3️⃣async函数作为对象的方法，如vue项目中，在methods中定义的方法: methods: { async func() {} }</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">case</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;ObjectMethod&quot;</span><span style="color:#B392F0;">:</span></span>
<span class="line"><span style="color:#B392F0;">          asyncName </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">asyncPath</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">node</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">key</span><span style="color:#B392F0;">.name </span><span style="color:#F97583;">||</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;&quot;</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">          </span><span style="color:#F97583;">break</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#6B737C;">// 若asyncName不存在，通过argument.callee获取当前执行函数的name</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">let</span><span style="color:#B392F0;"> funcName </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#B392F0;">        asyncName </span><span style="color:#F97583;">||</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">node</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">argument</span><span style="color:#B392F0;">.callee </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">node</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">argument</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">callee</span><span style="color:#B392F0;">.name) </span><span style="color:#F97583;">||</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;&quot;</span><span style="color:#B392F0;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">temp</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> template(tryTemplate);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#6B737C;">// 给模版增加key，添加console.log打印信息</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">let</span><span style="color:#B392F0;"> tempArgumentObj </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#6B737C;">// 通过types.stringLiteral创建字符串字面量</span></span>
<span class="line"><span style="color:#B392F0;">        CatchError</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">types</span><span style="color:#B392F0;">.stringLiteral(</span></span>
<span class="line"><span style="color:#B392F0;">          catchConsole(filePath</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> funcName</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">options</span><span style="color:#B392F0;">.customLog)</span></span>
<span class="line"><span style="color:#B392F0;">        )</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">      };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#6B737C;">// 通过temp创建try语句</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">let</span><span style="color:#B392F0;"> tryNode </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> temp(tempArgumentObj);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#6B737C;">// 获取async节点(父节点)的函数体</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">let</span><span style="color:#B392F0;"> info </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">asyncPath</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">node</span><span style="color:#B392F0;">.body;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#6B737C;">// 将父节点原来的函数体放到try语句中</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#79B8FF;">tryNode</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">block</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">body</span><span style="color:#B392F0;">.push(</span><span style="color:#F97583;">...</span><span style="color:#79B8FF;">info</span><span style="color:#B392F0;">.body);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#6B737C;">// 将父节点的内容替换成新创建的try语句</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#79B8FF;">info</span><span style="color:#B392F0;">.body </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> [tryNode];</span></span>
<span class="line"><span style="color:#B392F0;">    }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  };</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    name</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;babel-plugin-await-add-trycatch&quot;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    visitor</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  };</span></span>
<span class="line"><span style="color:#B392F0;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br></div></div><p><strong>util.js</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">merge</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;deepmerge&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 定义try语句模板</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">tryTemplate</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">\`</span></span>
<span class="line"><span style="color:#98C379;">try {</span></span>
<span class="line"><span style="color:#98C379;">} catch (e) {</span></span>
<span class="line"><span style="color:#98C379;">console.log(CatchError,e)</span></span>
<span class="line"><span style="color:#98C379;">}\`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * catch要打印的信息</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * @param {string} filePath - 当前执行文件的路径</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * @param {string} funcName - 当前执行方法的名称</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * @param {string} customLog - 用户自定义的打印信息</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">catchConsole</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">filePath</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">funcName</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">customLog</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">\`</span></span>
<span class="line"><span style="color:#98C379;">filePath: </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">filePath</span><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#98C379;">funcName: </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">funcName</span><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">customLog</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">:\`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 默认配置</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">defaultOptions</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">customLog</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Error&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">exclude</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&quot;node_modules&quot;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">include</span><span style="color:#ABB2BF;">: [],</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 判断执行的file文件 是否在 exclude/include 选项内</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">matchesFile</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">list</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">filename</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">list</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">find</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">filename</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">includes</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 合并选项</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">mergeOptions</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">options</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">exclude</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">include</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">options</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">exclude</span><span style="color:#ABB2BF;">) </span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">exclude</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">toArray</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">exclude</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">include</span><span style="color:#ABB2BF;">) </span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">include</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">toArray</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">include</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 使用merge进行合并</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">merge</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">all</span><span style="color:#ABB2BF;">([</span><span style="color:#E06C75;">defaultOptions</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">options</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">toArray</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isArray</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">tryTemplate</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">catchConsole</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">defaultOptions</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">mergeOptions</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">matchesFile</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">toArray</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">merge</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> require(</span><span style="color:#FFAB70;">&quot;deepmerge&quot;</span><span style="color:#B392F0;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 定义try语句模板</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#B392F0;"> tryTemplate </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">\`</span></span>
<span class="line"><span style="color:#FFAB70;">try {</span></span>
<span class="line"><span style="color:#FFAB70;">} catch (e) {</span></span>
<span class="line"><span style="color:#FFAB70;">console.log(CatchError,e)</span></span>
<span class="line"><span style="color:#FFAB70;">}\`</span><span style="color:#B392F0;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">/*</span></span>
<span class="line"><span style="color:#6B737C;"> * catch要打印的信息</span></span>
<span class="line"><span style="color:#6B737C;"> * @param {string} filePath - 当前执行文件的路径</span></span>
<span class="line"><span style="color:#6B737C;"> * @param {string} funcName - 当前执行方法的名称</span></span>
<span class="line"><span style="color:#6B737C;"> * @param {string} customLog - 用户自定义的打印信息</span></span>
<span class="line"><span style="color:#6B737C;"> */</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#B392F0;"> catchConsole </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> (filePath</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> funcName</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> customLog) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">\`</span></span>
<span class="line"><span style="color:#FFAB70;">filePath: </span><span style="color:#F97583;">\${</span><span style="color:#B392F0;">filePath</span><span style="color:#F97583;">}</span></span>
<span class="line"><span style="color:#FFAB70;">funcName: </span><span style="color:#F97583;">\${</span><span style="color:#B392F0;">funcName</span><span style="color:#F97583;">}</span></span>
<span class="line"><span style="color:#F97583;">\${</span><span style="color:#B392F0;">customLog</span><span style="color:#F97583;">}</span><span style="color:#FFAB70;">:\`</span><span style="color:#B392F0;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 默认配置</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">defaultOptions</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  customLog</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;Error&quot;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  exclude</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> [</span><span style="color:#FFAB70;">&quot;node_modules&quot;</span><span style="color:#B392F0;">]</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  include</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> []</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 判断执行的file文件 是否在 exclude/include 选项内</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> matchesFile(list</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> filename) {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">list</span><span style="color:#B392F0;">.find((name) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> name </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">filename</span><span style="color:#B392F0;">.includes(name));</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 合并选项</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> mergeOptions(options) {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">let</span><span style="color:#B392F0;"> { exclude</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> include } </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> options;</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (exclude) </span><span style="color:#79B8FF;">options</span><span style="color:#B392F0;">.exclude </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> toArray(exclude);</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (include) </span><span style="color:#79B8FF;">options</span><span style="color:#B392F0;">.include </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> toArray(include);</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// 使用merge进行合并</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">merge</span><span style="color:#B392F0;">.all([defaultOptions</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> options]);</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> toArray(value) {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Array</span><span style="color:#B392F0;">.isArray(value) </span><span style="color:#F97583;">?</span><span style="color:#B392F0;"> value </span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> [value];</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  tryTemplate</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  catchConsole</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  defaultOptions</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  mergeOptions</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  matchesFile</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  toArray</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br></div></div><p><a href="https://github.com/xy-sea/babel-plugin-await-add-trycatch" target="_blank" rel="noreferrer">本文章作者的 github 仓库</a></p>`,50)]))}const u=l(e,[["render",c]]);export{A as __pageData,u as default};
