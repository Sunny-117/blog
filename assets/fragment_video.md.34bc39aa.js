import{_ as n,o as a,c as l,a as p}from"./app.f9cf8683.js";const o="/blog/assets/2024-04-15-14-51-24.69678060.png",d=JSON.parse('{"title":"前端录制回放系统初体验","description":"","frontmatter":{},"headers":[{"level":2,"title":"问题背景","slug":"问题背景","link":"#问题背景","children":[{"level":3,"title":"什么是前端录制回放?","slug":"什么是前端录制回放","link":"#什么是前端录制回放","children":[]},{"level":3,"title":"为什么需要？","slug":"为什么需要","link":"#为什么需要","children":[]},{"level":3,"title":"如何实现","slug":"如何实现","link":"#如何实现","children":[]}]},{"level":2,"title":"思路初现","slug":"思路初现","link":"#思路初现","children":[{"level":3,"title":"操作记录","slug":"操作记录","link":"#操作记录","children":[]},{"level":3,"title":"回放操作","slug":"回放操作","link":"#回放操作","children":[]},{"level":3,"title":"渲染环境","slug":"渲染环境","link":"#渲染环境","children":[]},{"level":3,"title":"数据还原","slug":"数据还原","link":"#数据还原","children":[]},{"level":3,"title":"定时器","slug":"定时器","link":"#定时器","children":[]}]},{"level":2,"title":"rrweb 框架","slug":"rrweb-框架","link":"#rrweb-框架","children":[]},{"level":2,"title":"rrweb 源码","slug":"rrweb-源码","link":"#rrweb-源码","children":[{"level":3,"title":"Record 录制","slug":"record-录制","link":"#record-录制","children":[]},{"level":3,"title":"Snapshot 快照","slug":"snapshot-快照","link":"#snapshot-快照","children":[]},{"level":3,"title":"Replay 回放","slug":"replay-回放","link":"#replay-回放","children":[]}]}],"relativePath":"fragment/video.md","lastUpdated":1740908463000}'),e={name:"fragment/video.md"};function c(r,s,t,B,y,i){return a(),l("div",null,s[0]||(s[0]=[p(`<h1 id="前端录制回放系统初体验" tabindex="-1">前端录制回放系统初体验 <a class="header-anchor" href="#前端录制回放系统初体验" aria-hidden="true">#</a></h1><h2 id="问题背景" tabindex="-1">问题背景 <a class="header-anchor" href="#问题背景" aria-hidden="true">#</a></h2><h3 id="什么是前端录制回放" tabindex="-1">什么是前端录制回放? <a class="header-anchor" href="#什么是前端录制回放" aria-hidden="true">#</a></h3><p>顾名思义，就是录制用户在网页中的各种操作，并且支持能随时回放操作。</p><h3 id="为什么需要" tabindex="-1">为什么需要？ <a class="header-anchor" href="#为什么需要" aria-hidden="true">#</a></h3><p>说到需要就不得不说一个经典的场景，一般前端做异常监控和错误上报，会采用自研或接入第三方 SDK 的形式，来收集和上报网站交互过程中 JavaScript 的报错信息和其它相关数据，也就是埋点。 在传统的埋点方案中，根据 SourceMap 能定位到具体报错代码文件和行列信息等。基本能定位大部分场景问题，但有一些情况下是很难复现错误，多是在测试扯皮的时候，程序员口头禅之一（我这里没有报错呀，是不是你电脑有问题）。 要是能把出错的操作过程录制下来就好了，这样就能方便我们复现场景了，且留存证据，好像是自己给自己挖了个坑。</p><h3 id="如何实现" tabindex="-1">如何实现 <a class="header-anchor" href="#如何实现" aria-hidden="true">#</a></h3><p>前端能实现录视频？我第一反应就是质疑，接着我就是一波 Google ，发现确实有可行方案。 在 Google 之前，我想到了通过设定定时器，对视图窗口进行截图，截图可用 canvas2html 的方式来实现，但这种方式无疑会造成性能问题，立马否决。 下面介绍我所「知道」的 Google 的方案</p><h2 id="思路初现" tabindex="-1">思路初现 <a class="header-anchor" href="#思路初现" aria-hidden="true">#</a></h2><p>网页本质上是一个 DOM 节点形式存在，通过浏览器渲染出来。我们是否可以把 DOM 以某种方式保存起来，并且在不同时间节点持续记录 DOM 数据状态。再将数据还原成 DOM 节点渲染出来完成回放呢？</p><h3 id="操作记录" tabindex="-1">操作记录 <a class="header-anchor" href="#操作记录" aria-hidden="true">#</a></h3><p>通过 <code>document.documentElement.cloneNode()</code> 克隆到 DOM 的数据对象，此时这个数据不能直接通过接口传输给后端，需要进行一些格式化预处理，处理成方便传输及存储的数据格式。最简单的方式就是进行序列化，也就是转换成 JSON 数据格式。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 序列化后</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">docJSON</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Document&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">childNodes</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Element&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">tagName</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;html&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">attributes</span><span style="color:#ABB2BF;">: {},</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">childNodes</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">        {</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Element&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#E06C75;">tagName</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;head&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#E06C75;">attributes</span><span style="color:#ABB2BF;">: {},</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#E06C75;">childNodes</span><span style="color:#ABB2BF;">: [],</span></span>
<span class="line"><span style="color:#ABB2BF;">        },</span></span>
<span class="line"><span style="color:#ABB2BF;">      ],</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#ABB2BF;">  ],</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#6B737C;">// 序列化后</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#B392F0;"> docJSON </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  type</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;Document&quot;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  childNodes</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> [</span></span>
<span class="line"><span style="color:#B392F0;">    {</span></span>
<span class="line"><span style="color:#B392F0;">      type</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;Element&quot;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">      tagName</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;html&quot;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">      attributes</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> {}</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">      childNodes</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> [</span></span>
<span class="line"><span style="color:#B392F0;">        {</span></span>
<span class="line"><span style="color:#B392F0;">          type</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;Element&quot;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">          tagName</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;head&quot;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">          attributes</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> {}</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">          childNodes</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> []</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">        }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">      ]</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  ]</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>有完整的 DOM 数据之后，还需要在 DOM 变化时进行监听，记录每次变化的 DOM 节点信息。对数据进行监听可用 MutationObserver ，它是一个可以监听 DOM 变化的 API 。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">observer</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">MutationObserver</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">mutationsList</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">mutationsList</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 发生变化的数据</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 以上述配置开始观察目标节点</span></span>
<span class="line"><span style="color:#E5C07B;">observer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">observe</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">document</span><span style="color:#ABB2BF;">, {});</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">observer</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> MutationObserver((mutationsList) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(mutationsList); </span><span style="color:#6B737C;">// 发生变化的数据</span></span>
<span class="line"><span style="color:#B392F0;">});</span></span>
<span class="line"><span style="color:#6B737C;">// 以上述配置开始观察目标节点</span></span>
<span class="line"><span style="color:#79B8FF;">observer</span><span style="color:#B392F0;">.observe(document</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> {});</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>除了对 DOM 变化进行监听以外，还有一个就是事件监听，用户与网页的交互多是通过鼠标，键盘等输入设备来进行。而这些交互的背后就是 JavaScript 的事件监听。事件监听可以通过绑定系统事件来完成，同样是需要记录下来，以鼠标移动为例：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 鼠标移动</span></span>
<span class="line"><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;mousemove&quot;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">e</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 伪代码 获取鼠标移动的信息并记录下来</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">positions</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">clientX</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">clientY</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">timeOffset</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Date</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">now</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">timeBaseline</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  });</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#6B737C;">// 鼠标移动</span></span>
<span class="line"><span style="color:#79B8FF;">document</span><span style="color:#B392F0;">.addEventListener(</span><span style="color:#FFAB70;">&quot;mousemove&quot;</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> (e) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// 伪代码 获取鼠标移动的信息并记录下来</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">positions</span><span style="color:#B392F0;">.push({</span></span>
<span class="line"><span style="color:#B392F0;">    x</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> clientX</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    y</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> clientY</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    timeOffset</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Date</span><span style="color:#B392F0;">.now() </span><span style="color:#F97583;">-</span><span style="color:#B392F0;"> timeBaseline</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  });</span></span>
<span class="line"><span style="color:#B392F0;">});</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="回放操作" tabindex="-1">回放操作 <a class="header-anchor" href="#回放操作" aria-hidden="true">#</a></h3><p>数据已经有了，接着就是回放，回放本质上是将 JSON 数据还原成 DOM 节点渲染出来。那就将快照数据还原就可以啊「嘴强王者」，数据还原并非那么容易啊！</p><h3 id="渲染环境" tabindex="-1">渲染环境 <a class="header-anchor" href="#渲染环境" aria-hidden="true">#</a></h3><p>首先为了确保回放过程代码隔离，需要沙箱环境， iframe 标签可以做到，并且 iframe 提供了 sandbox 属性可配置沙箱。沙箱环境的作用是确保代码安全并且不被干扰。</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">iframe</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">sandbox</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">srcdoc</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">iframe</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#B392F0;">&lt;</span><span style="color:#FFAB70;">iframe</span><span style="color:#B392F0;"> sandbox srcdoc&gt;&lt;/</span><span style="color:#FFAB70;">iframe</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><p>sanbox 属性可以做到沙箱作用， <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/iframe" target="_blank" rel="noreferrer">点击查看文档</a> srcdoc 可以直接设置成一段 html 代码</p></blockquote><h3 id="数据还原" tabindex="-1">数据还原 <a class="header-anchor" href="#数据还原" aria-hidden="true">#</a></h3><p>快照重组主要是 DOM 节点的重组，有点像虚拟 DOM 转成真实文档节点的过程，但是事件类型快照是不需要重组。</p><h3 id="定时器" tabindex="-1">定时器 <a class="header-anchor" href="#定时器" aria-hidden="true">#</a></h3><p>有了数据和环境，还需要定时器。通过定时器不停渲染 DOM ，实质上就是一个播放视频的效果， <code>requestAnimationFrame</code> 是最合适的。</p><p><code>requestAnimationFrame</code> 执行机制在浏览器下一次 repaint(重绘)之前执行，执行频率取决于浏览器刷新频率，更适合制作动画效果</p><p>至此有一个大概的想法，距离落地还是有段距离。得益于开源，我们可上 Github 看看有没有合适的轮子可复制（借鉴），刚好有现成的一框架 「rrweb」 ，不妨一起看看。</p><h2 id="rrweb-框架" tabindex="-1">rrweb 框架 <a class="header-anchor" href="#rrweb-框架" aria-hidden="true">#</a></h2><p>rrweb 是一个前端录制和回放的框架。全称 record and replay the web ，顾名思义就是可以录制和回放 web 界面中的操作，其核心原理就是上面介绍的方案。</p><p>rrweb 包含三个部分：</p><ul><li>rrweb-snapshot 主要处理 DOM 结构序列化和重组；</li><li>rrweb 主要功能是录制和回放；</li><li>rrweb-player 一个视频播放器 UI 空间</li></ul><p>通过 rrweb.record 方法来录制页面， emit 回调可接受到录制的数据。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 1.录制</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">events</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> []; </span><span style="color:#7F848E;font-style:italic;">// 记录快照</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">rrweb</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">record</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">emit</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">event</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 将 event 存入 events 数组中</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">events</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">event</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#6B737C;">// 1.录制</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#B392F0;"> events </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> []; </span><span style="color:#6B737C;">// 记录快照</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">rrweb</span><span style="color:#B392F0;">.record({</span></span>
<span class="line"><span style="color:#B392F0;">  emit(event) {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">// 将 event 存入 events 数组中</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">events</span><span style="color:#B392F0;">.push(event);</span></span>
<span class="line"><span style="color:#B392F0;">  }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">});</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>通过 rrweb.Replayer 可回放视频，需要传递录制好的数据。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 2.回放</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">replayer</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">rrweb</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Replayer</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">events</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">replayer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">play</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#6B737C;">// 2.回放</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">replayer</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">rrweb</span><span style="color:#B392F0;">.Replayer(events);</span></span>
<span class="line"><span style="color:#79B8FF;">replayer</span><span style="color:#B392F0;">.play();</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="rrweb-源码" tabindex="-1">rrweb 源码 <a class="header-anchor" href="#rrweb-源码" aria-hidden="true">#</a></h2><p>按照以上所说的思路，接下来会解析其中一些关键代码，当然只是在我个人理解上做的一些分析，实际上 rrweb 源码远不止这些。</p><p><img src="`+o+`" alt=""></p><p>核心部分为三大块： record (录制)、 replay 回放、 snapshot 快照。</p><h3 id="record-录制" tabindex="-1">Record 录制 <a class="header-anchor" href="#record-录制" aria-hidden="true">#</a></h3><p>在 DOM 加载完成后， record 会做一次完整的 DOM 序列化，我们把它叫做全量快照，全量快照记录了整个 HTML 数据结构。 在 record.ts 中找到关键的入口函数的定义 init ，入口函数是会在 document 加载完成或（可交互，完成）时调用了 takeFullSnapshot 以及 observe(document) 函数。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">readyState</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;interactive&#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">||</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">readyState</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;complete&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">init</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">on</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;load&#39;</span><span style="color:#ABB2BF;">,() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> { </span><span style="color:#61AFEF;">init</span><span style="color:#ABB2BF;">(); },),</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">init</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">takeFullSnapshot</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// 生成全量快照</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">handlers</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">observe</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">document</span><span style="color:#ABB2BF;">)); </span><span style="color:#7F848E;font-style:italic;">//监听器</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">document</span><span style="color:#B392F0;">.readyState </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;interactive&#39;</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">||</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">document</span><span style="color:#B392F0;">.readyState </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;complete&#39;</span></span>
<span class="line"><span style="color:#B392F0;">) {</span></span>
<span class="line"><span style="color:#B392F0;">    init();</span></span>
<span class="line"><span style="color:#B392F0;">} </span><span style="color:#F97583;">else</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    on(</span><span style="color:#FFAB70;">&#39;load&#39;</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;">() </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> { init(); }</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;">)</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> init </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    takeFullSnapshot(); </span><span style="color:#6B737C;">// 生成全量快照</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">handlers</span><span style="color:#B392F0;">.push(observe(document)); </span><span style="color:#6B737C;">//监听器</span></span>
<span class="line"><span style="color:#B392F0;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>document.readyState 包含三种状态：</p><ol><li>可交互 interactive ；</li><li>正在加载中 loading ；</li><li>完成 complete</li></ol><p>takeFullSnapshot 从字面意思能看出其作用是生成「完整」的快照，也就是会将 document 序列化出一个完整的数据，称之为 「全量快照」 。 所有序列化相关操作都是使用 snapshot 完成， snapshot 接受一个 dom 对象和一个配置对象传递 document 将整个页面序列化得到完成的快照数据。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 生成全量快照</span></span>
<span class="line"><span style="color:#61AFEF;">takeFullSnapshot</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">isCheckout</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> [</span><span style="color:#E5C07B;">node</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">idNodeMap</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">snapshot</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">document</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">//...一些配置项</span></span>
<span class="line"><span style="color:#ABB2BF;">  });</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#6B737C;">// 生成全量快照</span></span>
<span class="line"><span style="color:#B392F0;">takeFullSnapshot </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> (isCheckout </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">false</span><span style="color:#B392F0;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> [</span><span style="color:#79B8FF;">node</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">idNodeMap</span><span style="color:#B392F0;">] </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> snapshot(document</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">//...一些配置项</span></span>
<span class="line"><span style="color:#B392F0;">  });</span></span>
<span class="line"><span style="color:#B392F0;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><blockquote><p>idNodeMap 是一个 id 为 key , DOM 对象为 value 的 key-value 键值对对象</p></blockquote><p>observe(document) 是一些监听器的初始化，同样是将整个 document 对象传过去进行监听，通过调用 initObservers 来初始化一些监听器。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">observe</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">doc</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Document</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">initObservers</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> observe </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> (doc</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Document) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> initObservers();</span></span>
<span class="line"><span style="color:#B392F0;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>在 observer.ts 文件中可以找到 initObservers 函数定义，该函数初始化了 11 个监听器，可以分为 DOM 类型 / Event 事件类型 / Media 媒体三大类：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">initObservers</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// dom</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">mutationObserver</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">initMutationObserver</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">mousemoveHandler</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">initMoveObserver</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">mouseInteractionHandler</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">initMouseInteractionObserver</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">scrollHandler</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">initScrollObserver</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">viewportResizeHandler</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">initViewportResizeObserver</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> initObservers(</span></span>
<span class="line"><span style="color:#6B737C;">// dom</span></span>
<span class="line"><span style="color:#B392F0;">const mutationObserver </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> initMutationObserver();</span></span>
<span class="line"><span style="color:#B392F0;">const mousemoveHandler </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> initMoveObserver();</span></span>
<span class="line"><span style="color:#B392F0;">const mouseInteractionHandler </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> initMouseInteractionObserver();</span></span>
<span class="line"><span style="color:#B392F0;">const scrollHandler </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> initScrollObserver();</span></span>
<span class="line"><span style="color:#B392F0;">const viewportResizeHandler </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> initViewportResizeObserver();</span></span>
<span class="line"><span style="color:#6B737C;">// ...</span></span>
<span class="line"><span style="color:#B392F0;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ul><li>DOM 变化监听器，主要有 DOM 变化(增删改), 样式变化，核心是通过 MutationObserver 来实现</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">mutationObserverCtor</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">MutationObserver</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">observer</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">mutationObserverCtor</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 处理变化的数据</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">mutationBuffer</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">processMutations</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">bind</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">mutationBuffer</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">observer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">observe</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">doc</span><span style="color:#ABB2BF;">, {});</span></span>
<span class="line"><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">observer</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#B392F0;"> mutationObserverCtor </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">window</span><span style="color:#B392F0;">.MutationObserver;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">observer</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> mutationObserverCtor(</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// 处理变化的数据</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">mutationBuffer</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">processMutations</span><span style="color:#B392F0;">.bind(mutationBuffer)</span></span>
<span class="line"><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#79B8FF;">observer</span><span style="color:#B392F0;">.observe(doc</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> {});</span></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#B392F0;"> observer;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ul><li>交互监听-以鼠标移动 initMoveObserver 为例</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 鼠标移动记录</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">initMoveObserver</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">updatePosition</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span></span>
<span class="line"><span style="color:#ABB2BF;">    (</span><span style="color:#E06C75;">throttle</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">MouseEvent</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">|</span></span>
<span class="line"><span style="color:#ABB2BF;">    (</span><span style="color:#E06C75;">TouchEvent</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">      ((</span><span style="color:#E06C75;font-style:italic;">evt</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">positions</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">clientX</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">clientY</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        });</span></span>
<span class="line"><span style="color:#ABB2BF;">      }));</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">handlers</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">on</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;mousemove&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">updatePosition</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">doc</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">on</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;touchmove&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">updatePosition</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">doc</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">  ];</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#6B737C;">// 鼠标移动记录</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> initMoveObserver() {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">updatePosition</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#B392F0;">    (throttle </span><span style="color:#F97583;">&lt;</span><span style="color:#B392F0;"> MouseEvent) </span><span style="color:#F97583;">|</span></span>
<span class="line"><span style="color:#B392F0;">    (TouchEvent </span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">      ((evt) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#79B8FF;">positions</span><span style="color:#B392F0;">.push({</span></span>
<span class="line"><span style="color:#B392F0;">          x</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> clientX</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">          y</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> clientY</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">        });</span></span>
<span class="line"><span style="color:#B392F0;">      }));</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">handlers</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> [</span></span>
<span class="line"><span style="color:#B392F0;">    on(</span><span style="color:#FFAB70;">&quot;mousemove&quot;</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> updatePosition</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> doc)</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    on(</span><span style="color:#FFAB70;">&quot;touchmove&quot;</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> updatePosition</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> doc)</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  ];</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><ul><li>媒体类型监听器，有 canvas / video / audio ，以 video 为例，本质上记录播放和暂停状态， mediaInteractionCb 将 play / pause 状态回调出来。</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">initMediaInteractionObserver</span><span style="color:#ABB2BF;">(): </span><span style="color:#E5C07B;">listenerHandler</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">mediaInteractionCb</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;play&#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">MediaInteractions</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">Play</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">MediaInteractions</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">Pause</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">mirror</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getId</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">as</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">INode</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> initMediaInteractionObserver()</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> listenerHandler {</span></span>
<span class="line"><span style="color:#B392F0;">    mediaInteractionCb({</span></span>
<span class="line"><span style="color:#B392F0;">        type</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> type </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;play&#39;</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">?</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">MediaInteractions</span><span style="color:#B392F0;">.Play </span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">MediaInteractions</span><span style="color:#B392F0;">.Pause</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">        id</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">mirror</span><span style="color:#B392F0;">.getId(target </span><span style="color:#F97583;">as</span><span style="color:#B392F0;"> INode)</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    });</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="snapshot-快照" tabindex="-1">Snapshot 快照 <a class="header-anchor" href="#snapshot-快照" aria-hidden="true">#</a></h3><p>snapshot 负责序列化和重组的功能，主要通过 serializeNodeWithId 处理 DOM 序列化和 rebuildWithSN 函数处理 DOM 重组。 serializeNodeWithId 函数负责序列化，主要做了三件事：</p><ul><li>调用 serializeNode 序列化 Node ；</li><li>通过 genId() 生成唯一 ID 并绑定到 Node 中；</li><li>递归实现序列化子节点，并最终返回一个带 ID 的对象</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 序列化一个带有ID的DOM</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">serializeNodeWithId</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">n</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 1. 序列化 核心函数 serializeNode</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">_serializedNode</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">serializeNode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">n</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 2. 生成唯一ID</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">genId</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 绑定ID</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">serializedNode</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">assign</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">_serializedNode</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 3.子节点序列化-递归</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">childN</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">of</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">from</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">n</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">childNodes</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">serializedChildNode</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">serializeNodeWithId</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">childN</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">bypassOptions</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">serializedChildNode</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">serializedNode</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">childNodes</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">serializedChildNode</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#6B737C;">// 序列化一个带有ID的DOM</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> serializeNodeWithId(n) {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// 1. 序列化 核心函数 serializeNode</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">_serializedNode</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> serializeNode(n);</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// 2. 生成唯一ID</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">let</span><span style="color:#B392F0;"> id </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> genId();</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// 绑定ID</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">serializedNode</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Object</span><span style="color:#B392F0;">.assign(_serializedNode</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> { id });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// 3.子节点序列化-递归</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">for</span><span style="color:#B392F0;"> (</span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">childN</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">of</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Array</span><span style="color:#B392F0;">.from(</span><span style="color:#79B8FF;">n</span><span style="color:#B392F0;">.childNodes)) {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">serializedChildNode</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> serializeNodeWithId(childN</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> bypassOptions);</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (serializedChildNode) {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#79B8FF;">serializedNode</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">childNodes</span><span style="color:#B392F0;">.push(serializedChildNode);</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>serializeNodeWithId 核心是通过 serializeNode 序列化 DOM ，针对不同的节点分别做了一些特殊处理。</p><p>节点属性的处理:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">value</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">of</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">from</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;">n</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">as</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">HTMLElement</span><span style="color:#ABB2BF;">).</span><span style="color:#E06C75;">attributes</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">attributes</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">transformAttribute</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">doc</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">tagName</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#B392F0;"> (</span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> { </span><span style="color:#79B8FF;">name</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">value</span><span style="color:#B392F0;"> } </span><span style="color:#F97583;">of</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Array</span><span style="color:#B392F0;">.from((n </span><span style="color:#F97583;">as</span><span style="color:#B392F0;"> HTMLElement).attributes)) {</span></span>
<span class="line"><span style="color:#B392F0;">    attributes[name] </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> transformAttribute(doc</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> tagName</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> name</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> value);</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>处理外联 css 样式，通过 getCssRulesString 获取到具体样式代码，并且储存到 attributes 中。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">cssText</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">getCssRulesString</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">stylesheet</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">as</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">CSSStyleSheet</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">cssText</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">attributes</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_cssText</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">absoluteToStylesheet</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">cssText</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">stylesheet</span><span style="color:#56B6C2;">!</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">href</span><span style="color:#56B6C2;">!</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    );</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">cssText</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> getCssRulesString(stylesheet </span><span style="color:#F97583;">as</span><span style="color:#B392F0;"> CSSStyleSheet);</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (cssText) {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">attributes</span><span style="color:#B392F0;">._cssText </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> absoluteToStylesheet(</span></span>
<span class="line"><span style="color:#B392F0;">        cssText</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">        stylesheet</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">.href</span><span style="color:#F97583;">!</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    );</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>处理 form 表单，逻辑是保存选中状态，并且做了一些安全处理，例如密码框内容替换成 * 。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">attributes</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">!==</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;radio&#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;&amp;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">attributes</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">!==</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;checkbox&#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;&amp;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">attributes</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">maskInputOptions</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">tagName</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;*&#39;</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">repeat</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">value</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">n</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">checked</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">attributes</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">checked</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">n</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">checked</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">attributes</span><span style="color:#B392F0;">.type </span><span style="color:#F97583;">!==</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;radio&#39;</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">attributes</span><span style="color:#B392F0;">.type </span><span style="color:#F97583;">!==</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;checkbox&#39;</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">// ...</span></span>
<span class="line"><span style="color:#B392F0;">) {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">attributes</span><span style="color:#B392F0;">.value </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> maskInputOptions[tagName]</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">?</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;*&#39;</span><span style="color:#B392F0;">.repeat(</span><span style="color:#79B8FF;">value</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">length</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> value;</span></span>
<span class="line"><span style="color:#B392F0;">  } </span><span style="color:#F97583;">else</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">n</span><span style="color:#B392F0;">.checked) {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">attributes</span><span style="color:#B392F0;">.checked </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">n</span><span style="color:#B392F0;">.checked;</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>canvas 状态保存通过 toDataURL 保存 canvas 数据：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#E5C07B;">attributes</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">rr_dataURL</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">n</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">as</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">HTMLCanvasElement</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">toDataURL</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#79B8FF;">attributes</span><span style="color:#B392F0;">.rr_dataURL </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> (n </span><span style="color:#F97583;">as</span><span style="color:#B392F0;"> HTMLCanvasElement).toDataURL();</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>rebuild 负责重建 DOM :</p><ul><li>通过 buildNodeWithSN 函数重组 Node</li><li>递归调用 重组子节点</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">buildNodeWithSN</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">n</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// DOM 重组核心函数 buildNode</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">node</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">buildNode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">n</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">doc</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">hackCss</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 子节点重建并且appendChild</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">childN</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">of</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">n</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">childNodes</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">childNode</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">buildNodeWithSN</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">childN</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">afterAppend</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#61AFEF;">afterAppend</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">childNode</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> buildNodeWithSN(n) {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// DOM 重组核心函数 buildNode</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">let</span><span style="color:#B392F0;"> node </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> buildNode(n</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> { doc</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> hackCss });</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// 子节点重建并且appendChild</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">for</span><span style="color:#B392F0;"> (</span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">childN</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">of</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">n</span><span style="color:#B392F0;">.childNodes) {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">childNode</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> buildNodeWithSN(childN);</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (afterAppend) {</span></span>
<span class="line"><span style="color:#B392F0;">      afterAppend(childNode);</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="replay-回放" tabindex="-1">Replay 回放 <a class="header-anchor" href="#replay-回放" aria-hidden="true">#</a></h3><p>回放部分在 replay.ts 文件中，先创建沙箱环境，接着或进行重建 document 全量快照，在通过 requestAnimationFrame 模拟定时器的方式来播放增量快照。 replay 的构造函数接收两个参数，快照数据 events 和 配置项 config</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Replayer</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">events</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">config</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 1.创建沙箱环境</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setupDom</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 2.定时器</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">timer</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Timer</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 3.播放服务</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">service</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">createPlayerService</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">events</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">timer</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">service</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">class</span><span style="color:#B392F0;"> Replayer {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">constructor</span><span style="color:#B392F0;">(events</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> config) {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">// 1.创建沙箱环境</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.setupDom();</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">// 2.定时器</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">timer</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> Timer();</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">// 3.播放服务</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.service </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> createPlayerService(events</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> timer);</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">service</span><span style="color:#B392F0;">.start();</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>构造函数中最核心三步，创建沙箱环境，定时器，和初始化播放器并且启动。播放器创建依赖 events 和 timer ，本质上还是使用 timer 来实现播放。</p><h4 id="沙箱环境" tabindex="-1">沙箱环境 <a class="header-anchor" href="#沙箱环境" aria-hidden="true">#</a></h4><p>首先，在 replay.ts 的构造函数中可以找打 this.setupDom 的调用， setupDom 核心是通过 iframe 来创建出一个沙箱环境。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#E06C75;">private</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">setupDom</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 创建iframe</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">iframe</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createElement</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;iframe&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">iframe</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">style</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">display</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;none&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">iframe</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setAttribute</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;sandbox&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">attributes</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39; &#39;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#B392F0;">private setupDom() {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// 创建iframe</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.iframe </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">document</span><span style="color:#B392F0;">.createElement(</span><span style="color:#FFAB70;">&#39;iframe&#39;</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">iframe</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">style</span><span style="color:#B392F0;">.display </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;none&#39;</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">iframe</span><span style="color:#B392F0;">.setAttribute(</span><span style="color:#FFAB70;">&#39;sandbox&#39;</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">attributes</span><span style="color:#B392F0;">.join(</span><span style="color:#FFAB70;">&#39; &#39;</span><span style="color:#B392F0;">));</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="播放服务" tabindex="-1">播放服务 <a class="header-anchor" href="#播放服务" aria-hidden="true">#</a></h4><p>同样在 replay.ts 构造函数中，调用 createPlayerService 函数来创建播放器服务器，该函数在同级目录下的 machine.ts 中定义了，核心思路是通过给定时器 timer 加入需要执行的快照动作 actions , 在调用 timer.start() 开始回放快照。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">createPlayerService</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">//...</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">play</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">ctx</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// 获取每个 event 执行的 doAction 函数</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">event</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">of</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">needEvents</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#7F848E;font-style:italic;">//..</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">castFn</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">getCastFn</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">event</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E5C07B;">actions</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#61AFEF;">doAction</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">                    </span><span style="color:#61AFEF;">castFn</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">                }</span></span>
<span class="line"><span style="color:#ABB2BF;">            })</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#7F848E;font-style:italic;">//..</span></span>
<span class="line"><span style="color:#ABB2BF;">         }</span></span>
<span class="line"><span style="color:#ABB2BF;">         </span><span style="color:#7F848E;font-style:italic;">// 添加到定时器队列中</span></span>
<span class="line"><span style="color:#ABB2BF;">         </span><span style="color:#E5C07B;">timer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addActions</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">actions</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">         </span><span style="color:#7F848E;font-style:italic;">// 启动定时器播放 视频</span></span>
<span class="line"><span style="color:#ABB2BF;">         </span><span style="color:#E5C07B;">timer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">//...</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> createPlayerService() {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">//...</span></span>
<span class="line"><span style="color:#B392F0;">    play(ctx) {</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#6B737C;">// 获取每个 event 执行的 doAction 函数</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">for</span><span style="color:#B392F0;"> (</span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">event</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">of</span><span style="color:#B392F0;"> needEvents) {</span></span>
<span class="line"><span style="color:#B392F0;">            </span><span style="color:#6B737C;">//..</span></span>
<span class="line"><span style="color:#B392F0;">            </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">castFn</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> getCastFn(event);</span></span>
<span class="line"><span style="color:#B392F0;">            </span><span style="color:#79B8FF;">actions</span><span style="color:#B392F0;">.push({</span></span>
<span class="line"><span style="color:#B392F0;">                doAction</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">                    castFn();</span></span>
<span class="line"><span style="color:#B392F0;">                }</span></span>
<span class="line"><span style="color:#B392F0;">            })</span></span>
<span class="line"><span style="color:#B392F0;">            </span><span style="color:#6B737C;">//..</span></span>
<span class="line"><span style="color:#B392F0;">         }</span></span>
<span class="line"><span style="color:#B392F0;">         </span><span style="color:#6B737C;">// 添加到定时器队列中</span></span>
<span class="line"><span style="color:#B392F0;">         </span><span style="color:#79B8FF;">timer</span><span style="color:#B392F0;">.addActions(actions);</span></span>
<span class="line"><span style="color:#B392F0;">         </span><span style="color:#6B737C;">// 启动定时器播放 视频</span></span>
<span class="line"><span style="color:#B392F0;">         </span><span style="color:#79B8FF;">timer</span><span style="color:#B392F0;">.start();</span></span>
<span class="line"><span style="color:#B392F0;">    }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">//...</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><blockquote><p>播放服务使用到第三方库 @xstate/fsm 状态机来控制各种状态（播放，暂停，直播）</p></blockquote><p>定时器 timer.ts 也是在同级目录下，核心是通过 requestAnimationFrame 实现了定时器功能， 并对快照回放，以队列的形式存储需要播放的快照 actions ，接着在 start 中递归调用 action.doAction 来实现对应时间节点的快照还原。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Timer</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 添加队列</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">public</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">addActions</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">actions</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">actionWithDelay</span><span style="color:#ABB2BF;">[]) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">actions</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">actions</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">concat</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">actions</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 播放队列</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">public</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">check</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#7F848E;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#7F848E;font-style:italic;">// 循环调用actions中的doAction 也就是 castFn 函数</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#C678DD;">while</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">actions</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">action</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">actions</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#E5C07B;">actions</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">shift</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#7F848E;font-style:italic;">// doAction 会对快照进行回放动作，针对不同快照会执行不同动作</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#E5C07B;">action</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">doAction</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">actions</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">liveMode</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">raf</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">requestAnimationFrame</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">check</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">raf</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">requestAnimationFrame</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">check</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">class</span><span style="color:#B392F0;"> Timer {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">// 添加队列</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">public</span><span style="color:#B392F0;"> addActions(actions</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> actionWithDelay[]) {</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.actions </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">actions</span><span style="color:#B392F0;">.concat(actions);</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">// 播放队列</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">public</span><span style="color:#B392F0;"> start() {</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> check() {</span></span>
<span class="line"><span style="color:#B392F0;">            </span><span style="color:#6B737C;">// ...</span></span>
<span class="line"><span style="color:#B392F0;">            </span><span style="color:#6B737C;">// 循环调用actions中的doAction 也就是 castFn 函数</span></span>
<span class="line"><span style="color:#B392F0;">            </span><span style="color:#F97583;">while</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">actions</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">length</span><span style="color:#B392F0;">) {</span></span>
<span class="line"><span style="color:#B392F0;">                </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">action</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> actions[</span><span style="color:#F8F8F8;">0</span><span style="color:#B392F0;">];</span></span>
<span class="line"><span style="color:#B392F0;">                </span><span style="color:#79B8FF;">actions</span><span style="color:#B392F0;">.shift();</span></span>
<span class="line"><span style="color:#B392F0;">                </span><span style="color:#6B737C;">// doAction 会对快照进行回放动作，针对不同快照会执行不同动作</span></span>
<span class="line"><span style="color:#B392F0;">                </span><span style="color:#79B8FF;">action</span><span style="color:#B392F0;">.doAction();</span></span>
<span class="line"><span style="color:#B392F0;">            }</span></span>
<span class="line"><span style="color:#B392F0;">            </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">actions</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">length</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">0</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">||</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">self</span><span style="color:#B392F0;">.liveMode) {</span></span>
<span class="line"><span style="color:#B392F0;">                </span><span style="color:#79B8FF;">self</span><span style="color:#B392F0;">.raf </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> requestAnimationFrame(check);</span></span>
<span class="line"><span style="color:#B392F0;">            }</span></span>
<span class="line"><span style="color:#B392F0;">        }</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.raf </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> requestAnimationFrame(check);</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>doAction 在不同类型快照会执行不同动作，在播放服务中 doAction 最终会调用 getCastFn 函数来做了一些 case :</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#E06C75;">private</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">getCastFn</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">event</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">eventWithTime</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">isSync</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">switch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">event</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">case</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">EventType</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">DomContentLoaded</span><span style="color:#ABB2BF;">: </span><span style="color:#7F848E;font-style:italic;">//dom 加载解析完成</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">case</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">EventType</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">FullSnapshot</span><span style="color:#ABB2BF;">: </span><span style="color:#7F848E;font-style:italic;">// 全量快照</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">case</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">EventType</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">IncrementalSnapshot</span><span style="color:#ABB2BF;">: </span><span style="color:#7F848E;font-style:italic;">//增量</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#61AFEF;">castFn</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">applyIncremental</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">event</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">isSync</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#B392F0;">private getCastFn(event: eventWithTime</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> isSync </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">false</span><span style="color:#B392F0;">) {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">switch</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">event</span><span style="color:#B392F0;">.type) {</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">case</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">EventType</span><span style="color:#B392F0;">.DomContentLoaded: </span><span style="color:#6B737C;">//dom 加载解析完成</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">case</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">EventType</span><span style="color:#B392F0;">.FullSnapshot: </span><span style="color:#6B737C;">// 全量快照</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">case</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">EventType</span><span style="color:#B392F0;">.IncrementalSnapshot: </span><span style="color:#6B737C;">//增量</span></span>
<span class="line"><span style="color:#B392F0;">            castFn </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">                </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.applyIncremental(event</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> isSync);</span></span>
<span class="line"><span style="color:#B392F0;">            }</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>applyIncremental 函数会增对不同的增量快照做不同处理，包含 DOM 增量， 鼠标交互，页面滚动等，以 DOM 增量快照的 case 为例，最终会走到 applyMutation 中：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#E06C75;">private</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">applyIncremental</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">switch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">d</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">source</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">case</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">IncrementalSource</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">Mutation</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">applyMutation</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">d</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">isSync</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// DOM变化</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">case</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">IncrementalSource</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">MouseMove</span><span style="color:#ABB2BF;">: </span><span style="color:#7F848E;font-style:italic;">//鼠标移动</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">case</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">IncrementalSource</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">MouseInteraction</span><span style="color:#ABB2BF;">: </span><span style="color:#7F848E;font-style:italic;">//鼠标点击事件</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#B392F0;">private applyIncremental(){</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">switch</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">d</span><span style="color:#B392F0;">.source) {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">case</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">IncrementalSource</span><span style="color:#B392F0;">.Mutation: {</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.applyMutation(d</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> isSync); </span><span style="color:#6B737C;">// DOM变化</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">break</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">      }</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">case</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">IncrementalSource</span><span style="color:#B392F0;">.MouseMove: </span><span style="color:#6B737C;">//鼠标移动</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">case</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">IncrementalSource</span><span style="color:#B392F0;">.MouseInteraction: </span><span style="color:#6B737C;">//鼠标点击事件</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>applyMutation 才是最终执行 DOM 还原操作的地方，包含 DOM 的增删改步骤:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#E06C75;">private</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">applyMutation</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">d</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">mutationData</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">useVirtualParent</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">boolean</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">d</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">removes</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">mutation</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">//.. 移除dom</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">appendNode</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">mutation</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">addedNodeMutation</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// 添加dom到具体节点下</span></span>
<span class="line"><span style="color:#ABB2BF;">    };</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">d</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">adds</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">mutation</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// 添加</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#61AFEF;">appendNode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">mutation</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">d</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">texts</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">mutation</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">//...文本处理</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">d</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">attributes</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">mutation</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">//...属性处理</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#B392F0;">private applyMutation(d: mutationData</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> useVirtualParent: boolean) {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">d</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">removes</span><span style="color:#B392F0;">.forEach((mutation) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#6B737C;">//.. 移除dom</span></span>
<span class="line"><span style="color:#B392F0;">    });</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> appendNode </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> (mutation</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> addedNodeMutation) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#6B737C;">// 添加dom到具体节点下</span></span>
<span class="line"><span style="color:#B392F0;">    };</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">d</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">adds</span><span style="color:#B392F0;">.forEach((mutation) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#6B737C;">// 添加</span></span>
<span class="line"><span style="color:#B392F0;">        appendNode(mutation);</span></span>
<span class="line"><span style="color:#B392F0;">    });</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">d</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">texts</span><span style="color:#B392F0;">.forEach((mutation) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#6B737C;">//...文本处理</span></span>
<span class="line"><span style="color:#B392F0;">    });</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">d</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">attributes</span><span style="color:#B392F0;">.forEach((mutation) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#6B737C;">//...属性处理</span></span>
<span class="line"><span style="color:#B392F0;">    });</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>以上就是回放的关键流程实现代码， rrweb 中不仅仅是做了这些，还包含数据压缩，移动端处理，隐私问题等等细节处理，有兴趣可自行查看源码。</p>`,95)]))}const A=n(e,[["render",c]]);export{d as __pageData,A as default};
