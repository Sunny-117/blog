import{_ as n,o as a,c as l,a as p}from"./app.f9cf8683.js";const o="/blog/assets/2023-02-01-13-46-04.6c717bd8.png",e="/blog/assets/2023-02-01-13-48-01.99bd7f6c.png",c="/blog/assets/2023-02-01-13-49-33.2c20338b.png",t="/blog/assets/2023-02-01-13-52-47.6a1c0330.png",r="/blog/assets/2023-02-01-13-55-15.078d7618.png",B="/blog/assets/2023-02-01-13-56-31.fb7de130.png",y="/blog/assets/2023-02-01-13-58-47.a4395511.png",F="/blog/assets/2023-02-01-15-25-57.438f544b.png",v=JSON.parse('{"title":"Vuejs 数据响应原理","description":"","frontmatter":{},"headers":[{"level":2,"title":"Vue2","slug":"vue2","link":"#vue2","children":[{"level":3,"title":"Observer","slug":"observer","link":"#observer","children":[]},{"level":3,"title":"Dep","slug":"dep","link":"#dep","children":[]},{"level":3,"title":"Watcher","slug":"watcher","link":"#watcher","children":[]},{"level":3,"title":"Scheduler","slug":"scheduler","link":"#scheduler","children":[]},{"level":3,"title":"总体流程","slug":"总体流程","link":"#总体流程","children":[]}]},{"level":2,"title":"Vue3 数据响应原理","slug":"vue3-数据响应原理","link":"#vue3-数据响应原理","children":[]},{"level":2,"title":"@vue/reactivity api","slug":"vue-reactivity-api","link":"#vue-reactivity-api","children":[{"level":3,"title":"获取响应式数据","slug":"获取响应式数据","link":"#获取响应式数据","children":[]},{"level":3,"title":"监听数据变化","slug":"监听数据变化","link":"#监听数据变化","children":[]},{"level":3,"title":"判断","slug":"判断","link":"#判断","children":[]},{"level":3,"title":"转换","slug":"转换","link":"#转换","children":[]},{"level":3,"title":"降低心智负担","slug":"降低心智负担","link":"#降低心智负担","children":[]}]}],"relativePath":"vue/reactive.md","lastUpdated":1740908463000}'),i={name:"vue/reactive.md"};function u(A,s,b,d,C,m){return a(),l("div",null,s[0]||(s[0]=[p('<h1 id="vuejs-数据响应原理" tabindex="-1">Vuejs 数据响应原理 <a class="header-anchor" href="#vuejs-数据响应原理" aria-hidden="true">#</a></h1><h2 id="vue2" tabindex="-1">Vue2 <a class="header-anchor" href="#vue2" aria-hidden="true">#</a></h2><p><a href="https://cn.vuejs.org/v2/guide/reactivity.html" target="_blank" rel="noreferrer">https://cn.vuejs.org/v2/guide/reactivity.html</a></p><p><img src="'+o+'" alt=""> 通过 <code>Object.defineProperty</code> 遍历对象的每一个属性，把数据变成 <code>getter</code>,<code>setter</code>。读取属性 <code>getter</code>, 更改属性 <code>setter</code>。形成了响应式数据。组件 <code>render</code> 函数会生成虚拟 <code>DOM</code> 树，影响到界面。怎么让响应式数据和虚拟 <code>dom</code> 连接起来呢？<code>render</code> 运行的时候用到了响应式数据，于是收集了依赖，数据 变化，会通知 <code>watch</code>，<code>watch</code> 会重新运行 render 函数</p><p><strong>响应式数据的最终目标</strong>，是当对象本身或对象属性发生变化时，将会运行一些函数，最常见的就是 render 函数。 在具体实现上，vue2 用到了<strong>几个核心模块</strong>：</p><ol><li>Observer</li><li>Dep</li><li>Watcher</li><li>Scheduler</li></ol><h3 id="observer" tabindex="-1">Observer <a class="header-anchor" href="#observer" aria-hidden="true">#</a></h3><p>Observer 要实现的目标非常简单，就是把一个普通的对象转换为响应式的对象</p><p>为了实现这一点，Observer 把对象的每个属性通过 Object.defineProperty 转换为带有 getter 和 setter 的属性，这样一来，当访问或设置属性时，vue 就有机会做一些别的事情。</p><p><img src="'+e+`" alt=""></p><p>Observer 是 vue 内部的构造器，我们可以通过 Vue 提供的静态方法 Vue.observable( object )间接的使用该功能。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">c</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">d</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">f</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  ],</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#E5C07B;">Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">observable</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">//递归遍历</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#B392F0;"> obj </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  a</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">1</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  c</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    d</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">3</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  f</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> [</span></span>
<span class="line"><span style="color:#B392F0;">    {</span></span>
<span class="line"><span style="color:#B392F0;">      a</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">1</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">      b</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">2</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F8F8F8;">3</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  ]</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">};</span></span>
<span class="line"><span style="color:#79B8FF;">Vue</span><span style="color:#B392F0;">.observable(obj); </span><span style="color:#6B737C;">//递归遍历</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>在组件生命周期中，数据响应式发生在 <code>beforeCreate</code> 之后，<code>created</code> 之前。</p><p>具体实现上，它会递归遍历对象的所有属性，以完成深度的属性转换。</p><p>由于遍历时只能遍历到对象的当前属性，因此无法监测到将来动态增加或删除的属性，因此 vue 提供了<code>$set</code>和<code>$delete</code> 两个实例方法，让开发者通过这两个实例方法对已有响应式对象添加或删除属性。</p><p>对于数组，vue 会更改它的隐式原型，之所以这样做，是因为 vue 需要监听那些可能改变数组内容的方法</p><p><img src="`+c+`" alt=""></p><p>所以如果直接给数组的某一项（下标）直接赋值，监控不到</p><p>总之，Observer 的目标，就是要让一个对象，它属性的读取、赋值，内部数组的变化都要能够被 vue 感知到。</p><h3 id="dep" tabindex="-1">Dep <a class="header-anchor" href="#dep" aria-hidden="true">#</a></h3><p>这里有两个问题没解决，就是读取属性时要做什么事，而属性变化时要做什么事，这个问题需要依靠 Dep 来解决。 Dep 的含义是 Dependency，表示依赖的意思。 Vue 会为响应式对象中的每个属性、对象本身、数组本身创建一个 Dep 实例，</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">//dep</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">//dep</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">n</span><span style="color:#ABB2BF;">: [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">], </span><span style="color:#7F848E;font-style:italic;">//dep</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">d</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">//dep</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">//dep</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">obj</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">//dep</span></span>
<span class="line"><span style="color:#B392F0;">  a</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">1</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#6B737C;">//dep</span></span>
<span class="line"><span style="color:#B392F0;">  n</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> [</span><span style="color:#F8F8F8;">1</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">2</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">3</span><span style="color:#B392F0;">]</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#6B737C;">//dep</span></span>
<span class="line"><span style="color:#B392F0;">  d</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">//dep</span></span>
<span class="line"><span style="color:#B392F0;">    p</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">1</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#6B737C;">//dep</span></span>
<span class="line"><span style="color:#B392F0;">  }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>每个 Dep 实例都有能力做以下两件事：</p><ul><li><p>记录依赖：是谁在用我</p></li><li><p>派发更新：我变了，我要通知那些用到我的人</p></li></ul><p>当读取响应式对象的某个属性时，它会进行依赖收集：有人用到了我</p><p>当改变某个属性时，它会派发更新：那些用我的人听好了，我变了</p><p><img src="`+t+'" alt=""></p><p>举个例子：</p><p><img src="'+r+`" alt=""></p><h3 id="watcher" tabindex="-1">Watcher <a class="header-anchor" href="#watcher" aria-hidden="true">#</a></h3><p>这里又出现一个问题，就是 Dep 如何知道是谁在用我？要解决这个问题，需要依靠另一个东西，就是 Watcher。</p><p>当某个函数执行的过程中，用到了响应式数据，响应式数据是无法知道是哪个函数在用自己的 vue 通过一种巧妙的办法来解决这个问题 <strong>我们不要直接执行函数，而是把函数交给一个叫做 watcher 的东西去执行</strong>，watcher 是一个对象，每个这样的函数执行时都应该创建一个 watcher，通过 watcher 去执行 <strong>watcher 会设置一个全局变量，让全局变量记录当前负责执行的 watcher 等于自己，然后再去执行函数，在函数的执行过程中，如果发生了依赖记录 dep.depend()，那么 Dep 就会把这个全局变量记录下来，表示有一个 watcher 用到了我这个属性</strong></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">currentWatcher</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">//接下来执行我</span></span>
<span class="line"><span style="color:#61AFEF;">render</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// --&gt;get(){dep.depend()}//通过全局变量来收集</span></span>
<span class="line"><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">currentWatcher</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#79B8FF;">window</span><span style="color:#B392F0;">.currentWatcher </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">; </span><span style="color:#6B737C;">//接下来执行我</span></span>
<span class="line"><span style="color:#B392F0;">render(); </span><span style="color:#6B737C;">// --&gt;get(){dep.depend()}//通过全局变量来收集</span></span>
<span class="line"><span style="color:#79B8FF;">window</span><span style="color:#B392F0;">.currentWatcher </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">null</span><span style="color:#B392F0;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>当 Dep 进行派发更新时，它会通知之前记录的所有 watcher：我变了</p><p><img src="`+B+`" alt=""></p><p>每一个 vue 组件实例，都至少对应一个 watcher，该 watcher 中记录了该组件的 render 函数。 watcher 首先会把 render 函数运行一次以<strong>收集依赖</strong>，于是<strong>那些在 render 中用到的响应式数据就会记录这个 watcher。</strong> 当<strong>数据变化</strong>时，<strong>dep 就会通知该 watcher</strong>，而 watcher 将重新运行 render 函数，从而让界面重新渲染同时重新记录当前的依赖。</p><h3 id="scheduler" tabindex="-1">Scheduler <a class="header-anchor" href="#scheduler" aria-hidden="true">#</a></h3><p>现在还剩下最后一个问题，就是 Dep 通知 watcher 之后，如果 watcher 执行重运行对应的函数，就有可能导致函数频繁运行，从而导致效率低下</p><p>试想，如果一个交给 watcher 的函数，它里面用到了属性 a、b、c、d，那么 a、b、c、d 属性都会记录依赖，于是下面的代码将触发 4 次更新：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;new data&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;new data&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">c</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;new data&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">d</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;new data&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#79B8FF;">state</span><span style="color:#B392F0;">.a </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;new data&quot;</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#79B8FF;">state</span><span style="color:#B392F0;">.b </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;new data&quot;</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#79B8FF;">state</span><span style="color:#B392F0;">.c </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;new data&quot;</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#79B8FF;">state</span><span style="color:#B392F0;">.d </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;new data&quot;</span><span style="color:#B392F0;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>这样显然是不合适的，因此，watcher 收到派发更新的通知后，实际上不是立即执行对应函数，而是把自己交给一个叫<strong>调度器</strong>的东西</p><p>调度器维护一个执行队列，该队列同一个 watcher 仅会存在一次，队列中的 watcher 不是立即执行，它会通过一个叫做 nextTick 的工具方法，把这些需要执行的 watcher 放入到事件循环的微队列中，nextTick 的具体做法是通过 Promise 完成的</p><p>nextTick 通过 this.$nextTick 暴露给开发者</p><p>也就是说，<strong>当响应式数据变化时，render 函数的执行是异步的，并且在微队列中</strong></p><h3 id="总体流程" tabindex="-1">总体流程 <a class="header-anchor" href="#总体流程" aria-hidden="true">#</a></h3><p><img src="`+y+`" alt=""></p><p>Vue.js 是采用<strong>数据劫持</strong>结合<strong>发布者-订阅者模式</strong>的方式，通过 Object.defineProperty()来劫持各个属性的 setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调。主要分为以下几个步骤：</p><ol><li><p>需要 observe 的数据对象进行递归遍历，包括子属性对象的属性，都加上 setter 和 getter 这样的话，给这个对象的某个值赋值，就会触发 setter，那么就能监听到了数据变化</p></li><li><p>compile 解析模板指令，将模板中的变量替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，更新视图</p></li><li><p>Watcher 订阅者是 Observer 和 Compile 之间通信的桥梁，主要做的事情是:</p><p>① 在自身实例化时往属性订阅器(dep)里面添加自己</p><p>② 自身必须有一个 update()方法</p><p>③ 待属性变动 dep.notice()通知时，能调用自身的 update()方法，并触发 Compile 中绑定的回调，则功成身退。</p></li><li><p>MVVM 作为数据绑定的入口，整合 Observer、Compile 和 Watcher 三者，通过 Observer 来监听自己的 model 数据变化，通过 Compile 来解析编译模板指令，最终利用 Watcher 搭起 Observer 和 Compile 之间的通信桥梁，达到数据变化 -&gt; 视图更新；视图交互变化(input) -&gt; 数据 model 变更的双向绑定效果。</p></li></ol><h2 id="vue3-数据响应原理" tabindex="-1">Vue3 数据响应原理 <a class="header-anchor" href="#vue3-数据响应原理" aria-hidden="true">#</a></h2><p><em>Vue 3.0</em> 中采用了 <em>Proxy</em>，抛弃了 <em>Object.defineProperty</em> 方法。</p><p>究其原因，主要是以下几点：</p><ul><li><em>Object.defineProperty</em> 无法监控到数组下标的变化，导致通过数组下标添加元素，不能实时响应</li><li><em>Object.defineProperty</em> 只能劫持对象的属性，从而需要对每个对象，每个属性进行遍历，如果，属性值是对象，还需要深度遍历。<em>Proxy</em> 可以劫持整个对象，并返回一个新的对象。</li><li><em>Proxy</em> 不仅可以代理对象，还可以代理数组。还可以代理动态增加的属性。</li><li><em>Proxy</em> 有多达 <em>13</em> 种拦截方法</li><li><em>Proxy</em>作为新标准将受到浏览器厂商重点持续的性能优化</li></ul><p>注意：</p><ul><li><strong><em>Proxy</em> 只会代理对象的第一层，那么 <em>Vue3</em> 又是怎样处理这个问题的呢？</strong></li></ul><p>判断当前 <em>Reflect.get</em> 的返回值是否为 <em>Object</em>，如果是则再通过 <em>reactive</em> 方法做代理， 这样就实现了深度观测。</p><ul><li><strong>监测数组的时候可能触发多次 <em>get/set</em>，那么如何防止触发多次呢？</strong></li></ul><p>我们可以判断 <em>key</em> 是否为当前被代理对象 <em>target</em> 自身属性，也可以判断旧值与新值是否相等，只有满足以上两个条件之一时，才有可能执行 <em>trigger</em>。</p><h2 id="vue-reactivity-api" tabindex="-1">@vue/reactivity api <a class="header-anchor" href="#vue-reactivity-api" aria-hidden="true">#</a></h2><h3 id="获取响应式数据" tabindex="-1">获取响应式数据 <a class="header-anchor" href="#获取响应式数据" aria-hidden="true">#</a></h3><table><thead><tr><th style="text-align:left;">API</th><th>传入</th><th>返回</th><th>备注</th></tr></thead><tbody><tr><td style="text-align:left;"><code>reactive</code></td><td><code>plain-object</code></td><td><code>对象代理</code></td><td>深度代理对象中的所有成员</td></tr><tr><td style="text-align:left;"><code>readonly</code></td><td><code>plain-object</code> or <code>proxy</code></td><td><code>对象代理</code></td><td>只能读取代理对象中的成员，不可修改</td></tr><tr><td style="text-align:left;"><code>ref</code></td><td><code>any</code></td><td><code>{ value: ... }</code></td><td>对 value 的访问是响应式的<br>如果给 value 的值是一个对象，<br>则会通过<code>reactive</code>函数进行代理<br>如果已经是代理，则直接使用代理</td></tr><tr><td style="text-align:left;"><code>computed</code></td><td><code>function</code></td><td><code>{ value: ... }</code></td><td>当读取 value 值时，<br>会<strong>根据情况</strong>决定是否要运行函数</td></tr></tbody></table><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 想把{ a: 1, b: 2 }变成响应式</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">reactive</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">readonly</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">ref</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">computed</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 1. reactive</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">reactive</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// window.state = state;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 2. readonly</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 只读，不能set</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">const imState = readonly({ a: 1, b: 2 });</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">window.imState = imState;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*/</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">const imState = readonly(state);//代理套代理</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">window.imState = imState;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// imState -&gt; state -&gt; {a:3,b:2}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 3. ref</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">const count = ref(0);//如果里面是对象，就会调用reactive；普通值就ref</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">console.log(count);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">const count = ref(state);//已经是代理，就返回这个代理</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">console.log(count.value===state)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 4. computed</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*/</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/* const sum = computed(() =&gt; {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    console.log(&quot;computed&quot;);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    return state.a + state.b;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">})</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">console.log(sum.value);//当这句话运行的时候就会输出computed，但是只允许一次(有缓存)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">当依赖数据a,b变了，就重新运行</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#6B737C;">// 想把{ a: 1, b: 2 }变成响应式</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> { reactive</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> readonly</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> ref</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> computed } </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;vue&quot;</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#6B737C;">// 1. reactive</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">state</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> reactive({ a</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">1</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> b</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">2</span><span style="color:#B392F0;"> });</span></span>
<span class="line"><span style="color:#6B737C;">// window.state = state;</span></span>
<span class="line"><span style="color:#6B737C;">// 2. readonly</span></span>
<span class="line"><span style="color:#6B737C;">// 只读，不能set</span></span>
<span class="line"><span style="color:#6B737C;">/*</span></span>
<span class="line"><span style="color:#6B737C;">const imState = readonly({ a: 1, b: 2 });</span></span>
<span class="line"><span style="color:#6B737C;">window.imState = imState;</span></span>
<span class="line"><span style="color:#6B737C;">*/</span></span>
<span class="line"><span style="color:#6B737C;">/*</span></span>
<span class="line"><span style="color:#6B737C;">const imState = readonly(state);//代理套代理</span></span>
<span class="line"><span style="color:#6B737C;">window.imState = imState;</span></span>
<span class="line"><span style="color:#6B737C;">// imState -&gt; state -&gt; {a:3,b:2}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 3. ref</span></span>
<span class="line"><span style="color:#6B737C;">const count = ref(0);//如果里面是对象，就会调用reactive；普通值就ref</span></span>
<span class="line"><span style="color:#6B737C;">console.log(count);</span></span>
<span class="line"><span style="color:#6B737C;">const count = ref(state);//已经是代理，就返回这个代理</span></span>
<span class="line"><span style="color:#6B737C;">console.log(count.value===state)</span></span>
<span class="line"><span style="color:#6B737C;">// 4. computed</span></span>
<span class="line"><span style="color:#6B737C;">*/</span></span>
<span class="line"><span style="color:#6B737C;">/* const sum = computed(() =&gt; {</span></span>
<span class="line"><span style="color:#6B737C;">    console.log(&quot;computed&quot;);</span></span>
<span class="line"><span style="color:#6B737C;">    return state.a + state.b;</span></span>
<span class="line"><span style="color:#6B737C;">})</span></span>
<span class="line"><span style="color:#6B737C;">console.log(sum.value);//当这句话运行的时候就会输出computed，但是只允许一次(有缓存)</span></span>
<span class="line"><span style="color:#6B737C;">当依赖数据a,b变了，就重新运行</span></span>
<span class="line"><span style="color:#6B737C;"> */</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><p>应用：</p><ul><li>如果想要让一个对象变为响应式数据，可以使用<code>reactive</code>或<code>ref</code></li><li>如果想要让一个对象的所有属性只读，使用<code>readonly</code></li><li>如果想要让一个非对象数据变为响应式数据，使用<code>ref</code></li><li>如果想要根据已知的响应式数据得到一个新的响应式数据，使用<code>computed</code></li><li>总结：在 vue3 中，两种数据响应式格式：ref object 和 proxy</li></ul><p>笔试题 1：下面的代码输出结果是什么？</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">reactive</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">readonly</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">ref</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">computed</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">reactive</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">firstName</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Xu Ming&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">lastName</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Deng&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">fullName</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">computed</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;changed&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">\`</span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">lastName</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">, </span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">firstName</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;state ready&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;fullname is&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">fullName</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;fullname is&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">fullName</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">//计算属性有缓存</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">imState</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">readonly</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">imState</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">//false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">stateRef</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">ref</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">stateRef</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">//如果已经是代理，则直接使用代理</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">firstName</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;Cheng&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">lastName</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;Ji&quot;</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">//改了数据，计算属性还是不允许，得等到用到.value的时候才运行</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">imState</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">firstName</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">imState</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">lastName</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;fullname is&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">fullName</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;fullname is&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">fullName</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">imState2</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">readonly</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">stateRef</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">imState2</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">stateRef</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">//代理有区别，一个可改一个不可改</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> { reactive</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> readonly</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> ref</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> computed } </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;vue&quot;</span><span style="color:#B392F0;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">state</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> reactive({</span></span>
<span class="line"><span style="color:#B392F0;">  firstName</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;Xu Ming&quot;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  lastName</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;Deng&quot;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">});</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">fullName</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> computed(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#FFAB70;">&quot;changed&quot;</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">\`</span><span style="color:#F97583;">\${</span><span style="color:#79B8FF;">state</span><span style="color:#B392F0;">.lastName</span><span style="color:#F97583;">}</span><span style="color:#FFAB70;">, </span><span style="color:#F97583;">\${</span><span style="color:#79B8FF;">state</span><span style="color:#B392F0;">.firstName</span><span style="color:#F97583;">}</span><span style="color:#FFAB70;">\`</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">});</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#FFAB70;">&quot;state ready&quot;</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#FFAB70;">&quot;fullname is&quot;</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">fullName</span><span style="color:#B392F0;">.value);</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#FFAB70;">&quot;fullname is&quot;</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">fullName</span><span style="color:#B392F0;">.value); </span><span style="color:#6B737C;">//计算属性有缓存</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">imState</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> readonly(state);</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(imState </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> state); </span><span style="color:#6B737C;">//false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">stateRef</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> ref(state);</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#79B8FF;">stateRef</span><span style="color:#B392F0;">.value </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> state); </span><span style="color:#6B737C;">//如果已经是代理，则直接使用代理</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">state</span><span style="color:#B392F0;">.firstName </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;Cheng&quot;</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#79B8FF;">state</span><span style="color:#B392F0;">.lastName </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;Ji&quot;</span><span style="color:#B392F0;">; </span><span style="color:#6B737C;">//改了数据，计算属性还是不允许，得等到用到.value的时候才运行</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#79B8FF;">imState</span><span style="color:#B392F0;">.firstName</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">imState</span><span style="color:#B392F0;">.lastName);</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#FFAB70;">&quot;fullname is&quot;</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">fullName</span><span style="color:#B392F0;">.value);</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#FFAB70;">&quot;fullname is&quot;</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">fullName</span><span style="color:#B392F0;">.value);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">imState2</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> readonly(stateRef);</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#79B8FF;">imState2</span><span style="color:#B392F0;">.value </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">stateRef</span><span style="color:#B392F0;">.value); </span><span style="color:#6B737C;">//代理有区别，一个可改一个不可改</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><p>笔试题 2：按照下面的要求完成函数</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">useUser</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 在这里补全函数</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">user</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 这是一个只读的用户对象，响应式数据，默认为一个空对象</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">setUserName</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 这是一个函数，传入用户姓名，用于修改用户的名称</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">setUserAge</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 这是一个函数，传入用户年龄，用户修改用户的年龄</span></span>
<span class="line"><span style="color:#ABB2BF;">  };</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> useUser() {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// 在这里补全函数</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    user</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#6B737C;">// 这是一个只读的用户对象，响应式数据，默认为一个空对象</span></span>
<span class="line"><span style="color:#B392F0;">    setUserName</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#6B737C;">// 这是一个函数，传入用户姓名，用于修改用户的名称</span></span>
<span class="line"><span style="color:#B392F0;">    setUserAge</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#6B737C;">// 这是一个函数，传入用户年龄，用户修改用户的年龄</span></span>
<span class="line"><span style="color:#B392F0;">  };</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>答案</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">readonly</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">reactive</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">useUser</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 在这里补全函数</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">userOrigin</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">reactive</span><span style="color:#ABB2BF;">({}); </span><span style="color:#7F848E;font-style:italic;">//原始的可以改</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">user</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">readonly</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">userOrigin</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">//只读了</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">setUserName</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">//运用reactive巧妙的避开了只读不能改</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">userOrigin</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">//通过原始来改</span></span>
<span class="line"><span style="color:#ABB2BF;">  };</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">setUserAge</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">age</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">userOrigin</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  };</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">user</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 这是一个只读的用户对象，响应式数据，默认为一个空对象</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">setUserName</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 这是一个函数，传入用户姓名，用于修改用户的名称</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 难点：只读了，咋改</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">setUserAge</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 这是一个函数，传入用户年龄，用户修改用户的年龄</span></span>
<span class="line"><span style="color:#ABB2BF;">  };</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">user</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">setUserName</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">setUserAge</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">useUser</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">user</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">setUserName</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;monica&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">setUserAge</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">18</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">user</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> { readonly</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> reactive } </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;vue&quot;</span><span style="color:#B392F0;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> useUser() {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// 在这里补全函数</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">userOrigin</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> reactive({}); </span><span style="color:#6B737C;">//原始的可以改</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">user</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> readonly(userOrigin); </span><span style="color:#6B737C;">//只读了</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> setUserName </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> (name) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">//运用reactive巧妙的避开了只读不能改</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">userOrigin</span><span style="color:#B392F0;">.name </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> name; </span><span style="color:#6B737C;">//通过原始来改</span></span>
<span class="line"><span style="color:#B392F0;">  };</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> setUserAge </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> (age) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">userOrigin</span><span style="color:#B392F0;">.age </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> age;</span></span>
<span class="line"><span style="color:#B392F0;">  };</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    user</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#6B737C;">// 这是一个只读的用户对象，响应式数据，默认为一个空对象</span></span>
<span class="line"><span style="color:#B392F0;">    setUserName</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#6B737C;">// 这是一个函数，传入用户姓名，用于修改用户的名称</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">// 难点：只读了，咋改</span></span>
<span class="line"><span style="color:#B392F0;">    setUserAge</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#6B737C;">// 这是一个函数，传入用户年龄，用户修改用户的年龄</span></span>
<span class="line"><span style="color:#B392F0;">  };</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> { </span><span style="color:#79B8FF;">user</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">setUserName</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">setUserAge</span><span style="color:#B392F0;"> } </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> useUser();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(user);</span></span>
<span class="line"><span style="color:#B392F0;">setUserName(</span><span style="color:#FFAB70;">&quot;monica&quot;</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#B392F0;">setUserAge(</span><span style="color:#F8F8F8;">18</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(user);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><p>笔试题 3：响应式防抖</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">useDebounce</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">duration</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 在这里补全函数</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 这里是一个只读对象，响应式数据，默认值为参数值</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">setValue</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 这里是一个函数，传入一个新的对象，需要把新对象中的属性混合到原始对象中，混合操作需要在duration的时间中防抖</span></span>
<span class="line"><span style="color:#ABB2BF;">  };</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> useDebounce(obj</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> duration) {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// 在这里补全函数</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    value</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#6B737C;">// 这里是一个只读对象，响应式数据，默认值为参数值</span></span>
<span class="line"><span style="color:#B392F0;">    setValue</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#6B737C;">// 这里是一个函数，传入一个新的对象，需要把新对象中的属性混合到原始对象中，混合操作需要在duration的时间中防抖</span></span>
<span class="line"><span style="color:#B392F0;">  };</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>答案</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">reactive</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">readonly</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">useDebounce</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">duration</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 在这里补全函数</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">valueOrigin</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">reactive</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">value</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">readonly</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">valueOrigin</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">timer</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">setValue</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">newValue</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">clearTimeout</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">timer</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">timer</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;值改变了&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">entries</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">newValue</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(([</span><span style="color:#E06C75;font-style:italic;">k</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">v</span><span style="color:#ABB2BF;">]) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">valueOrigin</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">k</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">v</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">      });</span></span>
<span class="line"><span style="color:#ABB2BF;">    }, </span><span style="color:#E06C75;">duration</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  };</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 这里是一个只读对象，响应式数据，默认值为参数值</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">setValue</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 这里是一个函数，传入一个新的对象，需要把新对象中的属性混合到原始对象中，混合操作需要在duration的时间中防抖</span></span>
<span class="line"><span style="color:#ABB2BF;">  };</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">value</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">setValue</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">useDebounce</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;"> }, </span><span style="color:#D19A66;">5000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">setValue</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">setValue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> { reactive</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> readonly } </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;vue&quot;</span><span style="color:#B392F0;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> useDebounce(obj</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> duration) {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// 在这里补全函数</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">valueOrigin</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> reactive(obj);</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">value</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> readonly(valueOrigin);</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">let</span><span style="color:#B392F0;"> timer </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">null</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> setValue </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> (newValue) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    clearTimeout(timer);</span></span>
<span class="line"><span style="color:#B392F0;">    timer </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> setTimeout(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#FFAB70;">&quot;值改变了&quot;</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#79B8FF;">Object</span><span style="color:#B392F0;">.entries(newValue).forEach(([k</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> v]) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">        valueOrigin[k] </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> v;</span></span>
<span class="line"><span style="color:#B392F0;">      });</span></span>
<span class="line"><span style="color:#B392F0;">    }</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> duration);</span></span>
<span class="line"><span style="color:#B392F0;">  };</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    value</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#6B737C;">// 这里是一个只读对象，响应式数据，默认值为参数值</span></span>
<span class="line"><span style="color:#B392F0;">    setValue</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#6B737C;">// 这里是一个函数，传入一个新的对象，需要把新对象中的属性混合到原始对象中，混合操作需要在duration的时间中防抖</span></span>
<span class="line"><span style="color:#B392F0;">  };</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> { </span><span style="color:#79B8FF;">value</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">setValue</span><span style="color:#B392F0;"> } </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> useDebounce({ a</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">1</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> b</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">2</span><span style="color:#B392F0;"> }</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">5000</span><span style="color:#B392F0;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">window</span><span style="color:#B392F0;">.value </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> value;</span></span>
<span class="line"><span style="color:#79B8FF;">window</span><span style="color:#B392F0;">.setValue </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> setValue;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h3 id="监听数据变化" tabindex="-1">监听数据变化 <a class="header-anchor" href="#监听数据变化" aria-hidden="true">#</a></h3><p><strong>watchEffect</strong></p><blockquote><p><strong>自动收集依赖，依赖改变时候自动收集</strong></p></blockquote><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">stop</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">watchEffect</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 该函数会立即执行，然后追中函数中用到的响应式数据，响应式数据变化后会再次执行</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 通过调用stop函数，会停止监听</span></span>
<span class="line"><span style="color:#61AFEF;">stop</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// 停止监听</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">stop</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> watchEffect(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// 该函数会立即执行，然后追中函数中用到的响应式数据，响应式数据变化后会再次执行</span></span>
<span class="line"><span style="color:#B392F0;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 通过调用stop函数，会停止监听</span></span>
<span class="line"><span style="color:#B392F0;">stop(); </span><span style="color:#6B737C;">// 停止监听</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">reactive</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">ref</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">watchEffect</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">reactive</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">count</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">ref</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">watchEffect</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">count</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">//都是响应式的</span></span>
<span class="line"><span style="color:#ABB2BF;">}); </span><span style="color:#7F848E;font-style:italic;">//watchEffect马上执行一次</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// state.b++;//不变，因为不依赖b，不运行get</span></span>
<span class="line"><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">a</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">a</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">a</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">a</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">a</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">count</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">count</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">count</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">count</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 异步的，会进入微队列，数据改变完成后才运行，所以只会运行一次 6 4</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> { reactive</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> ref</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> watchEffect } </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;vue&quot;</span><span style="color:#B392F0;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">state</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> reactive({ a</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">1</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> b</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">2</span><span style="color:#B392F0;"> });</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">count</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> ref(</span><span style="color:#F8F8F8;">0</span><span style="color:#B392F0;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">watchEffect(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#79B8FF;">state</span><span style="color:#B392F0;">.a</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">count</span><span style="color:#B392F0;">.value); </span><span style="color:#6B737C;">//都是响应式的</span></span>
<span class="line"><span style="color:#B392F0;">}); </span><span style="color:#6B737C;">//watchEffect马上执行一次</span></span>
<span class="line"><span style="color:#6B737C;">// state.b++;//不变，因为不依赖b，不运行get</span></span>
<span class="line"><span style="color:#79B8FF;">state</span><span style="color:#B392F0;">.a</span><span style="color:#F97583;">++</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#79B8FF;">state</span><span style="color:#B392F0;">.a</span><span style="color:#F97583;">++</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#79B8FF;">state</span><span style="color:#B392F0;">.a</span><span style="color:#F97583;">++</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#79B8FF;">state</span><span style="color:#B392F0;">.a</span><span style="color:#F97583;">++</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#79B8FF;">state</span><span style="color:#B392F0;">.a</span><span style="color:#F97583;">++</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#79B8FF;">count</span><span style="color:#B392F0;">.value</span><span style="color:#F97583;">++</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#79B8FF;">count</span><span style="color:#B392F0;">.value</span><span style="color:#F97583;">++</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#79B8FF;">count</span><span style="color:#B392F0;">.value</span><span style="color:#F97583;">++</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#79B8FF;">count</span><span style="color:#B392F0;">.value</span><span style="color:#F97583;">++</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#6B737C;">// 异步的，会进入微队列，数据改变完成后才运行，所以只会运行一次 6 4</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p><strong>watch</strong></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">reactive</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">ref</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">watch</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">reactive</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">count</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">ref</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// eg1</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// watch(state.a, (newValue, oldValue) =&gt; {//不会依赖，直接就把state.a读出来了</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//   console.log(&#39;new&#39;, newValue, &#39;old&#39;, oldValue)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// })</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// eg2</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// watch(() =&gt; state.a, (newValue, oldValue) =&gt; {//函数是在watch里面调用，收集依赖</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//   console.log(&#39;new&#39;, newValue, &#39;old&#39;, oldValue)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// })</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// eg3</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// watch([() =&gt; count.value], (newValue, oldValue) =&gt; {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//   console.log(&#39;new&#39;, newValue, &#39;old&#39;, oldValue)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// })</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// eg4</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// watch(count, (newValue, oldValue) =&gt; {//count可以直接这样写，因为count是对象。不能.value,如果.value就相当于给了0</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//   console.log(&#39;new&#39;, newValue, &#39;old&#39;, oldValue)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// })</span></span>
<span class="line"><span style="color:#61AFEF;">watch</span><span style="color:#ABB2BF;">([() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">], () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;变化了&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">count</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">a</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> { reactive</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> ref</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> watch } </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;vue&quot;</span><span style="color:#B392F0;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">state</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> reactive({ a</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">1</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> b</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">2</span><span style="color:#B392F0;"> });</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">count</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> ref(</span><span style="color:#F8F8F8;">0</span><span style="color:#B392F0;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// eg1</span></span>
<span class="line"><span style="color:#6B737C;">// watch(state.a, (newValue, oldValue) =&gt; {//不会依赖，直接就把state.a读出来了</span></span>
<span class="line"><span style="color:#6B737C;">//   console.log(&#39;new&#39;, newValue, &#39;old&#39;, oldValue)</span></span>
<span class="line"><span style="color:#6B737C;">// })</span></span>
<span class="line"><span style="color:#6B737C;">// eg2</span></span>
<span class="line"><span style="color:#6B737C;">// watch(() =&gt; state.a, (newValue, oldValue) =&gt; {//函数是在watch里面调用，收集依赖</span></span>
<span class="line"><span style="color:#6B737C;">//   console.log(&#39;new&#39;, newValue, &#39;old&#39;, oldValue)</span></span>
<span class="line"><span style="color:#6B737C;">// })</span></span>
<span class="line"><span style="color:#6B737C;">// eg3</span></span>
<span class="line"><span style="color:#6B737C;">// watch([() =&gt; count.value], (newValue, oldValue) =&gt; {</span></span>
<span class="line"><span style="color:#6B737C;">//   console.log(&#39;new&#39;, newValue, &#39;old&#39;, oldValue)</span></span>
<span class="line"><span style="color:#6B737C;">// })</span></span>
<span class="line"><span style="color:#6B737C;">// eg4</span></span>
<span class="line"><span style="color:#6B737C;">// watch(count, (newValue, oldValue) =&gt; {//count可以直接这样写，因为count是对象。不能.value,如果.value就相当于给了0</span></span>
<span class="line"><span style="color:#6B737C;">//   console.log(&#39;new&#39;, newValue, &#39;old&#39;, oldValue)</span></span>
<span class="line"><span style="color:#6B737C;">// })</span></span>
<span class="line"><span style="color:#B392F0;">watch([() </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">state</span><span style="color:#B392F0;">.a</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> count]</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#FFAB70;">&quot;变化了&quot;</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#B392F0;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">count</span><span style="color:#B392F0;">.value</span><span style="color:#F97583;">++</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#79B8FF;">state</span><span style="color:#B392F0;">.a</span><span style="color:#F97583;">++</span><span style="color:#B392F0;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 等效于vue2的$watch</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 不同于watchEffect  不会立即执行</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 监听单个数据的变化</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">reactive</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#61AFEF;">watch</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">  () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  (</span><span style="color:#E06C75;font-style:italic;">newValue</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">oldValue</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">options</span></span>
<span class="line"><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">countRef</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">ref</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">watch</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">countRef</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  (</span><span style="color:#E06C75;font-style:italic;">newValue</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">oldValue</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">options</span></span>
<span class="line"><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 监听多个数据的变化</span></span>
<span class="line"><span style="color:#61AFEF;">watch</span><span style="color:#ABB2BF;">([() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">countRef</span><span style="color:#ABB2BF;">], ([</span><span style="color:#E06C75;font-style:italic;">new1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">new2</span><span style="color:#ABB2BF;">], [</span><span style="color:#E06C75;font-style:italic;">old1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">old2</span><span style="color:#ABB2BF;">]) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#6B737C;">// 等效于vue2的$watch</span></span>
<span class="line"><span style="color:#6B737C;">// 不同于watchEffect  不会立即执行</span></span>
<span class="line"><span style="color:#6B737C;">// 监听单个数据的变化</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">state</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> reactive({ count</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">0</span><span style="color:#B392F0;"> });</span></span>
<span class="line"><span style="color:#B392F0;">watch(</span></span>
<span class="line"><span style="color:#B392F0;">  () </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">state</span><span style="color:#B392F0;">.count</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  (newValue</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> oldValue) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">// ...</span></span>
<span class="line"><span style="color:#B392F0;">  }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  options</span></span>
<span class="line"><span style="color:#B392F0;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">countRef</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> ref(</span><span style="color:#F8F8F8;">0</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#B392F0;">watch(</span></span>
<span class="line"><span style="color:#B392F0;">  countRef</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  (newValue</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> oldValue) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">// ...</span></span>
<span class="line"><span style="color:#B392F0;">  }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  options</span></span>
<span class="line"><span style="color:#B392F0;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 监听多个数据的变化</span></span>
<span class="line"><span style="color:#B392F0;">watch([() </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">state</span><span style="color:#B392F0;">.count</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> countRef]</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> ([new1</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> new2]</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> [old1</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> old2]) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// ...</span></span>
<span class="line"><span style="color:#B392F0;">});</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p><strong>注意：无论是</strong><code>watchEffect</code><strong>还是</strong><code>watch</code><strong>，当依赖项变化时，回调函数的运行都是异步的（微队列）</strong></p><p>应用：除非遇到下面的场景，否则均建议选择<code>watchEffect</code></p><ul><li>不希望回调函数一开始就执行</li><li>数据改变时，需要参考旧值</li><li>需要监控一些回调函数中不会用到的数据</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">reactive</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">ref</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">watch</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">reactive</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">count</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">ref</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">watch</span><span style="color:#ABB2BF;">([() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">], () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">//第二个参数：数据变化的时候运行回调函数</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;变化了&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}); </span><span style="color:#7F848E;font-style:italic;">//不同于watchEffect,一开始不允许，要加上一个配置：{immediate:true}才会直接运行</span></span>
<span class="line"><span style="color:#E5C07B;">count</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">a</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> { reactive</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> ref</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> watch } </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;vue&quot;</span><span style="color:#B392F0;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">state</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> reactive({ a</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">1</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> b</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">2</span><span style="color:#B392F0;"> });</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">count</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> ref(</span><span style="color:#F8F8F8;">0</span><span style="color:#B392F0;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">watch([() </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">state</span><span style="color:#B392F0;">.a</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> count]</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">//第二个参数：数据变化的时候运行回调函数</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#FFAB70;">&quot;变化了&quot;</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#B392F0;">}); </span><span style="color:#6B737C;">//不同于watchEffect,一开始不允许，要加上一个配置：{immediate:true}才会直接运行</span></span>
<span class="line"><span style="color:#79B8FF;">count</span><span style="color:#B392F0;">.value</span><span style="color:#F97583;">++</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#79B8FF;">state</span><span style="color:#B392F0;">.a</span><span style="color:#F97583;">++</span><span style="color:#B392F0;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>笔试题: 下面的代码输出结果是什么？</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">reactive</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">watchEffect</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">watch</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">reactive</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#61AFEF;">watchEffect</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">//立即执行</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;watchEffect&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">//自动收集依赖</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#61AFEF;">watch</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">//不会立即执行</span></span>
<span class="line"><span style="color:#ABB2BF;">  () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">//手动告诉他收集的依赖是state.count</span></span>
<span class="line"><span style="color:#ABB2BF;">  (</span><span style="color:#E06C75;font-style:italic;">count</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">oldCount</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;watch&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">oldCount</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;start&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">//宏队列</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;time out&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">//这次为准</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">//这两个++导致了watchEffect，watch检测到了变化，进入了微队列</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;end&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> { reactive</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> watchEffect</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> watch } </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;vue&quot;</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">state</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> reactive({</span></span>
<span class="line"><span style="color:#B392F0;">  count</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">0</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">});</span></span>
<span class="line"><span style="color:#B392F0;">watchEffect(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">//立即执行</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#FFAB70;">&quot;watchEffect&quot;</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">state</span><span style="color:#B392F0;">.count); </span><span style="color:#6B737C;">//自动收集依赖</span></span>
<span class="line"><span style="color:#B392F0;">});</span></span>
<span class="line"><span style="color:#B392F0;">watch(</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">//不会立即执行</span></span>
<span class="line"><span style="color:#B392F0;">  () </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">state</span><span style="color:#B392F0;">.count</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#6B737C;">//手动告诉他收集的依赖是state.count</span></span>
<span class="line"><span style="color:#B392F0;">  (count</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> oldCount) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#FFAB70;">&quot;watch&quot;</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> count</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> oldCount);</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#FFAB70;">&quot;start&quot;</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#B392F0;">setTimeout(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">//宏队列</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#FFAB70;">&quot;time out&quot;</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">state</span><span style="color:#B392F0;">.count</span><span style="color:#F97583;">++</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">state</span><span style="color:#B392F0;">.count</span><span style="color:#F97583;">++</span><span style="color:#B392F0;">; </span><span style="color:#6B737C;">//这次为准</span></span>
<span class="line"><span style="color:#B392F0;">});</span></span>
<span class="line"><span style="color:#79B8FF;">state</span><span style="color:#B392F0;">.count</span><span style="color:#F97583;">++</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#79B8FF;">state</span><span style="color:#B392F0;">.count</span><span style="color:#F97583;">++</span><span style="color:#B392F0;">; </span><span style="color:#6B737C;">//这两个++导致了watchEffect，watch检测到了变化，进入了微队列</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#FFAB70;">&quot;end&quot;</span><span style="color:#B392F0;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p><img src="`+F+`" alt=""></p><h3 id="判断" tabindex="-1">判断 <a class="header-anchor" href="#判断" aria-hidden="true">#</a></h3><table><thead><tr><th>API</th><th>含义</th></tr></thead><tbody><tr><td><code>isProxy</code></td><td>判断某个数据是否是由<code>reactive</code>或<code>readonly</code></td></tr><tr><td><code>isReactive</code></td><td>判断某个数据是否是通过<code>reactive</code>创建的.详细:<a href="https://v3.vuejs.org/api/basic-reactivity.html#isreactive" target="_blank" rel="noreferrer">https://v3.vuejs.org/api/basic-reactivity.html#isreactive</a></td></tr><tr><td><code>isReadonly</code></td><td>判断某个数据是否是通过<code>readonly</code>创建的</td></tr><tr><td><code>isRef</code></td><td>判断某个数据是否是一个<code>ref</code>对象</td></tr></tbody></table><h3 id="转换" tabindex="-1">转换 <a class="header-anchor" href="#转换" aria-hidden="true">#</a></h3><p><strong>unref</strong> 等同于：<code>isRef(val) ? val.value : val</code> 应用：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">useNewTodo</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">todos</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">todos</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">unref</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">todos</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> useNewTodo(todos) {</span></span>
<span class="line"><span style="color:#B392F0;">  todos </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> unref(todos);</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// ...</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><strong>toRef</strong> 得到一个响应式对象某个属性的 ref 格式</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">reactive</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">foo</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">bar</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">fooRef</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">toRef</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;foo&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// fooRef: {value: ...}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">fooRef</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">foo</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">foo</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">fooRef</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 3</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">state</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> reactive({</span></span>
<span class="line"><span style="color:#B392F0;">  foo</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">1</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  bar</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">2</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">fooRef</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> toRef(state</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;foo&quot;</span><span style="color:#B392F0;">); </span><span style="color:#6B737C;">// fooRef: {value: ...}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">fooRef</span><span style="color:#B392F0;">.value</span><span style="color:#F97583;">++</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#79B8FF;">state</span><span style="color:#B392F0;">.foo); </span><span style="color:#6B737C;">// 2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">state</span><span style="color:#B392F0;">.foo</span><span style="color:#F97583;">++</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#79B8FF;">fooRef</span><span style="color:#B392F0;">.value); </span><span style="color:#6B737C;">// 3</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p><strong>toRefs</strong> 把一个响应式对象的所有属性转换为 ref 格式，然后包装到一个<code>plain-object</code>中返回</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">reactive</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">foo</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">bar</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">stateAsRefs</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">toRefs</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">stateAsRefs: not a proxy</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  foo: { value: ... },</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  bar: { value: ... }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*/</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">state</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> reactive({</span></span>
<span class="line"><span style="color:#B392F0;">  foo</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">1</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  bar</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">2</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">stateAsRefs</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> toRefs(state);</span></span>
<span class="line"><span style="color:#6B737C;">/*</span></span>
<span class="line"><span style="color:#6B737C;">stateAsRefs: not a proxy</span></span>
<span class="line"><span style="color:#6B737C;">{</span></span>
<span class="line"><span style="color:#6B737C;">  foo: { value: ... },</span></span>
<span class="line"><span style="color:#6B737C;">  bar: { value: ... }</span></span>
<span class="line"><span style="color:#6B737C;">}</span></span>
<span class="line"><span style="color:#6B737C;">*/</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>应用：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#61AFEF;">setup</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">state1</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">reactive</span><span style="color:#ABB2BF;">({</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">state2</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">reactive</span><span style="color:#ABB2BF;">({</span><span style="color:#E06C75;">c</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">d</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    ...</span><span style="color:#E06C75;">state1</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// lost reactivity 展开剂运算符让他失去了响应式</span></span>
<span class="line"><span style="color:#ABB2BF;">    ...</span><span style="color:#E06C75;">state2</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// lost reactivity</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">setup</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">state1</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">reactive</span><span style="color:#ABB2BF;">({</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">state2</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">reactive</span><span style="color:#ABB2BF;">({</span><span style="color:#E06C75;">c</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">d</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    ...</span><span style="color:#61AFEF;">toRefs</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">state1</span><span style="color:#ABB2BF;">), </span><span style="color:#7F848E;font-style:italic;">// reactivity</span></span>
<span class="line"><span style="color:#ABB2BF;">    ...</span><span style="color:#61AFEF;">toRefs</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">state2</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// reactivity</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// composition function</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">usePos</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">pos</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">reactive</span><span style="color:#ABB2BF;">({</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">pos</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">setup</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> {</span><span style="color:#E5C07B;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">y</span><span style="color:#ABB2BF;">} </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">usePos</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// lost reactivity</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> {</span><span style="color:#E5C07B;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">y</span><span style="color:#ABB2BF;">} </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">toRefs</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">usePos</span><span style="color:#ABB2BF;">()); </span><span style="color:#7F848E;font-style:italic;">// reactivity</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#B392F0;">setup(){</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">state1</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> reactive({a</span><span style="color:#F97583;">:</span><span style="color:#F8F8F8;">1</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> b</span><span style="color:#F97583;">:</span><span style="color:#F8F8F8;">2</span><span style="color:#B392F0;">});</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">state2</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> reactive({c</span><span style="color:#F97583;">:</span><span style="color:#F8F8F8;">3</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> d</span><span style="color:#F97583;">:</span><span style="color:#F8F8F8;">4</span><span style="color:#B392F0;">});</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">...</span><span style="color:#B392F0;">state1</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#6B737C;">// lost reactivity 展开剂运算符让他失去了响应式</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">...</span><span style="color:#B392F0;">state2 </span><span style="color:#6B737C;">// lost reactivity</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">setup(){</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">state1</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> reactive({a</span><span style="color:#F97583;">:</span><span style="color:#F8F8F8;">1</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> b</span><span style="color:#F97583;">:</span><span style="color:#F8F8F8;">2</span><span style="color:#B392F0;">});</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">state2</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> reactive({c</span><span style="color:#F97583;">:</span><span style="color:#F8F8F8;">3</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> d</span><span style="color:#F97583;">:</span><span style="color:#F8F8F8;">4</span><span style="color:#B392F0;">});</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">...</span><span style="color:#B392F0;">toRefs(state1)</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#6B737C;">// reactivity</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">...</span><span style="color:#B392F0;">toRefs(state2) </span><span style="color:#6B737C;">// reactivity</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"><span style="color:#6B737C;">// composition function</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> usePos(){</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">pos</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> reactive({x</span><span style="color:#F97583;">:</span><span style="color:#F8F8F8;">0</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> y</span><span style="color:#F97583;">:</span><span style="color:#F8F8F8;">0</span><span style="color:#B392F0;">});</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> pos;</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">setup(){</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> {</span><span style="color:#79B8FF;">x</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">y</span><span style="color:#B392F0;">} </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> usePos(); </span><span style="color:#6B737C;">// lost reactivity</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> {</span><span style="color:#79B8FF;">x</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">y</span><span style="color:#B392F0;">} </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> toRefs(usePos()); </span><span style="color:#6B737C;">// reactivity</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h3 id="降低心智负担" tabindex="-1">降低心智负担 <a class="header-anchor" href="#降低心智负担" aria-hidden="true">#</a></h3><p>所有的<code>composition function</code>均以<code>ref</code>的结果返回，以保证<code>setup</code>函数的返回结果中不包含<code>reactive</code>或<code>readonly</code>直接产生的数据</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">usePos</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">pos</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">reactive</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">toRefs</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">pos</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">//  {x: refObj, y: refObj}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">useBooks</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">books</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">ref</span><span style="color:#ABB2BF;">([]);</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">books</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// books is refObj</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">useLoginUser</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">user</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">readonly</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">isLogin</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">loginId</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">null</span></span>
<span class="line"><span style="color:#ABB2BF;">  });</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">toRefs</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">user</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// { isLogin: refObj, loginId: refObj }  all ref is readonly</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">setup</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 在setup函数中，尽量保证解构、展开出来的所有响应式数据均是ref</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    ...</span><span style="color:#61AFEF;">usePos</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#ABB2BF;">    ...</span><span style="color:#61AFEF;">useBooks</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#ABB2BF;">    ...</span><span style="color:#61AFEF;">useLoginUser</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> usePos(){</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">pos</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> reactive({ x</span><span style="color:#F97583;">:</span><span style="color:#F8F8F8;">0</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> y</span><span style="color:#F97583;">:</span><span style="color:#F8F8F8;">0</span><span style="color:#B392F0;"> });</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> toRefs(pos); </span><span style="color:#6B737C;">//  {x: refObj, y: refObj}</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> useBooks(){</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">books</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> ref([]);</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    books </span><span style="color:#6B737C;">// books is refObj</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> useLoginUser(){</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">user</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> readonly({</span></span>
<span class="line"><span style="color:#B392F0;">    isLogin</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">false</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    loginId</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">null</span></span>
<span class="line"><span style="color:#B392F0;">  });</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> toRefs(user); </span><span style="color:#6B737C;">// { isLogin: refObj, loginId: refObj }  all ref is readonly</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">setup(){</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// 在setup函数中，尽量保证解构、展开出来的所有响应式数据均是ref</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">...</span><span style="color:#B392F0;">usePos()</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">...</span><span style="color:#B392F0;">useBooks()</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">...</span><span style="color:#B392F0;">useLoginUser()</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div>`,102)]))}const f=n(i,[["render",u]]);export{v as __pageData,f as default};
