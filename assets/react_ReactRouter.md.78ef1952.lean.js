import{_ as n,o as a,c as l,a as p}from"./app.f9cf8683.js";const F=JSON.parse('{"title":"ReactRouter","description":"","frontmatter":{},"headers":[{"level":2,"title":"站点","slug":"站点","link":"#站点","children":[]},{"level":2,"title":"React Router","slug":"react-router","link":"#react-router","children":[]},{"level":2,"title":"Hash Router 哈希路由","slug":"hash-router-哈希路由","link":"#hash-router-哈希路由","children":[]},{"level":2,"title":"Borswer History Router 浏览器历史记录路由","slug":"borswer-history-router-浏览器历史记录路由","link":"#borswer-history-router-浏览器历史记录路由","children":[]},{"level":2,"title":"Router 组件","slug":"router-组件","link":"#router-组件","children":[]},{"level":2,"title":"Route 组件","slug":"route-组件","link":"#route-组件","children":[]},{"level":2,"title":"Switch 组件","slug":"switch-组件","link":"#switch-组件","children":[]},{"level":2,"title":"history","slug":"history","link":"#history","children":[]},{"level":2,"title":"location","slug":"location","link":"#location","children":[]},{"level":2,"title":"match","slug":"match","link":"#match","children":[]},{"level":2,"title":"非路由组件获取路由信息","slug":"非路由组件获取路由信息","link":"#非路由组件获取路由信息","children":[]},{"level":2,"title":"Link","slug":"link","link":"#link","children":[]},{"level":2,"title":"NavLink","slug":"navlink","link":"#navlink","children":[]},{"level":2,"title":"Redirect","slug":"redirect","link":"#redirect","children":[]},{"level":2,"title":"高阶组件","slug":"高阶组件","link":"#高阶组件","children":[]},{"level":2,"title":"使用 useEffect","slug":"使用-useeffect","link":"#使用-useeffect","children":[]},{"level":2,"title":"使用自定义的导航守卫","slug":"使用自定义的导航守卫","link":"#使用自定义的导航守卫","children":[{"level":3,"title":"React-Router 的实现原理是什么？","slug":"react-router-的实现原理是什么","link":"#react-router-的实现原理是什么","children":[]},{"level":3,"title":"如何配置 React-Router 实现路由切换","slug":"如何配置-react-router-实现路由切换","link":"#如何配置-react-router-实现路由切换","children":[]},{"level":3,"title":"React-Router 怎么设置重定向？","slug":"react-router-怎么设置重定向","link":"#react-router-怎么设置重定向","children":[]},{"level":3,"title":"react-router 里的 Link 标签和 a 标签的区别","slug":"react-router-里的-link-标签和-a-标签的区别","link":"#react-router-里的-link-标签和-a-标签的区别","children":[]},{"level":3,"title":"React-Router 如何获取 URL 的参数和历史对象？","slug":"react-router-如何获取-url-的参数和历史对象","link":"#react-router-如何获取-url-的参数和历史对象","children":[]},{"level":3,"title":"React-Router 4 怎样在路由变化时重新渲染同一个组件？","slug":"react-router-4-怎样在路由变化时重新渲染同一个组件","link":"#react-router-4-怎样在路由变化时重新渲染同一个组件","children":[]},{"level":3,"title":"React-Router 的路由有几种模式？","slug":"react-router-的路由有几种模式","link":"#react-router-的路由有几种模式","children":[]},{"level":3,"title":"React-Router 4 的 Switch 有什么用？","slug":"react-router-4-的-switch-有什么用","link":"#react-router-4-的-switch-有什么用","children":[]}]},{"level":2,"title":"Redux","slug":"redux","link":"#redux","children":[{"level":3,"title":"对 Redux 的理解，主要解决什么问题","slug":"对-redux-的理解-主要解决什么问题","link":"#对-redux-的理解-主要解决什么问题","children":[]},{"level":3,"title":"Redux 原理及工作流程","slug":"redux-原理及工作流程","link":"#redux-原理及工作流程","children":[]},{"level":3,"title":"Redux 中异步的请求怎么处理","slug":"redux-中异步的请求怎么处理","link":"#redux-中异步的请求怎么处理","children":[]},{"level":3,"title":"Redux 怎么实现属性传递，介绍下原理","slug":"redux-怎么实现属性传递-介绍下原理","link":"#redux-怎么实现属性传递-介绍下原理","children":[]},{"level":3,"title":"Redux 中间件是什么？接受几个参数？柯里化函数两端的参数具体是什么？","slug":"redux-中间件是什么-接受几个参数-柯里化函数两端的参数具体是什么","link":"#redux-中间件是什么-接受几个参数-柯里化函数两端的参数具体是什么","children":[]},{"level":3,"title":"Redux 请求中间件如何处理并发","slug":"redux-请求中间件如何处理并发","link":"#redux-请求中间件如何处理并发","children":[]},{"level":3,"title":"Redux 状态管理器和变量挂载到 window 中有什么区别","slug":"redux-状态管理器和变量挂载到-window-中有什么区别","link":"#redux-状态管理器和变量挂载到-window-中有什么区别","children":[]},{"level":3,"title":"mobox 和 redux 有什么区别？","slug":"mobox-和-redux-有什么区别","link":"#mobox-和-redux-有什么区别","children":[]},{"level":3,"title":"Redux 和 Vuex 有什么区别，它们的共同思想","slug":"redux-和-vuex-有什么区别-它们的共同思想","link":"#redux-和-vuex-有什么区别-它们的共同思想","children":[]},{"level":3,"title":"Redux 中间件是怎么拿到 store 和 action? 然后怎么处理?","slug":"redux-中间件是怎么拿到-store-和-action-然后怎么处理","link":"#redux-中间件是怎么拿到-store-和-action-然后怎么处理","children":[]},{"level":3,"title":"Redux 中的 connect 有什么作用","slug":"redux-中的-connect-有什么作用","link":"#redux-中的-connect-有什么作用","children":[]}]}],"relativePath":"react/ReactRouter.md","lastUpdated":1740908463000}'),o={name:"react/ReactRouter.md"};function e(t,s,r,c,B,i){return a(),l("div",null,s[0]||(s[0]=[p(`<h1 id="reactrouter" tabindex="-1">ReactRouter <a class="header-anchor" href="#reactrouter" aria-hidden="true">#</a></h1><h1 id="react-router-概述" tabindex="-1">React Router 概述 <a class="header-anchor" href="#react-router-概述" aria-hidden="true">#</a></h1><h2 id="站点" tabindex="-1">站点 <a class="header-anchor" href="#站点" aria-hidden="true">#</a></h2><p>无论是使用 Vue，还是 React，开发的单页应用程序，可能只是该站点的一部分（某一个功能块） 一个单页应用里，可能会划分为多个页面（几乎完全不同的页面效果）（组件）</p><p>如果要在单页应用中完成组件的切换，需要实现下面两个功能：</p><ol><li>根据不同的页面地址，展示不同的组件（核心）</li><li>完成无刷新的地址切换</li></ol><p>我们把实现了以上两个功能的插件，称之为路由</p><h2 id="react-router" tabindex="-1">React Router <a class="header-anchor" href="#react-router" aria-hidden="true">#</a></h2><ol><li>react-router：路由核心库，包含诸多和路由功能相关的核心代码</li><li>react-router-dom：利用路由核心库，结合实际的页面，实现跟页面路由密切相关的功能</li></ol><p>如果是在页面中实现路由，需要安装 react-router-dom 库</p><h1 id="两种模式" tabindex="-1">两种模式 <a class="header-anchor" href="#两种模式" aria-hidden="true">#</a></h1><p>路由：根据不同的页面地址，展示不同的组件</p><p>url 地址组成</p><p>例：<a href="https://www.react.com:443/news/1-2-1.html?a=1&amp;b=2#abcdefg" target="_blank" rel="noreferrer">https://www.react.com:443/news/1-2-1.html?a=1&amp;b=2#abcdefg</a></p><ol><li>协议名(schema)：https</li><li>主机名(host)：<a href="http://www.react.com" target="_blank" rel="noreferrer">www.react.com</a><ol><li>ip 地址</li><li>预设值：localhost</li><li>域名</li><li>局域网中电脑名称</li></ol></li><li>端口号(port)：443 <ol><li>如果协议是 http，端口号是 80，则可以省略端口号</li><li>如果协议是 https，端口号是 443，则可以省略端口号</li></ol></li><li>路径(path)：/news/1-2-1.html</li><li>地址参数(search、query)：?a=1&amp;b=2 <ol><li>附带的数据</li><li>格式：属性名=属性值&amp;属性名=属性值....</li></ol></li><li>哈希(hash、锚点) <ol><li>附带的数据</li></ol></li></ol><h2 id="hash-router-哈希路由" tabindex="-1">Hash Router 哈希路由 <a class="header-anchor" href="#hash-router-哈希路由" aria-hidden="true">#</a></h2><p>根据 url 地址中的哈希值来确定显示的组件</p><blockquote><p>原因：hash 的变化，不会导致页面刷新 这种模式的兼容性最好</p></blockquote><h2 id="borswer-history-router-浏览器历史记录路由" tabindex="-1">Borswer History Router 浏览器历史记录路由 <a class="header-anchor" href="#borswer-history-router-浏览器历史记录路由" aria-hidden="true">#</a></h2><p>之前存在的 api：history.forward(), history.back(), history.go() HTML5 出现后，新增了 History Api，从此以后，浏览器拥有了改变路径而不刷新页面的方式</p><p>History 表示浏览器的历史记录，它使用栈的方式存储。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/758572/1630852761503-b41ea24f-31bd-4df7-88c8-ff9269ebcc03.png#averageHue=%23fbe8dc&amp;clientId=u93429593-fec4-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=253&amp;id=u0b49fa97&amp;name=image.png&amp;originHeight=506&amp;originWidth=501&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=31240&amp;status=error&amp;style=none&amp;taskId=u3686e2b0-28c3-4cc6-b585-cbd613c5966&amp;title=&amp;width=250.5" alt="image.png"></p><ol><li>history.length：获取栈中数据量</li><li>history.pushState：向当前历史记录栈中加入一条新的记录 <ol><li>参数 1：附加的数据，自定义的数据，可以是任何类型</li><li>参数 2：页面标题，目前大部分浏览器不支持</li><li>参数 3：新的地址</li></ol></li><li>history.replaceState：将当前指针指向的历史记录，替换为某个记录 <ol><li>参数 1：附加的数据，自定义的数据，可以是任何类型</li><li>参数 2：页面标题，目前大部分浏览器不支持</li><li>参数 3：新的地址</li></ol></li></ol><p>根据页面的路径决定渲染哪个组件，不是根据哈希了</p><h1 id="路由组件" tabindex="-1">路由组件 <a class="header-anchor" href="#路由组件" aria-hidden="true">#</a></h1><p>React-Router 为我们提供了两个重要组件</p><h2 id="router-组件" tabindex="-1">Router 组件 <a class="header-anchor" href="#router-组件" aria-hidden="true">#</a></h2><p>它本身不做任何展示，仅提供路由模式配置，另外，该组件会产生一个上下文，上下文中会提供一些实用的对象和方法，供其他相关组件使用</p><ol><li>HashRouter：该组件，使用 hash 模式匹配</li><li>BrowserRouter：该组件，使用 BrowserHistory 模式匹配</li></ol><p>通常情况下，Router 组件只有一个，将该组件包裹整个页面</p><h2 id="route-组件" tabindex="-1">Route 组件 <a class="header-anchor" href="#route-组件" aria-hidden="true">#</a></h2><p>根据不同的地址，展示不同的组件</p><p>重要属性：</p><ol><li>path：匹配的路径 <ol><li>默认情况下，不区分大小写，可以设置 sensitive 属性为 true，来区分大小写</li><li>默认情况下，只匹配初始目录，如果要精确匹配，配置 exact 属性为 true</li><li>如果不写 path，则会匹配任意路径</li></ol></li><li>component：匹配成功后要显示的组件</li><li>children： <ol><li>传递 React 元素，无论是否匹配，一定会显示 children，并且会忽略 component 属性</li><li>传递一个函数，该函数有多个参数，这些参数来自于上下文，该函数返回 react 元素，则一定会显示返回的元素，并且忽略 component 属性.</li></ol></li></ol><p>Route 组件可以写到任意的地方，只要保证它是 Router 组件的后代元素</p><h2 id="switch-组件" tabindex="-1">Switch 组件 <a class="header-anchor" href="#switch-组件" aria-hidden="true">#</a></h2><p>写到 Switch 组件中的 Route 组件，当匹配到第一个 Route 后，会立即停止匹配</p><p>由于 Switch 组件会循环所有子元素，然后让每个子元素去完成匹配，若匹配到，则渲染对应的组件，然后停止循环。因此，不能在 Switch 的子元素中使用除 Route 外的其他组件。</p><h1 id="路由信息" tabindex="-1">路由信息 <a class="header-anchor" href="#路由信息" aria-hidden="true">#</a></h1><p>Router 组件会创建一个上下文，并且，向上下文中注入一些信息</p><p>该上下文对开发者是隐藏的，Route 组件若匹配到了地址，则会将这些上下文中的信息作为属性传入对应的组件</p><h2 id="history" tabindex="-1">history <a class="header-anchor" href="#history" aria-hidden="true">#</a></h2><p>它并不是 window.history 对象，我们利用该对象无刷新跳转地址</p><p><strong>为什么没有直接使用 history 对象</strong></p><ol><li>React-Router 中有两种模式：Hash、History，如果直接使用 window.history，只能支持一种模式。为了适配两种模式</li><li>当使用 windows.history.pushState 方法时，没有办法收到任何通知，将导致 React 无法知晓地址发生了变化，结果导致无法重新渲染组件</li></ol><ul><li>push：将某个新的地址入栈（历史记录栈） <ul><li>参数 1：新的地址</li><li>参数 2：可选，附带的状态数据</li></ul></li><li>replace：将某个新的地址替换掉当前栈中的地址</li><li>go: 与 window.history 一致</li><li>forward: 与 window.history 一致</li><li>back: 与 window.history 一致</li></ul><h2 id="location" tabindex="-1">location <a class="header-anchor" href="#location" aria-hidden="true">#</a></h2><p>与 history.location 完全一致，是同一个对象，但是，与 window.location 不同</p><p>location 对象中记录了当前地址的相关信息</p><p>我们通常使用第三方库<code>query-string</code>，用于解析地址栏中的数据</p><h2 id="match" tabindex="-1">match <a class="header-anchor" href="#match" aria-hidden="true">#</a></h2><p>该对象中保存了，路由匹配的相关信息</p><ul><li>isExact：事实上，当前的路径和路由配置的路径是否是精确匹配的。和 exact 写没写无关</li><li>params：获取路径规则中对应的数据</li></ul><p>实际上，在书写 Route 组件的 path 属性时，可以书写一个<code>string pattern</code>（字符串正则）</p><p>react-router 使用了第三方库：Path-to-RegExp，该库的作用是，将一个字符串正则转换成一个真正的正则表达式。</p><p><strong>向某个页面传递数据的方式：</strong></p><ol><li>使用 state：在 push 页面时，加入 state</li><li><strong>利用 search：把数据填写到地址栏中的？后</strong></li><li>利用 hash：把数据填写到 hash 后</li><li><strong>params：把数据填写到路径中</strong></li></ol><h2 id="非路由组件获取路由信息" tabindex="-1">非路由组件获取路由信息 <a class="header-anchor" href="#非路由组件获取路由信息" aria-hidden="true">#</a></h2><p>某些组件，并没有直接放到 Route 中，而是嵌套在其他普通组件中，因此，它的 props 中没有路由信息，如果这些组件需要获取到路由信息，可以使用下面两种方式：</p><ol><li>将路由信息从父组件一层一层传递到子组件</li><li>使用 react-router 提供的高阶组件 withRouter，包装要使用的组件，该高阶组件会返回一个新组件，新组件将向提供的组件注入路由信息。</li></ol><h1 id="其他组件" tabindex="-1">其他组件 <a class="header-anchor" href="#其他组件" aria-hidden="true">#</a></h1><p>已学习：</p><ul><li>Router：BrowswerRouter、HashRouter</li><li>Route</li><li>Switch</li><li>高阶函数：withRouter</li></ul><h2 id="link" tabindex="-1">Link <a class="header-anchor" href="#link" aria-hidden="true">#</a></h2><p>生成一个无刷新跳转的 a 元素</p><ul><li>to <ul><li>字符串：跳转的目标地址</li><li>对象： <ul><li>pathname：url 路径</li><li>search</li><li>hash</li><li>state：附加的状态信息</li></ul></li></ul></li><li>replace：bool，表示是否是替换当前地址，默认是 false，是 push 跳转</li><li>innerRef：可以将内部的 a 元素的 ref 附着在传递的对象或函数参数上 <ul><li>函数</li><li>ref 对象</li></ul></li></ul><h2 id="navlink" tabindex="-1">NavLink <a class="header-anchor" href="#navlink" aria-hidden="true">#</a></h2><p>是一种特殊的 Link，Link 组件具备的功能，它都有</p><p>它具备的额外功能是：根据当前地址和链接地址，来决定该链接的样式</p><ul><li>activeClassName: 匹配时使用的类名</li><li>activeStyle: 匹配时使用的内联样式</li><li>exact: 是否精确匹配</li><li>sensitive：匹配时是否区分大小写</li><li>strict：是否严格匹配最后一个斜杠</li></ul><h2 id="redirect" tabindex="-1">Redirect <a class="header-anchor" href="#redirect" aria-hidden="true">#</a></h2><p>重定向组件，当加载到该组件时，会自动跳转（无刷新）到另外一个地址</p><ul><li>to：跳转的地址 <ul><li>字符串</li><li>对象</li></ul></li><li>push: 默认为 false，表示跳转使用替换的方式，设置为 true 后，则使用 push 的方式跳转</li><li>from：当匹配到 from 地址规则时才进行跳转</li><li>exact: 是否精确匹配 from</li><li>sensitive：from 匹配时是否区分大小写</li><li>strict：from 是否严格匹配最后一个斜杠</li></ul><blockquote><p>vue-router 和 React router</p></blockquote><p>vue-router 是一个静态的配置 react-router v4 之前 静态的配置 现在 react-router 是动态的组件，灵活了</p><h1 id="嵌套路由" tabindex="-1">嵌套路由 <a class="header-anchor" href="#嵌套路由" aria-hidden="true">#</a></h1><h1 id="导航守卫" tabindex="-1">导航守卫 <a class="header-anchor" href="#导航守卫" aria-hidden="true">#</a></h1><p>导航守卫：当离开一个页面，进入另一个页面时，触发的事件</p><p>history 对象</p><ul><li>listen: 添加一个监听器，监听地址的变化，当地址发生变化时，会调用传递的函数 <ul><li>参数：函数，运行时间点：发生在即将跳转到新页面时 <ul><li>参数 1：location 对象，记录当前的地址信息</li><li>参数 2：action，一个字符串，表示进入该地址的方式 <ul><li>POP：出栈 （指针移动） <ul><li>通过点击浏览器后退、前进</li><li>调用 history.go</li><li>调用 history.goBack</li><li>调用 history.goForward</li></ul></li><li>PUSH：入栈 （指针移动） <ul><li>history.push</li></ul></li><li>REPLACE：替换 <ul><li>history.replace</li></ul></li></ul></li></ul></li><li>返回结果：函数，可以调用该函数取消监听</li></ul></li><li>block：设置一个阻塞，并同时设置阻塞消息，当页面发生跳转时，会进入阻塞，并将阻塞消息传递到路由根组件的 getUserConfirmation 方法。 <ul><li>返回一个回调函数，用于取消阻塞器</li></ul></li></ul><p>路由根组件</p><ul><li>getUserConfirmation <ul><li>参数：函数 <ul><li>参数 1：阻塞消息 <ul><li>字符串消息</li><li>函数，函数的返回结果是一个字符串，用于表示阻塞消息 <ul><li>参数 1：location 对象</li><li>参数 2：action 值</li></ul></li></ul></li><li>参数 2：回调函数，调用该函数并传递 true，则表示进入到新页面，否则，不做任何操作</li></ul></li></ul></li></ul><h1 id="常见应用-路由切换动画" tabindex="-1">常见应用 - 路由切换动画 <a class="header-anchor" href="#常见应用-路由切换动画" aria-hidden="true">#</a></h1><p>第三方动画库：react-transition-group</p><p>CSSTransition：用于为内部的 DOM 元素添加类样式，通过 in 属性决定内部的 DOM 处于退出还是进入阶段。</p><h1 id="滚动条复位" tabindex="-1">滚动条复位 <a class="header-anchor" href="#滚动条复位" aria-hidden="true">#</a></h1><h2 id="高阶组件" tabindex="-1">高阶组件 <a class="header-anchor" href="#高阶组件" aria-hidden="true">#</a></h2><h2 id="使用-useeffect" tabindex="-1">使用 useEffect <a class="header-anchor" href="#使用-useeffect" aria-hidden="true">#</a></h2><h2 id="使用自定义的导航守卫" tabindex="-1">使用自定义的导航守卫 <a class="header-anchor" href="#使用自定义的导航守卫" aria-hidden="true">#</a></h2><h1 id="路由" tabindex="-1">路由 <a class="header-anchor" href="#路由" aria-hidden="true">#</a></h1><h3 id="react-router-的实现原理是什么" tabindex="-1">React-Router 的实现原理是什么？ <a class="header-anchor" href="#react-router-的实现原理是什么" aria-hidden="true">#</a></h3><p>客户端路由实现的思想：</p><ul><li>基于 hash 的路由：通过监听 事件，感知 hash 的变化 <code>hashchange</code><ul><li>改变 hash 可以直接通过 location.hash=xxx</li></ul></li><li>基于 H5 history 路由： <ul><li>改变 url 可以通过 history.pushState 和 resplaceState 等，会将 URL 压入堆栈，同时能够应用 <code>history.go()</code> 等 API</li><li>监听 url 的变化可以通过自定义事件触发实现</li></ul></li></ul><p><strong>react-router 实现的思想：</strong></p><ul><li>基于 <code>history</code> 库来实现上述不同的客户端路由实现思想，并且能够保存历史记录等，磨平浏览器差异，上层无感知</li><li>通过维护的列表，在每次 URL 发生变化的回收，通过配置的 路由路径，匹配到对应的 Component，并且 render</li></ul><h3 id="如何配置-react-router-实现路由切换" tabindex="-1">如何配置 React-Router 实现路由切换 <a class="header-anchor" href="#如何配置-react-router-实现路由切换" aria-hidden="true">#</a></h3><p><strong>（1）使用</strong><code>&lt;Route&gt;</code> 组件</p><p>路由匹配是通过比较 <code>&lt;Route&gt;</code> 的 path 属性和当前地址的 pathname 来实现的。当一个 <code>&lt;Route&gt;</code> 匹配成功时，它将渲染其内容，当它不匹配时就会渲染 null。没有路径的 <code>&lt;Route&gt;</code> 将始终被匹配。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// when location = { pathname: &#39;/about&#39; }</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Route</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">path</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&#39;/about&#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">component</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">About</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">/&gt; </span><span style="color:#7F848E;font-style:italic;">// renders &lt;About/&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Route</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">path</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&#39;/contact&#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">component</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">Contact</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">/&gt; </span><span style="color:#7F848E;font-style:italic;">// renders null</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Route</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">component</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">Always</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">/&gt; </span><span style="color:#7F848E;font-style:italic;">// renders &lt;Always/&gt;</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#6B737C;">// when location = { pathname: &#39;/about&#39; }</span></span>
<span class="line"><span style="color:#B392F0;">&lt;</span><span style="color:#79B8FF;">Route</span><span style="color:#B392F0;"> path</span><span style="color:#F97583;">=</span><span style="color:#FFAB70;">&#39;/about&#39;</span><span style="color:#B392F0;"> component</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">{About}/&gt; </span><span style="color:#6B737C;">// renders &lt;About/&gt;</span></span>
<span class="line"><span style="color:#B392F0;">&lt;</span><span style="color:#79B8FF;">Route</span><span style="color:#B392F0;"> path</span><span style="color:#F97583;">=</span><span style="color:#FFAB70;">&#39;/contact&#39;</span><span style="color:#B392F0;"> component</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">{Contact}/&gt; </span><span style="color:#6B737C;">// renders null</span></span>
<span class="line"><span style="color:#B392F0;">&lt;</span><span style="color:#79B8FF;">Route</span><span style="color:#B392F0;"> component</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">{Always}/&gt; </span><span style="color:#6B737C;">// renders &lt;Always/&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>（2）Switch 和 Route</p><p><code>&lt;Switch&gt;</code> 用于将 <code>&lt;Route&gt;</code> 分组。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Switch</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E5C07B;">Route</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">exact</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">path</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;/&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">component</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">Home</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E5C07B;">Route</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">path</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;/about&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">component</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">About</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E5C07B;">Route</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">path</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;/contact&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">component</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">Contact</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E5C07B;">Switch</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#B392F0;">&lt;</span><span style="color:#79B8FF;">Switch</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">  &lt;</span><span style="color:#79B8FF;">Route</span><span style="color:#B392F0;"> exact path</span><span style="color:#F97583;">=</span><span style="color:#FFAB70;">&quot;/&quot;</span><span style="color:#B392F0;"> component</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">{Home} /&gt;</span></span>
<span class="line"><span style="color:#B392F0;">  &lt;</span><span style="color:#79B8FF;">Route</span><span style="color:#B392F0;"> path</span><span style="color:#F97583;">=</span><span style="color:#FFAB70;">&quot;/about&quot;</span><span style="color:#B392F0;"> component</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">{About} /&gt;</span></span>
<span class="line"><span style="color:#B392F0;">  &lt;</span><span style="color:#79B8FF;">Route</span><span style="color:#B392F0;"> path</span><span style="color:#F97583;">=</span><span style="color:#FFAB70;">&quot;/contact&quot;</span><span style="color:#B392F0;"> component</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">{Contact} /&gt;</span></span>
<span class="line"><span style="color:#B392F0;">&lt;/</span><span style="color:#79B8FF;">Switch</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><code>&lt;Switch&gt;</code> 不是分组 <code>&lt;Route&gt;</code> 所必须的，但他通常很有用。 一个 <code>&lt;Switch&gt;</code> 会遍历其所有的子 <code>&lt;Route&gt;</code>元素，并仅渲染与当前地址匹配的第一个元素。</p><p>**（3）使用 **<code>&lt;Link&gt;、 &lt;NavLink&gt;、&lt;Redirect&gt;**</code> 组件</p><p><code>&lt;Link&gt;</code> 组件来在你的应用程序中创建链接。无论你在何处渲染一个<code>&lt;Link&gt;</code> ，都会在应用程序的 HTML 中渲染锚（<code>&lt;a&gt;</code>）。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Link</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">to</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;/&quot;</span><span style="color:#ABB2BF;">&gt;Home&lt;/</span><span style="color:#E5C07B;">Link</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// &lt;a href=&#39;/&#39;&gt;Home&lt;/a&gt;</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#B392F0;">&lt;</span><span style="color:#79B8FF;">Link</span><span style="color:#B392F0;"> to</span><span style="color:#F97583;">=</span><span style="color:#FFAB70;">&quot;/&quot;</span><span style="color:#B392F0;">&gt;Home&lt;/</span><span style="color:#79B8FF;">Link</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"><span style="color:#6B737C;">// &lt;a href=&#39;/&#39;&gt;Home&lt;/a&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>是一种特殊类型的   当它的 to 属性与当前地址匹配时，可以将其定义为&quot;活跃的&quot;。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// location = { pathname: &#39;/react&#39; }</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">NavLink</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">to</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;/react&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">activeClassName</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;hurray&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  React</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E5C07B;">NavLink</span><span style="color:#ABB2BF;">&gt;;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// &lt;a href=&#39;/react&#39; className=&#39;hurray&#39;&gt;React&lt;/a&gt;</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#6B737C;">// location = { pathname: &#39;/react&#39; }</span></span>
<span class="line"><span style="color:#B392F0;">&lt;</span><span style="color:#79B8FF;">NavLink</span><span style="color:#B392F0;"> to</span><span style="color:#F97583;">=</span><span style="color:#FFAB70;">&quot;/react&quot;</span><span style="color:#B392F0;"> activeClassName</span><span style="color:#F97583;">=</span><span style="color:#FFAB70;">&quot;hurray&quot;</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">  React</span></span>
<span class="line"><span style="color:#B392F0;">&lt;/</span><span style="color:#79B8FF;">NavLink</span><span style="color:#B392F0;">&gt;;</span></span>
<span class="line"><span style="color:#6B737C;">// &lt;a href=&#39;/react&#39; className=&#39;hurray&#39;&gt;React&lt;/a&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>当我们想强制导航时，可以渲染一个<code>&lt;Redirect&gt;</code>，当一个<code>&lt;Redirect&gt;</code>渲染时，它将使用它的 to 属性进行定向。</p><h3 id="react-router-怎么设置重定向" tabindex="-1">React-Router 怎么设置重定向？ <a class="header-anchor" href="#react-router-怎么设置重定向" aria-hidden="true">#</a></h3><p>使用<code>&lt;Redirect&gt;</code>组件实现路由的重定向：</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Switch</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E5C07B;">Redirect</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">from</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;/users/:id&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">to</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;/users/profile/:id&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E5C07B;">Route</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">path</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;/users/profile/:id&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">component</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">Profile</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E5C07B;">Switch</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#B392F0;">&lt;</span><span style="color:#79B8FF;">Switch</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">  &lt;</span><span style="color:#79B8FF;">Redirect</span><span style="color:#B392F0;"> from</span><span style="color:#F97583;">=</span><span style="color:#FFAB70;">&quot;/users/:id&quot;</span><span style="color:#B392F0;"> to</span><span style="color:#F97583;">=</span><span style="color:#FFAB70;">&quot;/users/profile/:id&quot;</span><span style="color:#B392F0;"> /&gt;</span></span>
<span class="line"><span style="color:#B392F0;">  &lt;</span><span style="color:#79B8FF;">Route</span><span style="color:#B392F0;"> path</span><span style="color:#F97583;">=</span><span style="color:#FFAB70;">&quot;/users/profile/:id&quot;</span><span style="color:#B392F0;"> component</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">{Profile} /&gt;</span></span>
<span class="line"><span style="color:#B392F0;">&lt;/</span><span style="color:#79B8FF;">Switch</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>当请求 <code>/users/:id</code> 被重定向去 <code>&#39;/users/profile/:id&#39;</code>：</p><ul><li>属性 <code>from: string</code>：需要匹配的将要被重定向路径。</li><li>属性 <code>to: string</code>：重定向的 URL 字符串</li><li>属性 <code>to: object</code>：重定向的 location 对象</li><li>属性 <code>push: bool</code>：若为真，重定向操作将会把新地址加入到访问历史记录里面，并且无法回退到前面的页面。</li></ul><h3 id="react-router-里的-link-标签和-a-标签的区别" tabindex="-1">react-router 里的 Link 标签和 a 标签的区别 <a class="header-anchor" href="#react-router-里的-link-标签和-a-标签的区别" aria-hidden="true">#</a></h3><p>从最终渲染的 DOM 来看，这两者都是链接，都是 标签，区别是 ∶ <code>&lt;Link&gt;</code>是 react-router 里实现路由跳转的链接，一般配合<code>&lt;Route&gt;</code> 使用，react-router 接管了其默认的链接跳转行为，区别于传统的页面跳转，<code>&lt;Link&gt;</code> 的“跳转”行为只会触发相匹配的<code>&lt;Route&gt;</code>对应的页面内容更新，而不会刷新整个页面。</p><p><code>&lt;Link&gt;</code>做了 3 件事情:</p><ul><li>有 onclick 那就执行 onclick</li><li>click 的时候阻止 a 标签默认事件</li><li>根据跳转 href(即是 to)，用 history (web 前端路由两种方式之一，history &amp; hash)跳转，此时只是链接变了，并没有刷新页面而<code>&lt;a&gt;</code>标签就是普通的超链接了，用于从当前页面跳转到 href 指向的另一 个页面(非锚点情况)。</li></ul><p>a 标签默认事件禁掉之后做了什么才实现了跳转?</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">domArr</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getElementsByTagName</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;a&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">[...</span><span style="color:#E06C75;">domArr</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">item</span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">item</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;click&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">location</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">href</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">href</span></span>
<span class="line"><span style="color:#ABB2BF;">    })</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#B392F0;"> domArr </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">document</span><span style="color:#B392F0;">.getElementsByTagName(</span><span style="color:#FFAB70;">&#39;a&#39;</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#B392F0;">[</span><span style="color:#F97583;">...</span><span style="color:#B392F0;">domArr].forEach(item</span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;">{</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">item</span><span style="color:#B392F0;">.addEventListener(</span><span style="color:#FFAB70;">&#39;click&#39;</span><span style="color:#BBBBBB;">,</span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> () {</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#79B8FF;">location</span><span style="color:#B392F0;">.href </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.href</span></span>
<span class="line"><span style="color:#B392F0;">    })</span></span>
<span class="line"><span style="color:#B392F0;">})</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="react-router-如何获取-url-的参数和历史对象" tabindex="-1">React-Router 如何获取 URL 的参数和历史对象？ <a class="header-anchor" href="#react-router-如何获取-url-的参数和历史对象" aria-hidden="true">#</a></h3><p><strong>（1）获取 URL 的参数</strong></p><ul><li><strong>get 传值</strong></li></ul><p>路由配置还是普通的配置，如：<code>&#39;admin&#39;</code>，传参方式如：<code>&#39;admin?id=&#39;1111&#39;&#39;</code>。通过<code>this.props.location.search</code>获取 url 获取到一个字符串<code>&#39;?id=&#39;1111&#39;</code> 可以用 url，qs，querystring，浏览器提供的 api URLSearchParams 对象或者自己封装的方法去解析出 id 的值。</p><ul><li><strong>动态路由传值</strong></li></ul><p>路由需要配置成动态路由：如<code>path=&#39;/admin/:id&#39;</code>，传参方式，如<code>&#39;admin/111&#39;</code>。通过<code>this.props.match.params.id</code> 取得 url 中的动态路由 id 部分的值，除此之外还可以通过<code>useParams（Hooks）</code>来获取</p><ul><li><strong>通过 query 或 state 传值</strong></li></ul><p>传参方式如：在 Link 组件的 to 属性中可以传递对象<code>{pathname:&#39;/admin&#39;,query:&#39;111&#39;,state:&#39;111&#39;};</code>。通过<code>this.props.location.state</code>或<code>this.props.location.query</code>来获取即可，传递的参数可以是对象、数组等，但是存在缺点就是只要刷新页面，参数就会丢失。</p><p><strong>（2）获取历史对象</strong></p><ul><li>如果 React &gt;= 16.8 时可以使用 React Router 中提供的 Hooks</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">useHistory</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;react-router-dom&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">history</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">useHistory</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> { useHistory } </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;react-router-dom&quot;</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#B392F0;"> history </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> useHistory();</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>2.使用 this.props.history 获取历史对象</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">history</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">props</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">history</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#B392F0;"> history </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">props</span><span style="color:#B392F0;">.history;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="react-router-4-怎样在路由变化时重新渲染同一个组件" tabindex="-1">React-Router 4 怎样在路由变化时重新渲染同一个组件？ <a class="header-anchor" href="#react-router-4-怎样在路由变化时重新渲染同一个组件" aria-hidden="true">#</a></h3><p>当路由变化时，即组件的 props 发生了变化，会调用 componentWillReceiveProps 等生命周期钩子。那需要做的只是： 当路由改变时，根据路由，也去请求数据：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">NewsList</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">extends</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Component</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">componentDidMount</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#ABB2BF;">     </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">fetchData</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">props</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">location</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">fetchData</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">location</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">type</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">location</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">pathname</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">replace</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;top&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">props</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">dispatch</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">fetchListData</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">componentWillReceiveProps</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">nextProps</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">     </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">nextProps</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">location</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">pathname</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">!=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">props</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">location</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">pathname</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">         </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">fetchData</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">nextProps</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">location</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">     }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">render</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#ABB2BF;">    ...</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#B392F0;"> NewsList </span><span style="color:#F97583;">extends</span><span style="color:#B392F0;"> Component {</span></span>
<span class="line"><span style="color:#B392F0;">  componentDidMount () {</span></span>
<span class="line"><span style="color:#B392F0;">     </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.fetchData(</span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">props</span><span style="color:#B392F0;">.location);</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">  fetchData(location) {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">type</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">location</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">pathname</span><span style="color:#B392F0;">.replace(</span><span style="color:#FFAB70;">&#39;/&#39;</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;&#39;</span><span style="color:#B392F0;">) </span><span style="color:#F97583;">||</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;top&#39;</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">props</span><span style="color:#B392F0;">.dispatch(fetchListData(type))</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">  componentWillReceiveProps(nextProps) {</span></span>
<span class="line"><span style="color:#B392F0;">     </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">nextProps</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">location</span><span style="color:#B392F0;">.pathname </span><span style="color:#F97583;">!=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">props</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">location</span><span style="color:#B392F0;">.pathname) {</span></span>
<span class="line"><span style="color:#B392F0;">         </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.fetchData(</span><span style="color:#79B8FF;">nextProps</span><span style="color:#B392F0;">.location);</span></span>
<span class="line"><span style="color:#B392F0;">     }</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">  render () {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>利用生命周期 componentWillReceiveProps，进行重新 render 的预处理操作。</p><h3 id="react-router-的路由有几种模式" tabindex="-1">React-Router 的路由有几种模式？ <a class="header-anchor" href="#react-router-的路由有几种模式" aria-hidden="true">#</a></h3><p>React-Router 支持使用 hash（对应 HashRouter）和 browser（对应 BrowserRouter） 两种路由规则， react-router-dom 提供了 BrowserRouter 和 HashRouter 两个组件来实现应用的 UI 和 URL 同步：</p><ul><li>BrowserRouter 创建的 URL 格式：<a href="https://link.juejin.cn?target=http%3A%2F%2Fxxx.com%2Fpath" target="_blank" rel="noreferrer">xxx.com/path</a></li><li>HashRouter 创建的 URL 格式：<a href="https://link.juejin.cn?target=http%3A%2F%2Fxxx.com%2F%23%2Fpath" target="_blank" rel="noreferrer">xxx.com/#/path</a></li></ul><p><strong>（1）BrowserRouter</strong></p><p>它使用 HTML5 提供的 history API（pushState、replaceState 和 popstate 事件）来保持 UI 和 URL 的同步。由此可以看出，<strong>BrowserRouter 是使用 HTML 5 的 history API 来控制路由跳转的：</strong></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">BrowserRouter</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#D19A66;font-style:italic;">basename</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">string</span><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#D19A66;font-style:italic;">forceRefresh</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">bool</span><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#D19A66;font-style:italic;">getUserConfirmation</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">func</span><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#D19A66;font-style:italic;">keyLength</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">number</span><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">/&gt;;</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#B392F0;">&lt;</span><span style="color:#79B8FF;">BrowserRouter</span></span>
<span class="line"><span style="color:#B392F0;">  basename</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">{string}</span></span>
<span class="line"><span style="color:#B392F0;">  forceRefresh</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">{bool}</span></span>
<span class="line"><span style="color:#B392F0;">  getUserConfirmation</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">{func}</span></span>
<span class="line"><span style="color:#B392F0;">  keyLength</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">{number}</span></span>
<span class="line"><span style="color:#B392F0;">/&gt;;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><strong>其中的属性如下：</strong></p><ul><li>basename 所有路由的基准 URL。basename 的正确格式是前面有一个前导斜杠，但不能有尾部斜杠；</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">BrowserRouter</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">basename</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;/calendar&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E5C07B;">Link</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">to</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;/today&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E5C07B;">BrowserRouter</span><span style="color:#ABB2BF;">&gt;;</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#B392F0;">&lt;</span><span style="color:#79B8FF;">BrowserRouter</span><span style="color:#B392F0;"> basename</span><span style="color:#F97583;">=</span><span style="color:#FFAB70;">&quot;/calendar&quot;</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">  &lt;</span><span style="color:#79B8FF;">Link</span><span style="color:#B392F0;"> to</span><span style="color:#F97583;">=</span><span style="color:#FFAB70;">&quot;/today&quot;</span><span style="color:#B392F0;"> /&gt;</span></span>
<span class="line"><span style="color:#B392F0;">&lt;/</span><span style="color:#79B8FF;">BrowserRouter</span><span style="color:#B392F0;">&gt;;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>等同于</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">href</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;/calendar/today&quot;</span><span style="color:#ABB2BF;"> /&gt;;</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#B392F0;">&lt;</span><span style="color:#FFAB70;">a</span><span style="color:#B392F0;"> href</span><span style="color:#F97583;">=</span><span style="color:#FFAB70;">&quot;/calendar/today&quot;</span><span style="color:#B392F0;"> /&gt;;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>forceRefresh 如果为 true，在导航的过程中整个页面将会刷新。一般情况下，只有在不支持 HTML5 history API 的浏览器中使用此功能；</li><li>getUserConfirmation 用于确认导航的函数，默认使用 window.confirm。例如，当从 /a 导航至 /b 时，会使用默认的 confirm 函数弹出一个提示，用户点击确定后才进行导航，否则不做任何处理；</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 这是默认的确认函数</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">getConfirmation</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">message</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">callback</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">allowTransition</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">confirm</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">message</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">callback</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">allowTransition</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">BrowserRouter</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">getUserConfirmation</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">getConfirmation</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;"> /&gt;;</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#6B737C;">// 这是默认的确认函数</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> getConfirmation </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> (message</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> callback) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">allowTransition</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">window</span><span style="color:#B392F0;">.confirm(message);</span></span>
<span class="line"><span style="color:#B392F0;">  callback(allowTransition);</span></span>
<span class="line"><span style="color:#B392F0;">};</span></span>
<span class="line"><span style="color:#B392F0;">&lt;</span><span style="color:#79B8FF;">BrowserRouter</span><span style="color:#B392F0;"> getUserConfirmation</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">{getConfirmation} /&gt;;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><blockquote><p>需要配合<code>&lt;Prompt&gt;</code> 一起使用。</p></blockquote><ul><li>KeyLength 用来设置 Location.Key 的长度。</li></ul><p><strong>（2）HashRouter</strong></p><p>使用 URL 的 hash 部分（即 window.location.hash）来保持 UI 和 URL 的同步。由此可以看出，<strong>HashRouter 是通过 URL 的 hash 属性来控制路由跳转的：</strong></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">HashRouter</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">basename</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">string</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">getUserConfirmation</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">func</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">hashType</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">string</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;"> /&gt;;</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#B392F0;">&lt;</span><span style="color:#79B8FF;">HashRouter</span><span style="color:#B392F0;"> basename</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">{string} getUserConfirmation</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">{func} hashType</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">{string} /&gt;;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>其参数如下</strong>：</p><ul><li>basename, getUserConfirmation 和 <code>BrowserRouter</code> 功能一样；</li><li>hashType window.location.hash 使用的 hash 类型，有如下几种： <ul><li>slash - 后面跟一个斜杠，例如 #/ 和 #/sunshine/lollipops；</li><li>noslash - 后面没有斜杠，例如 # 和 #sunshine/lollipops；</li><li>hashbang - Google 风格的 ajax crawlable，例如 #!/ 和 #!/sunshine/lollipops。</li></ul></li></ul><h3 id="react-router-4-的-switch-有什么用" tabindex="-1">React-Router 4 的 Switch 有什么用？ <a class="header-anchor" href="#react-router-4-的-switch-有什么用" aria-hidden="true">#</a></h3><p>Switch 通常被用来包裹 Route，用于渲染与路径匹配的第一个子 <code>&lt;Route&gt;</code> 或 <code>&lt;Redirect&gt;</code>，它里面不能放其他元素。</p><p>假如不加 <code>&lt;Switch&gt;</code> ：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Route</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;react-router-dom&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Route</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">path</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;/&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">component</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">Home</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E5C07B;">Route</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Route</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">path</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;/login&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">component</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">Login</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E5C07B;">Route</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> { Route } </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;react-router-dom&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">&lt;</span><span style="color:#79B8FF;">Route</span><span style="color:#B392F0;"> path</span><span style="color:#F97583;">=</span><span style="color:#FFAB70;">&quot;/&quot;</span><span style="color:#B392F0;"> component</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">{Home}&gt;&lt;/</span><span style="color:#79B8FF;">Route</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">&lt;</span><span style="color:#79B8FF;">Route</span><span style="color:#B392F0;"> path</span><span style="color:#F97583;">=</span><span style="color:#FFAB70;">&quot;/login&quot;</span><span style="color:#B392F0;"> component</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">{Login}&gt;&lt;/</span><span style="color:#79B8FF;">Route</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Route 组件的 path 属性用于匹配路径，因为需要匹配 <code>/</code> 到 <code>Home</code>，匹配 <code>/login</code> 到 <code>Login</code>，所以需要两个 Route，但是不能这么写。这样写的话，当 URL 的 path 为 “/login” 时，<code>&lt;Route path=&quot;/&quot; /&gt;</code>和<code>&lt;Route path=&quot;/login&quot; /&gt;</code> 都会被匹配，因此页面会展示 Home 和 Login 两个组件。这时就需要借助 <code>&lt;Switch&gt;</code> 来做到只显示一个匹配组件：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Switch</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">Route</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;react-router-dom&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Switch</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E5C07B;">Route</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">path</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;/&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">component</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">Home</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E5C07B;">Route</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E5C07B;">Route</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">path</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;/login&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">component</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">Login</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E5C07B;">Route</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E5C07B;">Switch</span><span style="color:#ABB2BF;">&gt;;</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> { Switch</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> Route } </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;react-router-dom&quot;</span><span style="color:#B392F0;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">&lt;</span><span style="color:#79B8FF;">Switch</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">  &lt;</span><span style="color:#79B8FF;">Route</span><span style="color:#B392F0;"> path</span><span style="color:#F97583;">=</span><span style="color:#FFAB70;">&quot;/&quot;</span><span style="color:#B392F0;"> component</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">{Home}&gt;&lt;/</span><span style="color:#79B8FF;">Route</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">  &lt;</span><span style="color:#79B8FF;">Route</span><span style="color:#B392F0;"> path</span><span style="color:#F97583;">=</span><span style="color:#FFAB70;">&quot;/login&quot;</span><span style="color:#B392F0;"> component</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">{Login}&gt;&lt;/</span><span style="color:#79B8FF;">Route</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">&lt;/</span><span style="color:#79B8FF;">Switch</span><span style="color:#B392F0;">&gt;;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>此时，再访问 “/login” 路径时，却只显示了 Home 组件。这是就用到了 exact 属性，它的作用就是精确匹配路径，经常与<code>&lt;Switch&gt;</code> 联合使用。只有当 URL 和该 <code>&lt;Route&gt;</code> 的 path 属性完全一致的情况下才能匹配上：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Switch</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">Route</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;react-router-dom&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Switch</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E5C07B;">Route</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">exact</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">path</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;/&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">component</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">Home</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E5C07B;">Route</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E5C07B;">Route</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">exact</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">path</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;/login&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">component</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">Login</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E5C07B;">Route</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E5C07B;">Switch</span><span style="color:#ABB2BF;">&gt;;</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> { Switch</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> Route } </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;react-router-dom&quot;</span><span style="color:#B392F0;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">&lt;</span><span style="color:#79B8FF;">Switch</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">  &lt;</span><span style="color:#79B8FF;">Route</span><span style="color:#B392F0;"> exact path</span><span style="color:#F97583;">=</span><span style="color:#FFAB70;">&quot;/&quot;</span><span style="color:#B392F0;"> component</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">{Home}&gt;&lt;/</span><span style="color:#79B8FF;">Route</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">  &lt;</span><span style="color:#79B8FF;">Route</span><span style="color:#B392F0;"> exact path</span><span style="color:#F97583;">=</span><span style="color:#FFAB70;">&quot;/login&quot;</span><span style="color:#B392F0;"> component</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">{Login}&gt;&lt;/</span><span style="color:#79B8FF;">Route</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">&lt;/</span><span style="color:#79B8FF;">Switch</span><span style="color:#B392F0;">&gt;;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="redux" tabindex="-1">Redux <a class="header-anchor" href="#redux" aria-hidden="true">#</a></h2><h3 id="对-redux-的理解-主要解决什么问题" tabindex="-1">对 Redux 的理解，主要解决什么问题 <a class="header-anchor" href="#对-redux-的理解-主要解决什么问题" aria-hidden="true">#</a></h3><p>React 是视图层框架。Redux 是一个用来管理数据状态和 UI 状态的 JavaScript 应用工具。随着 JavaScript 单页应用（SPA）开发日趋复杂， JavaScript 需要管理比任何时候都要多的 state（状态）， Redux 就是降低管理难度的。（Redux 支持 React、Angular、jQuery 甚至纯 JavaScript）</p><p>在 React 中，UI 以组件的形式来搭建，组件之间可以嵌套组合。但 React 中组件间通信的数据流是单向的，顶层组件可以通过 props 属性向下层组件传递数据，而下层组件不能向上层组件传递数据，兄弟组件之间同样不能。这样简单的单向数据流支撑起了 React 中的数据可控性。</p><p>当项目越来越大的时候，管理数据的事件或回调函数将越来越多，也将越来越不好管理。管理不断变化的 state 非常困难。如果一个 model 的变化会引起另一个 model 变化，那么当 view 变化时，就可能引起对应 model 以及另一个 model 的变化，依次地，可能会引起另一个 view 的变化。直至你搞不清楚到底发生了什么。state 在什么时候，由于什么原因，如何变化已然不受控制。 当系统变得错综复杂的时候，想重现问题或者添加新功能就会变得举步维艰。如果这还不够糟糕，考虑一些来自前端开发领域的新需求，如更新调优、服务端渲染、路由跳转前请求数据等。state 的管理在大项目中相当复杂。</p><p>Redux 提供了一个叫 store 的统一仓储库，组件通过 dispatch 将 state 直接传入 store，不用通过其他的组件。并且组件通过 subscribe 从 store 获取到 state 的改变。使用了 Redux，所有的组件都可以从 store 中获取到所需的 state，他们也能从 store 获取到 state 的改变。这比组件之间互相传递数据清晰明朗的多。</p><p><strong>主要解决的问题：</strong> 单纯的 Redux 只是一个状态机，是没有 UI 呈现的，react- redux 作用是将 Redux 的状态机和 React 的 UI 呈现绑定在一起，当你 dispatch action 改变 state 的时候，会自动更新页面。</p><h3 id="redux-原理及工作流程" tabindex="-1">Redux 原理及工作流程 <a class="header-anchor" href="#redux-原理及工作流程" aria-hidden="true">#</a></h3><p>（1）原理 Redux 源码主要分为以下几个模块文件</p><ul><li>compose.js 提供从右到左进行函数式编程</li><li>createStore.js 提供作为生成唯一 store 的函数</li><li>combineReducers.js 提供合并多个 reducer 的函数，保证 store 的唯一性</li><li>bindActionCreators.js 可以让开发者在不直接接触 dispacth 的前提下进行更改 state 的操作</li><li>applyMiddleware.js 这个方法通过中间件来增强 dispatch 的功能</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">actionTypes</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">ADD</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;ADD&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">CHANGEINFO</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;CHANGEINFO&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">initState</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">info</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;初始化&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">default</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">initReducer</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;">initState</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">action</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">switch</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">action</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">case</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">actionTypes</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">CHANGEINFO</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">                ...</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#E06C75;">info</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">action</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">preload</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">info</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">default</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> { ...</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">default</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">createStore</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">reducer</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">initialState</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">middleFunc</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">initialState</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">typeof</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">initialState</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;function&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">middleFunc</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">initialState</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">initialState</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">undefined</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">currentState</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">initialState</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">listeners</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">middleFunc</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">typeof</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">middleFunc</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;function&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// 封装dispatch</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">middleFunc</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">createStore</span><span style="color:#ABB2BF;">)(</span><span style="color:#E06C75;">reducer</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">initialState</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">getState</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">currentState</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">dispatch</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">action</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">currentState</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">reducer</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">currentState</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">action</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">listeners</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">listener</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#61AFEF;">listener</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        })</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">subscribe</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">listener</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">listeners</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">listener</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">getState</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">dispatch</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">subscribe</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">actionTypes</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    ADD</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;ADD&#39;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    CHANGEINFO</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;CHANGEINFO&#39;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">initState</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    info</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;初始化&#39;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">default</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> initReducer(state</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">initState</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> action) {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">switch</span><span style="color:#B392F0;">(</span><span style="color:#79B8FF;">action</span><span style="color:#B392F0;">.type) {</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">case</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">actionTypes</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">CHANGEINFO</span><span style="color:#B392F0;">:</span></span>
<span class="line"><span style="color:#B392F0;">            </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">                </span><span style="color:#F97583;">...</span><span style="color:#B392F0;">state</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">                info</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">action</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">preload</span><span style="color:#B392F0;">.info </span><span style="color:#F97583;">||</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;&#39;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">            }</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">default</span><span style="color:#B392F0;">:</span></span>
<span class="line"><span style="color:#B392F0;">            </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> { </span><span style="color:#F97583;">...</span><span style="color:#B392F0;">state };</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">default</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> createStore(reducer</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> initialState</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> middleFunc) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (initialState </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">typeof</span><span style="color:#B392F0;"> initialState </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;function&#39;</span><span style="color:#B392F0;">) {</span></span>
<span class="line"><span style="color:#B392F0;">        middleFunc </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> initialState;</span></span>
<span class="line"><span style="color:#B392F0;">        initialState </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">let</span><span style="color:#B392F0;"> currentState </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> initialState;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">listeners</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (middleFunc </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">typeof</span><span style="color:#B392F0;"> middleFunc </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;function&#39;</span><span style="color:#B392F0;">) {</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#6B737C;">// 封装dispatch</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> middleFunc(createStore)(reducer</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> initialState);</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> getState </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> currentState;</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> dispatch </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> (action) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">        currentState </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> reducer(currentState</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> action);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#79B8FF;">listeners</span><span style="color:#B392F0;">.forEach(listener </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">            listener();</span></span>
<span class="line"><span style="color:#B392F0;">        })</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> subscribe </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> (listener) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#79B8FF;">listeners</span><span style="color:#B392F0;">.push(listener);</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">        getState</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">        dispatch</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">        subscribe</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br></div></div><p><strong>（2）工作流程</strong></p><ul><li>const store= createStore（fn）生成数据;</li><li>action: {type: Symble(&#39;action01), payload:&#39;payload&#39; }定义行为;</li><li>dispatch 发起 action：store.dispatch(doSomething(&#39;action001&#39;));</li><li>reducer：处理 action，返回新的 state;</li></ul><p>通俗点解释：</p><ul><li>首先，用户（通过 View）发出 Action，发出方式就用到了 dispatch 方法</li><li>然后，Store 自动调用 Reducer，并且传入两个参数：当前 State 和收到的 Action，Reducer 会返回新的 State</li><li>State—旦有变化，Store 就会调用监听函数，来更新 View</li></ul><p>以 store 为核心，可以把它看成数据存储中心，但是他要更改数据的时候不能直接修改，数据修改更新的角色由 Reducers 来担任，store 只做存储，中间人，当 Reducers 的更新完成以后会通过 store 的订阅来通知 react component，组件把新的状态重新获取渲染，组件中也能主动发送 action，创建 action 后这个动作是不会执行的，所以要 dispatch 这个 action，让 store 通过 reducers 去做更新 React Component 就是 react 的每个组件。</p><h3 id="redux-中异步的请求怎么处理" tabindex="-1">Redux 中异步的请求怎么处理 <a class="header-anchor" href="#redux-中异步的请求怎么处理" aria-hidden="true">#</a></h3><p>可以在 componentDidmount 中直接进⾏请求⽆须借助 redux。但是在⼀定规模的项⽬中,上述⽅法很难进⾏异步流的管理,通常情况下我们会借助 redux 的异步中间件进⾏异步处理。redux 异步流中间件其实有很多，当下主流的异步中间件有两种 redux-thunk、redux-saga。</p><p><strong>（1）使用 react-thunk 中间件</strong></p><p><strong>redux-thunk</strong>优点:</p><ul><li>体积⼩: redux-thunk 的实现⽅式很简单,只有不到 20 ⾏代码</li><li>使⽤简单: redux-thunk 没有引⼊像 redux-saga 或者 redux-observable 额外的范式,上⼿简单</li></ul><p><strong>redux-thunk</strong>缺陷:</p><ul><li>样板代码过多: 与 redux 本身⼀样,通常⼀个请求需要⼤量的代码,⽽且很多都是重复性质的</li><li>耦合严重: 异步操作与 redux 的 action 偶合在⼀起,不⽅便管理</li><li>功能孱弱: 有⼀些实际开发中常⽤的功能需要⾃⼰进⾏封装</li></ul><p>使用步骤：</p><ul><li>配置中间件，在 store 的创建中配置</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">createStore</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">applyMiddleware</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">compose</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;redux&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">reducer</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;./reducer&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">thunk</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;redux-thunk&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 设置调试工具</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">composeEnhancers</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__REDUX_DEVTOOLS_EXTENSION_COMPOSE__</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">__REDUX_DEVTOOLS_EXTENSION_COMPOSE__</span><span style="color:#ABB2BF;">({})</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">compose</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 设置中间件</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">enhancer</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">composeEnhancers</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">applyMiddleware</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">thunk</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">store</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">createStore</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">reducer</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">enhancer</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">default</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> { createStore</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> applyMiddleware</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> compose } </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;redux&quot;</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> reducer </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;./reducer&quot;</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> thunk </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;redux-thunk&quot;</span><span style="color:#B392F0;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 设置调试工具</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">composeEnhancers</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">window</span><span style="color:#B392F0;">.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">?</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">window</span><span style="color:#B392F0;">.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({})</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> compose;</span></span>
<span class="line"><span style="color:#6B737C;">// 设置中间件</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">enhancer</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> composeEnhancers(applyMiddleware(thunk));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">store</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> createStore(reducer</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> enhancer);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">default</span><span style="color:#B392F0;"> store;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><ul><li>添加一个返回函数的 actionCreator，将异步请求逻辑放在里面</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  发送get请求，并生成相应action，更新store的函数</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#7F848E;font-style:italic;"> </span><span style="color:#E06C75;font-style:italic;">url</span><span style="color:#7F848E;font-style:italic;"> {string} 请求地址</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#7F848E;font-style:italic;"> </span><span style="color:#E06C75;font-style:italic;">func</span><span style="color:#7F848E;font-style:italic;"> {function} 真正需要生成的action对应的actionCreator</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  </span><span style="color:#C678DD;font-style:italic;">@return</span><span style="color:#7F848E;font-style:italic;"> </span><span style="color:#E5C07B;font-style:italic;">{function}</span><span style="color:#7F848E;font-style:italic;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*/</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// dispatch为自动接收的store.dispatch函数</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">getHttpAction</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">url</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">func</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">dispatch</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">axios</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">action</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">func</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">res</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">dispatch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">action</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  });</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#6B737C;">/**</span></span>
<span class="line"><span style="color:#6B737C;">  发送get请求，并生成相应action，更新store的函数</span></span>
<span class="line"><span style="color:#6B737C;">  </span><span style="color:#F97583;">@param</span><span style="color:#6B737C;"> url {string} 请求地址</span></span>
<span class="line"><span style="color:#6B737C;">  </span><span style="color:#F97583;">@param</span><span style="color:#6B737C;"> func {function} 真正需要生成的action对应的actionCreator</span></span>
<span class="line"><span style="color:#6B737C;">  </span><span style="color:#F97583;">@return</span><span style="color:#6B737C;"> </span><span style="color:#B392F0;">{function}</span><span style="color:#6B737C;"> </span></span>
<span class="line"><span style="color:#6B737C;">*/</span></span>
<span class="line"><span style="color:#6B737C;">// dispatch为自动接收的store.dispatch函数</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> getHttpAction </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> (url</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> func) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> (dispatch) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">axios</span><span style="color:#B392F0;">.get(url).then(</span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> (res) {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">action</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> func(</span><span style="color:#79B8FF;">res</span><span style="color:#B392F0;">.data);</span></span>
<span class="line"><span style="color:#B392F0;">    dispatch(action);</span></span>
<span class="line"><span style="color:#B392F0;">  });</span></span>
<span class="line"><span style="color:#B392F0;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><ul><li>生成 action，并发送 action</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#61AFEF;">componentDidMount</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">action</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">getHttpAction</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/getData&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">getInitTodoItemAction</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 发送函数类型的action时，该action的函数体会自动执行</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">store</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">dispatch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">action</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#B392F0;">componentDidMount(){</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">var</span><span style="color:#B392F0;"> action </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> getHttpAction(</span><span style="color:#FFAB70;">&#39;/getData&#39;</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> getInitTodoItemAction)</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">// 发送函数类型的action时，该action的函数体会自动执行</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">store</span><span style="color:#B392F0;">.dispatch(action)</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><strong>（2）使用 redux-saga 中间件</strong></p><p><strong>redux-saga</strong>优点:</p><ul><li>异步解耦: 异步操作被被转移到单独 saga.js 中，不再是掺杂在 action.js 或 component.js 中</li><li>action 摆脱 thunk function: dispatch 的参数依然是⼀个纯粹的 action (FSA)，⽽不是充满 “⿊魔法” thunk function</li><li>异常处理: 受益于 generator function 的 saga 实现，代码异常/请求失败 都可以直接通过 try/catch 语法直接捕获处理</li><li>功能强⼤: redux-saga 提供了⼤量的 Saga 辅助函数和 Effect 创建器供开发者使⽤,开发者⽆须封装或者简单封装即可使⽤</li><li>灵活: redux-saga 可以将多个 Saga 可以串⾏/并⾏组合起来,形成⼀个⾮常实⽤的异步 flow</li><li>易测试，提供了各种 case 的测试⽅案，包括 mock task，分⽀覆盖等等</li></ul><p><strong>redux-saga</strong>缺陷:</p><ul><li>额外的学习成本: redux-saga 不仅在使⽤难以理解的 generator function,⽽且有数⼗个 API,学习成本远超 redux-thunk,最重要的是你的额外学习成本是只服务于这个库的,与 redux-observable 不同,redux-observable 虽然也有额外学习成本但是背后是 rxjs 和⼀整套思想</li><li>体积庞⼤: 体积略⼤,代码近 2000 ⾏，min 版 25KB 左右</li><li>功能过剩: 实际上并发控制等功能很难⽤到,但是我们依然需要引⼊这些代码</li><li>ts ⽀持不友好: yield ⽆法返回 TS 类型</li></ul><p>redux-saga 可以捕获 action，然后执行一个函数，那么可以把异步代码放在这个函数中，使用步骤如下：</p><ul><li>配置中间件</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">createStore</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">applyMiddleware</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">compose</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;redux&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">reducer</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;./reducer&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">createSagaMiddleware</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;redux-saga&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">TodoListSaga</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;./sagas&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">composeEnhancers</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__REDUX_DEVTOOLS_EXTENSION_COMPOSE__</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">__REDUX_DEVTOOLS_EXTENSION_COMPOSE__</span><span style="color:#ABB2BF;">({})</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">compose</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">sagaMiddleware</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">createSagaMiddleware</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">enhancer</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">composeEnhancers</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">applyMiddleware</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">sagaMiddleware</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">store</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">createStore</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">reducer</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">enhancer</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">sagaMiddleware</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">run</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">TodoListSaga</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">default</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> { createStore</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> applyMiddleware</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> compose } </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;redux&quot;</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> reducer </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;./reducer&quot;</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> createSagaMiddleware </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;redux-saga&quot;</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> TodoListSaga </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;./sagas&quot;</span><span style="color:#B392F0;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">composeEnhancers</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">window</span><span style="color:#B392F0;">.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">?</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">window</span><span style="color:#B392F0;">.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({})</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> compose;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">sagaMiddleware</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> createSagaMiddleware();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">enhancer</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> composeEnhancers(applyMiddleware(sagaMiddleware));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">store</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> createStore(reducer</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> enhancer);</span></span>
<span class="line"><span style="color:#79B8FF;">sagaMiddleware</span><span style="color:#B392F0;">.run(TodoListSaga);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">default</span><span style="color:#B392F0;"> store;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><ul><li>将异步请求放在 sagas.js 中</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">takeEvery</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">put</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;redux-saga/effects&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">initTodoList</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;./actionCreator&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">GET_INIT_ITEM</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;./actionTypes&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">axios</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;axios&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function*</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">func</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 可以获取异步返回数据</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">res</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">yield</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">axios</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/getData&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">action</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">initTodoList</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">res</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 将action发送到reducer</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">yield</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">put</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">action</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;网络请求失败&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function*</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">mySaga</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 自动捕获GET_INIT_ITEM类型的action，并执行func</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">yield</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">takeEvery</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">GET_INIT_ITEM</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">func</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">default</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">mySaga</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> { takeEvery</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> put } </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;redux-saga/effects&quot;</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> { initTodoList } </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;./actionCreator&quot;</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> { GET_INIT_ITEM } </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;./actionTypes&quot;</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> axios </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;axios&quot;</span><span style="color:#B392F0;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function*</span><span style="color:#B392F0;"> func() {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">try</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">// 可以获取异步返回数据</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">res</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">yield</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">axios</span><span style="color:#B392F0;">.get(</span><span style="color:#FFAB70;">&quot;/getData&quot;</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">action</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> initTodoList(</span><span style="color:#79B8FF;">res</span><span style="color:#B392F0;">.data);</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">// 将action发送到reducer</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">yield</span><span style="color:#B392F0;"> put(action);</span></span>
<span class="line"><span style="color:#B392F0;">  } </span><span style="color:#F97583;">catch</span><span style="color:#B392F0;"> (e) {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#FFAB70;">&quot;网络请求失败&quot;</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function*</span><span style="color:#B392F0;"> mySaga() {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// 自动捕获GET_INIT_ITEM类型的action，并执行func</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">yield</span><span style="color:#B392F0;"> takeEvery(</span><span style="color:#79B8FF;">GET_INIT_ITEM</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> func);</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">default</span><span style="color:#B392F0;"> mySaga;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><ul><li>发送 action</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#61AFEF;">componentDidMount</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">action</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">getInitTodoItemAction</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">store</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">dispatch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">action</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#B392F0;">componentDidMount(){</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">action</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> getInitTodoItemAction()</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">store</span><span style="color:#B392F0;">.dispatch(action)</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="redux-怎么实现属性传递-介绍下原理" tabindex="-1">Redux 怎么实现属性传递，介绍下原理 <a class="header-anchor" href="#redux-怎么实现属性传递-介绍下原理" aria-hidden="true">#</a></h3><p>react-redux 数据传输 ∶ view--&gt;action--&gt;reducer--&gt;store--&gt;view。看下点击事件的数据是如何通过 redux 传到 view 上：</p><ul><li>view 上的 AddClick 事件通过 mapDispatchToProps 把数据传到 action ---&gt; click:()=&gt;dispatch(ADD)</li><li>action 的 ADD 传到 reducer 上</li><li>reducer 传到 store 上 const store = createStore(reducer);</li><li>store 再通过 mapStateToProps 映射穿到 view 上 text:State.text</li></ul><p>代码示例 ∶</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">React</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;react&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">ReactDOM</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;react-dom&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">createStore</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;redux&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Provider</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">connect</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;react-redux&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">App</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">extends</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">React</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Component</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">render</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">text</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">click</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">clickR</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">props</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">      &lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;数据:已有人</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">text</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">onClick</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">click</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;加人&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">onClick</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">clickR</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;减人&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">      &lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    );</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">initialState</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">text</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">reducer</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">action</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">switch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">action</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">case</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;ADD&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">text</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">text</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">case</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;REMOVE&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">text</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">text</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">default</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">initialState</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">ADD</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;ADD&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">Remove</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;REMOVE&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">store</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">createStore</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">reducer</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">mapStateToProps</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">text</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">text</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  };</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">mapDispatchToProps</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">dispatch</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">click</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">dispatch</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">ADD</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">clickR</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">dispatch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">Remove</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">  };</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">App1</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">connect</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">mapStateToProps</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">mapDispatchToProps</span><span style="color:#ABB2BF;">)(</span><span style="color:#E06C75;">App</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">ReactDOM</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">render</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E5C07B;">Provider</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">store</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">store</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E5C07B;">App1</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E5C07B;">App1</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;/</span><span style="color:#E5C07B;">Provider</span><span style="color:#ABB2BF;">&gt;,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getElementById</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;root&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> React </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;react&quot;</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> ReactDOM </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;react-dom&quot;</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> { createStore } </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;redux&quot;</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> { Provider</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> connect } </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;react-redux&quot;</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#B392F0;"> App </span><span style="color:#F97583;">extends</span><span style="color:#B392F0;"> React.Component {</span></span>
<span class="line"><span style="color:#B392F0;">  render() {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">let</span><span style="color:#B392F0;"> { text</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> click</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> clickR } </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.props;</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> (</span></span>
<span class="line"><span style="color:#B392F0;">      &lt;</span><span style="color:#FFAB70;">div</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">        &lt;</span><span style="color:#FFAB70;">div</span><span style="color:#B392F0;">&gt;数据:已有人{text}&lt;/</span><span style="color:#FFAB70;">div</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">        &lt;</span><span style="color:#FFAB70;">div</span><span style="color:#B392F0;"> onClick</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">{click}&gt;加人&lt;/</span><span style="color:#FFAB70;">div</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">        &lt;</span><span style="color:#FFAB70;">div</span><span style="color:#B392F0;"> onClick</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">{clickR}&gt;减人&lt;/</span><span style="color:#FFAB70;">div</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">      &lt;/</span><span style="color:#FFAB70;">div</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">    );</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">initialState</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  text</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">5</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">};</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> reducer </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> (state</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> action) {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">switch</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">action</span><span style="color:#B392F0;">.type) {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">case</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;ADD&quot;</span><span style="color:#B392F0;">:</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> { text</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">state</span><span style="color:#B392F0;">.text </span><span style="color:#F97583;">+</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">1</span><span style="color:#B392F0;"> };</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">case</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;REMOVE&quot;</span><span style="color:#B392F0;">:</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> { text</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">state</span><span style="color:#B392F0;">.text </span><span style="color:#F97583;">-</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">1</span><span style="color:#B392F0;"> };</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">default</span><span style="color:#B392F0;">:</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> initialState;</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">ADD</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  type</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;ADD&quot;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">};</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#B392F0;"> Remove </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  type</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;REMOVE&quot;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">store</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> createStore(reducer);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#B392F0;"> mapStateToProps </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> (state) {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    text</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">state</span><span style="color:#B392F0;">.text</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  };</span></span>
<span class="line"><span style="color:#B392F0;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#B392F0;"> mapDispatchToProps </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> (dispatch) {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    click</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> dispatch(</span><span style="color:#79B8FF;">ADD</span><span style="color:#B392F0;">)</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    clickR</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> dispatch(Remove)</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  };</span></span>
<span class="line"><span style="color:#B392F0;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">App1</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> connect(mapStateToProps</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> mapDispatchToProps)(App);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">ReactDOM</span><span style="color:#B392F0;">.render(</span></span>
<span class="line"><span style="color:#B392F0;">  &lt;</span><span style="color:#79B8FF;">Provider</span><span style="color:#B392F0;"> store</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">{store}&gt;</span></span>
<span class="line"><span style="color:#B392F0;">    &lt;</span><span style="color:#79B8FF;">App1</span><span style="color:#B392F0;">&gt;&lt;/</span><span style="color:#79B8FF;">App1</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">  &lt;/</span><span style="color:#79B8FF;">Provider</span><span style="color:#B392F0;">&gt;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">document</span><span style="color:#B392F0;">.getElementById(</span><span style="color:#FFAB70;">&quot;root&quot;</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#B392F0;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br></div></div><h3 id="redux-中间件是什么-接受几个参数-柯里化函数两端的参数具体是什么" tabindex="-1">Redux 中间件是什么？接受几个参数？柯里化函数两端的参数具体是什么？ <a class="header-anchor" href="#redux-中间件是什么-接受几个参数-柯里化函数两端的参数具体是什么" aria-hidden="true">#</a></h3><p>Redux 的中间件提供的是位于 action 被发起之后，到达 reducer 之前的扩展点，换而言之，原本 view -→&gt; action -&gt; reducer -&gt; store 的数据流加上中间件后变成了 view -&gt; action -&gt; middleware -&gt; reducer -&gt; store ，在这一环节可以做一些&quot;副作用&quot;的操作，如异步请求、打印日志等。</p><p>从<code>applyMiddleware</code>中可以看出 ∶</p><ul><li>redux 中间件接受一个对象作为参数，对象的参数上有两个字段 dispatch 和 getState，分别代表着 Redux Store 上的两个同名函数。</li><li>柯里化函数两端一个是 middewares，一个是 store.dispatch</li></ul><h3 id="redux-请求中间件如何处理并发" tabindex="-1">Redux 请求中间件如何处理并发 <a class="header-anchor" href="#redux-请求中间件如何处理并发" aria-hidden="true">#</a></h3><p><strong>使用 redux-Saga</strong> redux-saga 是一个管理 redux 应用异步操作的中间件，用于代替 redux-thunk 的。它通过创建 Sagas 将所有异步操作逻辑存放在一个地方进行集中处理，以此将 react 中的同步操作与异步操作区分开来，以便于后期的管理与维护。 redux-saga 如何处理并发：</p><ul><li><strong>takeEvery</strong></li></ul><p>可以让多个 saga 任务并行被 fork 执行。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">fork</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">take</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;redux-saga/effects&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">takeEvery</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">pattern</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">saga</span><span style="color:#ABB2BF;">, ...</span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">fork</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function*</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">while</span><span style="color:#ABB2BF;"> (</span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">action</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">yield</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">take</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">pattern</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">yield</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fork</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">saga</span><span style="color:#ABB2BF;">, ...</span><span style="color:#E5C07B;">args</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">concat</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">action</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  });</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> { fork</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> take } </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;redux-saga/effects&quot;</span><span style="color:#B392F0;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> takeEvery </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> (pattern</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> saga</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">...</span><span style="color:#B392F0;">args) </span><span style="color:#F97583;">=&gt;</span></span>
<span class="line"><span style="color:#B392F0;">  fork(</span><span style="color:#F97583;">function*</span><span style="color:#B392F0;"> () {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">while</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">true</span><span style="color:#B392F0;">) {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">action</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">yield</span><span style="color:#B392F0;"> take(pattern);</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">yield</span><span style="color:#B392F0;"> fork(saga</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">...</span><span style="color:#79B8FF;">args</span><span style="color:#B392F0;">.concat(action));</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"><span style="color:#B392F0;">  });</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ul><li><strong>takeLatest</strong></li></ul><p>takeLatest 不允许多个 saga 任务并行地执行。一旦接收到新的发起的 action，它就会取消前面所有 fork 过的任务（如果这些任务还在执行的话）。 在处理 AJAX 请求的时候，如果只希望获取最后那个请求的响应， takeLatest 就会非常有用。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">cancel</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">fork</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">take</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;redux-saga/effects&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">takeLatest</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">pattern</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">saga</span><span style="color:#ABB2BF;">, ...</span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">fork</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function*</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">lastTask</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">while</span><span style="color:#ABB2BF;"> (</span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">action</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">yield</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">take</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">pattern</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">lastTask</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">yield</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">cancel</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">lastTask</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 如果任务已经结束，则 cancel 为空操作</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">lastTask</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">yield</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fork</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">saga</span><span style="color:#ABB2BF;">, ...</span><span style="color:#E5C07B;">args</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">concat</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">action</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  });</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> { cancel</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> fork</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> take } </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;redux-saga/effects&quot;</span><span style="color:#B392F0;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> takeLatest </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> (pattern</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> saga</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">...</span><span style="color:#B392F0;">args) </span><span style="color:#F97583;">=&gt;</span></span>
<span class="line"><span style="color:#B392F0;">  fork(</span><span style="color:#F97583;">function*</span><span style="color:#B392F0;"> () {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">let</span><span style="color:#B392F0;"> lastTask;</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">while</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">true</span><span style="color:#B392F0;">) {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">action</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">yield</span><span style="color:#B392F0;"> take(pattern);</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (lastTask) {</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">yield</span><span style="color:#B392F0;"> cancel(lastTask); </span><span style="color:#6B737C;">// 如果任务已经结束，则 cancel 为空操作</span></span>
<span class="line"><span style="color:#B392F0;">      }</span></span>
<span class="line"><span style="color:#B392F0;">      lastTask </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">yield</span><span style="color:#B392F0;"> fork(saga</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">...</span><span style="color:#79B8FF;">args</span><span style="color:#B392F0;">.concat(action));</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"><span style="color:#B392F0;">  });</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="redux-状态管理器和变量挂载到-window-中有什么区别" tabindex="-1">Redux 状态管理器和变量挂载到 window 中有什么区别 <a class="header-anchor" href="#redux-状态管理器和变量挂载到-window-中有什么区别" aria-hidden="true">#</a></h3><p>两者都是存储数据以供后期使用。但是 Redux 状态更改可回溯——Time travel，数据多了的时候可以很清晰的知道改动在哪里发生，完整的提供了一套状态管理模式。</p><p>随着 JavaScript 单页应用开发日趋复杂，JavaScript 需要管理比任何时候都要多的 state （状态）。 这些 state 可能包括服务器响应、缓存数据、本地生成尚未持久化到服务器的数据，也包括 UI 状态，如激活的路由，被选中的标签，是否显示加载动效或者分页器等等。</p><p>管理不断变化的 state 非常困难。如果一个 model 的变化会引起另一个 model 变化，那么当 view 变化时，就可能引起对应 model 以及另一个 model 的变化，依次地，可能会引起另一个 view 的变化。直至你搞不清楚到底发生了什么。state 在什么时候，由于什么原因，如何变化已然不受控制。 当系统变得错综复杂的时候，想重现问题或者添加新功能就会变得举步维艰。 如果这还不够糟糕，考虑一些来自前端开发领域的新需求，如更新调优、服务端渲染、路由跳转前请求数据等等。前端开发者正在经受前所未有的复杂性，难道就这么放弃了吗?当然不是。</p><p>这里的复杂性很大程度上来自于：我们总是将两个难以理清的概念混淆在一起：变化和异步。 可以称它们为曼妥思和可乐。如果把二者分开，能做的很好，但混到一起，就变得一团糟。一些库如 React 视图在视图层禁止异步和直接操作 DOM 来解决这个问题。美中不足的是，React 依旧把处理 state 中数据的问题留给了你。Redux 就是为了帮你解决这个问题。</p><h3 id="mobox-和-redux-有什么区别" tabindex="-1">mobox 和 redux 有什么区别？ <a class="header-anchor" href="#mobox-和-redux-有什么区别" aria-hidden="true">#</a></h3><p><strong>（1）共同点</strong></p><ul><li>为了解决状态管理混乱，无法有效同步的问题统一维护管理应用状态;</li><li>某一状态只有一个可信数据来源（通常命名为 store，指状态容器）;</li><li>操作更新状态方式统一，并且可控（通常以 action 方式提供更新状态的途径）;</li><li>支持将 store 与 React 组件连接，如 react-redux，mobx- react;</li></ul><p><strong>（2）区别</strong> Redux 更多的是遵循 Flux 模式的一种实现，是一个 JavaScript 库，它关注点主要是以下几方面 ∶</p><ul><li>Action∶ 一个 JavaScript 对象，描述动作相关信息，主要包含 type 属性和 payload 属性 ∶</li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#abb2bf;">o type∶ action 类型; o payload∶ 负载数据;</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#b392f0;">o type∶ action 类型; o payload∶ 负载数据;</span></span>
<span class="line"><span style="color:#b392f0;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>Reducer∶ 定义应用状态如何响应不同动作（action），如何更新状态;</li><li>Store∶ 管理 action 和 reducer 及其关系的对象，主要提供以下功能 ∶</li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#abb2bf;">o 维护应用状态并支持访问状态(getState());</span></span>
<span class="line"><span style="color:#abb2bf;">o 支持监听action的分发，更新状态(dispatch(action));</span></span>
<span class="line"><span style="color:#abb2bf;">o 支持订阅store的变更(subscribe(listener));</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#b392f0;">o 维护应用状态并支持访问状态(getState());</span></span>
<span class="line"><span style="color:#b392f0;">o 支持监听action的分发，更新状态(dispatch(action));</span></span>
<span class="line"><span style="color:#b392f0;">o 支持订阅store的变更(subscribe(listener));</span></span>
<span class="line"><span style="color:#b392f0;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>异步流 ∶ 由于 Redux 所有对 store 状态的变更，都应该通过 action 触发，异步任务（通常都是业务或获取数据任务）也不例外，而为了不将业务或数据相关的任务混入 React 组件中，就需要使用其他框架配合管理异步任务流程，如 redux-thunk，redux-saga 等;</li></ul><p>Mobx 是一个透明函数响应式编程的状态管理库，它使得状态管理简单可伸缩 ∶</p><ul><li>Action∶ 定义改变状态的动作函数，包括如何变更状态;</li><li>Store∶ 集中管理模块状态（State）和动作(action)</li><li>Derivation（衍生）∶ 从应用状态中派生而出，且没有任何其他影响的数据</li></ul><p><strong>对比总结：</strong></p><ul><li>redux 将数据保存在单一的 store 中，mobx 将数据保存在分散的多个 store 中</li><li>redux 使用 plain object 保存数据，需要手动处理变化后的操作;mobx 适用 observable 保存数据，数据变化后自动处理响应的操作</li><li>redux 使用不可变状态，这意味着状态是只读的，不能直接去修改它，而是应该返回一个新的状态，同时使用纯函数;mobx 中的状态是可变的，可以直接对其进行修改</li><li>mobx 相对来说比较简单，在其中有很多的抽象，mobx 更多的使用面向对象的编程思维;redux 会比较复杂，因为其中的函数式编程思想掌握起来不是那么容易，同时需要借助一系列的中间件来处理异步和副作用</li><li>mobx 中有更多的抽象和封装，调试会比较困难，同时结果也难以预测;而 redux 提供能够进行时间回溯的开发工具，同时其纯函数以及更少的抽象，让调试变得更加的容易</li></ul><h3 id="redux-和-vuex-有什么区别-它们的共同思想" tabindex="-1">Redux 和 Vuex 有什么区别，它们的共同思想 <a class="header-anchor" href="#redux-和-vuex-有什么区别-它们的共同思想" aria-hidden="true">#</a></h3><p><strong>（1）Redux 和 Vuex 区别</strong></p><ul><li>Vuex 改进了 Redux 中的 Action 和 Reducer 函数，以 mutations 变化函数取代 Reducer，无需 switch，只需在对应的 mutation 函数里改变 state 值即可</li><li>Vuex 由于 Vue 自动重新渲染的特性，无需订阅重新渲染函数，只要生成新的 State 即可</li><li>Vuex 数据流的顺序是 ∶View 调用 store.commit 提交对应的请求到 Store 中对应的 mutation 函数-&gt;store 改变（vue 检测到数据变化自动渲染）</li></ul><p>通俗点理解就是，vuex 弱化 dispatch，通过 commit 进行 store 状态的一次更变；取消了 action 概念，不必传入特定的 action 形式进行指定变更；弱化 reducer，基于 commit 参数直接对数据进行转变，使得框架更加简易;</p><p><strong>（2）共同思想</strong></p><ul><li>单—的数据源</li><li>变化可以预测</li></ul><p>本质上 ∶ redux 与 vuex 都是对 mvvm 思想的服务，将数据从视图中抽离的一种方案。</p><h3 id="redux-中间件是怎么拿到-store-和-action-然后怎么处理" tabindex="-1">Redux 中间件是怎么拿到 store 和 action? 然后怎么处理? <a class="header-anchor" href="#redux-中间件是怎么拿到-store-和-action-然后怎么处理" aria-hidden="true">#</a></h3><p>redux 中间件本质就是一个函数柯里化。redux applyMiddleware Api 源码中每个 middleware 接受 2 个参数， Store 的 getState 函数和 dispatch 函数，分别获得 store 和 action，最终返回一个函数。该函数会被传入 next 的下一个 middleware 的 dispatch 方法，并返回一个接收 action 的新函数，这个函数可以直接调用 next（action），或者在其他需要的时刻调用，甚至根本不去调用它。调用链中最后一个 middleware 会接受真实的 store 的 dispatch 方法作为 next 参数，并借此结束调用链。所以，middleware 的函数签名是（{ getState，dispatch })=&gt; next =&gt; action。</p><h3 id="redux-中的-connect-有什么作用" tabindex="-1">Redux 中的 connect 有什么作用 <a class="header-anchor" href="#redux-中的-connect-有什么作用" aria-hidden="true">#</a></h3><p>connect 负责连接 React 和 Redux</p><p><strong>（1）获取 state</strong></p><p>connect 通过 context 获取 Provider 中的 store，通过<code>store.getState()</code> 获取整个 store tree 上所有 state</p><p><strong>（2）包装原组件</strong></p><p>将 state 和 action 通过 props 的方式传入到原组件内部 wrapWithConnect 返回—个 ReactComponent 对 象 Connect，Connect 重 新 render 外部传入的原组件 WrappedComponent ，并把 connect 中传入的 mapStateToProps，mapDispatchToProps 与组件上原有的 props 合并后，通过属性的方式传给 WrappedComponent</p><p><strong>（3）监听 store tree 变化</strong></p><p>connect 缓存了 store tree 中 state 的状态，通过当前 state 状态 和变更前 state 状态进行比较，从而确定是否调用 <code>this.setState()</code>方法触发 Connect 及其子组件的重新渲染</p>`,259)]))}const u=n(o,[["render",e]]);export{F as __pageData,u as default};
