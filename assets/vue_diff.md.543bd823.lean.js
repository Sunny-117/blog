import{_ as n,o as a,c as l,a as p}from"./app.f9cf8683.js";const o="/blog/assets/2023-02-01-14-07-17.1c3d137e.png",e="/blog/assets/2023-02-01-14-11-21.6ba7da11.png",t="/blog/assets/2023-02-01-14-11-32.f9856356.png",c="/blog/assets/2023-02-01-14-11-46.6b67dfa8.png",A=JSON.parse('{"title":"Vuejs diff 算法","description":"","frontmatter":{},"headers":[{"level":2,"title":"diff的时机","slug":"diff的时机","link":"#diff的时机","children":[]},{"level":2,"title":"_update函数在干什么","slug":"update函数在干什么","link":"#update函数在干什么","children":[{"level":3,"title":"不存在","slug":"不存在","link":"#不存在","children":[]},{"level":3,"title":"存在","slug":"存在","link":"#存在","children":[]}]},{"level":2,"title":"patch函数的对比流程","slug":"patch函数的对比流程","link":"#patch函数的对比流程","children":[]},{"level":2,"title":"详细流程：","slug":"详细流程","link":"#详细流程","children":[{"level":3,"title":"根节点比较","slug":"根节点比较","link":"#根节点比较","children":[]},{"level":3,"title":"「对比子节点」","slug":"「对比子节点」","link":"#「对比子节点」","children":[]}]},{"level":2,"title":"对开发的影响：","slug":"对开发的影响","link":"#对开发的影响","children":[{"level":3,"title":"加 key","slug":"加-key","link":"#加-key","children":[]},{"level":3,"title":"为什么不用 index 作为 key","slug":"为什么不用-index-作为-key","link":"#为什么不用-index-作为-key","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"注意：","slug":"注意","link":"#注意","children":[]},{"level":2,"title":"对比 Vue3","slug":"对比-vue3","link":"#对比-vue3","children":[]}],"relativePath":"vue/diff.md","lastUpdated":1740908463000}'),r={name:"vue/diff.md"};function B(y,s,i,F,d,u){return a(),l("div",null,s[0]||(s[0]=[p(`<h1 id="vuejs-diff-算法" tabindex="-1">Vuejs diff 算法 <a class="header-anchor" href="#vuejs-diff-算法" aria-hidden="true">#</a></h1><h2 id="diff的时机" tabindex="-1"><code>diff</code>的时机 <a class="header-anchor" href="#diff的时机" aria-hidden="true">#</a></h2><p>当组件创建时，以及依赖的属性或数据变化时，会运行一个函数，该函数会做两件事：</p><ul><li>运行<code>_render</code>生成一棵新的虚拟 dom 树（vnode tree）</li><li>运行<code>_update</code>，传入虚拟 dom 树的根节点，对新旧两棵树进行对比，最终完成对真实 dom 的更新</li></ul><p>核心代码如下：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// vue构造函数</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Vue</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// ... 其他代码</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">updateComponent</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">_update</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">_render</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">  };</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Watcher</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">updateComponent</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// ... 其他代码</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#6B737C;">// vue构造函数</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> Vue() {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// ... 其他代码</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">var</span><span style="color:#B392F0;"> updateComponent </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">._update(</span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">._render());</span></span>
<span class="line"><span style="color:#B392F0;">  };</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> Watcher(updateComponent);</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// ... 其他代码</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><code>diff</code>就发生在<code>_update</code>函数的运行过程中</p><h2 id="update函数在干什么" tabindex="-1"><code>_update</code>函数在干什么 <a class="header-anchor" href="#update函数在干什么" aria-hidden="true">#</a></h2><p><code>_update</code>函数接收到一个<code>vnode</code>参数，这就是<strong>新</strong>生成的虚拟 dom 树 同时，<code>_update</code>函数通过当前组件的<code>_vnode</code>属性，拿到<strong>旧</strong>的虚拟 dom 树 <code>_update</code>函数首先会给组件的<code>_vnode</code>属性重新赋值，让它指向新树</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">update</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">vnode</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// vnode:新</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// this._vnode:旧</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">oldVnode</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_vnode</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_vnode</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">vnode</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">//虚拟dom其实在这一步就已经更新了，所以对比的木得是更新真实DOM</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> update(vnode) {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// vnode:新</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// this._vnode:旧</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">var</span><span style="color:#B392F0;"> oldVnode </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">._vnode;</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">._vnode </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> vnode; </span><span style="color:#6B737C;">//虚拟dom其实在这一步就已经更新了，所以对比的木得是更新真实DOM</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><img src="`+o+`" alt=""></p><p>然后会判断旧树是否存在：</p><h3 id="不存在" tabindex="-1">不存在 <a class="header-anchor" href="#不存在" aria-hidden="true">#</a></h3><p>说明这是第一次加载组件，于是通过内部的<code>patch</code>函数，直接遍历新树，为每个节点生成真实 DOM，挂载到每个节点的<code>elm</code>属性上</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">update</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">vnode</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// vnode: 新</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// this._vnode: 旧</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">oldVnode</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_vnode</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_vnode</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">vnode</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 对比的目的：更新真实dom</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">oldVnode</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">__patch__</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$el</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">vnode</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">//el：元素位置</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> update(vnode) {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// vnode: 新</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// this._vnode: 旧</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">var</span><span style="color:#B392F0;"> oldVnode </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">._vnode;</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">._vnode </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> vnode;</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// 对比的目的：更新真实dom</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">oldVnode) {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.__patch__(</span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.$el</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> vnode); </span><span style="color:#6B737C;">//el：元素位置</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><img src="`+e+'" alt=""></p><h3 id="存在" tabindex="-1">存在 <a class="header-anchor" href="#存在" aria-hidden="true">#</a></h3><p>说明之前已经渲染过该组件，于是通过内部的<code>patch</code>函数，对新旧两棵树进行对比，以达到下面两个目标：</p><ul><li><strong>完成对所有真实 dom 的最小化处理</strong></li><li><strong>让新树的节点对应合适的真实 dom</strong></li></ul><p><img src="'+t+`" alt=""></p><h2 id="patch函数的对比流程" tabindex="-1"><code>patch</code>函数的对比流程 <a class="header-anchor" href="#patch函数的对比流程" aria-hidden="true">#</a></h2><p>术语解释：</p><ol><li>「<strong>相同</strong>」：是指两个虚拟节点的标签类型、<code>key</code>值均相同，但<code>input</code>元素还要看<code>type</code>属性</li></ol><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * 什么叫「相同」是指两个虚拟节点的标签类型、\`key\`值均相同，但\`input\`元素还要看\`type\`属性</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * &lt;h1&gt;asdfdf&lt;/h1&gt;        &lt;h1&gt;asdfasfdf&lt;/h1&gt;    相同</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * &lt;h1 key=&quot;1&quot;&gt;adsfasdf&lt;/h1&gt;   &lt;h1 key=&quot;2&quot;&gt;fdgdf&lt;/h1&gt; 不同</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * &lt;input type=&quot;text&quot; /&gt;    &lt;input type=&quot;radio&quot; /&gt; 不同</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * abc        bcd  相同</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *  tag: undefined,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *  key: undefined,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *  text: &quot;abc&quot;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *  tag: undefined,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *  key: undefined,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *  text: &quot;bcd&quot;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 这里的判断相同使用到的是sameVnode函数：源码</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">sameVnode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">a</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">b</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;&amp;</span></span>
<span class="line"><span style="color:#ABB2BF;">    ((</span><span style="color:#E5C07B;">a</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">tag</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">b</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">tag</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;&amp;</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">a</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">isComment</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">b</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">isComment</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;&amp;</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#61AFEF;">isDef</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">a</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">isDef</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">b</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">&amp;&amp;</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#61AFEF;">sameInputType</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">)) </span><span style="color:#56B6C2;">||</span></span>
<span class="line"><span style="color:#ABB2BF;">      (</span><span style="color:#61AFEF;">isTrue</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">a</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">isAsyncPlaceholder</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">&amp;&amp;</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">a</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">asyncFactory</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">b</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">asyncFactory</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;&amp;</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#61AFEF;">isUndef</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">b</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">asyncFactory</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">)))</span></span>
<span class="line"><span style="color:#ABB2BF;">  );</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#6B737C;">/**</span></span>
<span class="line"><span style="color:#6B737C;"> * 什么叫「相同」是指两个虚拟节点的标签类型、\`key\`值均相同，但\`input\`元素还要看\`type\`属性</span></span>
<span class="line"><span style="color:#6B737C;"> *</span></span>
<span class="line"><span style="color:#6B737C;"> * &lt;h1&gt;asdfdf&lt;/h1&gt;        &lt;h1&gt;asdfasfdf&lt;/h1&gt;    相同</span></span>
<span class="line"><span style="color:#6B737C;"> *</span></span>
<span class="line"><span style="color:#6B737C;"> * &lt;h1 key=&quot;1&quot;&gt;adsfasdf&lt;/h1&gt;   &lt;h1 key=&quot;2&quot;&gt;fdgdf&lt;/h1&gt; 不同</span></span>
<span class="line"><span style="color:#6B737C;"> *</span></span>
<span class="line"><span style="color:#6B737C;"> * &lt;input type=&quot;text&quot; /&gt;    &lt;input type=&quot;radio&quot; /&gt; 不同</span></span>
<span class="line"><span style="color:#6B737C;"> *</span></span>
<span class="line"><span style="color:#6B737C;"> * abc        bcd  相同</span></span>
<span class="line"><span style="color:#6B737C;"> *</span></span>
<span class="line"><span style="color:#6B737C;"> * {</span></span>
<span class="line"><span style="color:#6B737C;"> *  tag: undefined,</span></span>
<span class="line"><span style="color:#6B737C;"> *  key: undefined,</span></span>
<span class="line"><span style="color:#6B737C;"> *  text: &quot;abc&quot;</span></span>
<span class="line"><span style="color:#6B737C;"> * }</span></span>
<span class="line"><span style="color:#6B737C;"> *</span></span>
<span class="line"><span style="color:#6B737C;"> * {</span></span>
<span class="line"><span style="color:#6B737C;"> *  tag: undefined,</span></span>
<span class="line"><span style="color:#6B737C;"> *  key: undefined,</span></span>
<span class="line"><span style="color:#6B737C;"> *  text: &quot;bcd&quot;</span></span>
<span class="line"><span style="color:#6B737C;"> * }</span></span>
<span class="line"><span style="color:#6B737C;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 这里的判断相同使用到的是sameVnode函数：源码</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> sameVnode(a</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> b) {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> (</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">a</span><span style="color:#B392F0;">.key </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">b</span><span style="color:#B392F0;">.key </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#B392F0;">    ((</span><span style="color:#79B8FF;">a</span><span style="color:#B392F0;">.tag </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">b</span><span style="color:#B392F0;">.tag </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#79B8FF;">a</span><span style="color:#B392F0;">.isComment </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">b</span><span style="color:#B392F0;">.isComment </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#B392F0;">      isDef(</span><span style="color:#79B8FF;">a</span><span style="color:#B392F0;">.data) </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> isDef(</span><span style="color:#79B8FF;">b</span><span style="color:#B392F0;">.data) </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#B392F0;">      sameInputType(a</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> b)) </span><span style="color:#F97583;">||</span></span>
<span class="line"><span style="color:#B392F0;">      (isTrue(</span><span style="color:#79B8FF;">a</span><span style="color:#B392F0;">.isAsyncPlaceholder) </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#79B8FF;">a</span><span style="color:#B392F0;">.asyncFactory </span><span style="color:#F97583;">===</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">b</span><span style="color:#B392F0;">.asyncFactory </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#B392F0;">        isUndef(</span><span style="color:#79B8FF;">b</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">asyncFactory</span><span style="color:#B392F0;">.error)))</span></span>
<span class="line"><span style="color:#B392F0;">  );</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><ol start="2"><li>「<strong>新建元素</strong>」：是指根据一个虚拟节点提供的信息，创建一个真实 dom 元素，同时挂载到虚拟节点的<code>elm</code>属性上</li><li>「<strong>销毁元素</strong>」：是指：<code>vnode.elm.remove()</code></li><li>「<strong>更新</strong>」：是指对两个虚拟节点进行对比更新，它<strong>仅发生</strong>在两个虚拟节点「相同」的情况下。具体过程稍后描述。</li><li>「<strong>对比子节点</strong>」：是指对两个虚拟节点的子节点进行对比，具体过程稍后描述(<strong>深度优先</strong>)</li></ol><h2 id="详细流程" tabindex="-1">详细流程： <a class="header-anchor" href="#详细流程" aria-hidden="true">#</a></h2><h3 id="根节点比较" tabindex="-1"><strong>根节点比较</strong> <a class="header-anchor" href="#根节点比较" aria-hidden="true">#</a></h3><p><img src="`+c+`" alt=""></p><p><code>patch</code>函数首先对根节点进行比较</p><p>如果两个节点：</p><ul><li>「相同」，进入「更新」流程 <ol><li>将旧节点的真实 dom 赋值到新节点：<code>newVnode.elm = oldVnode.elm</code></li><li><strong>对比新节点和旧节点的属性</strong>，有变化的更新到真实 dom 中</li><li>当前两个节点处理完毕，开始「对比子节点」</li></ol></li><li>不「相同」 （<strong>直接看成旧树不存在</strong>） <ol><li>新节点<strong>递归</strong>「新建元素」</li><li>旧节点「销毁元素」</li></ol></li></ul><h3 id="「对比子节点」" tabindex="-1"><strong>「对比子节点」</strong> <a class="header-anchor" href="#「对比子节点」" aria-hidden="true">#</a></h3><p>在「对比子节点」时，vue 一切的出发点，都是为了：</p><ul><li><strong>尽量啥也别做</strong></li><li>不行的话，<strong>尽量仅改动元素属性</strong></li><li>还不行的话，尽量移动元素，而不是删除和创建元素</li><li>还不行的话，删除和创建元素</li></ul><blockquote><p>流程</p></blockquote><ul><li><p>对比旧树和新树的头指针，一样就进入更新流程(递归)新旧相连，对比有没有属性变化，对比子节点(递归)</p></li><li><p>两个头指针往后移动，如果不一样，就比较尾指针，尾指针一样，<strong>递归</strong>。</p></li><li><p>两个尾指针往前移动，再次比较头指针，还是不一样，尾指针也不一样，就比较旧树的头和新树的尾，一样的话，连接，复用真实都 dom，更新属性，再把真实 dom 的位置移动到旧树的尾指针后</p></li><li><p>新指针的尾指针往前移动，旧指针的头指针往后移动，<strong>头头不同，尾尾不同，两边的头尾不同，则以新树的头为基准，看一下在旧树里面存不存在，存在则复用，真实 dom 的位置调到前面。</strong></p></li><li><p>继续，头头不同，尾尾不同，头尾相同，同理交换，交换后把真实 dom 移动到头指针前面。</p></li><li><p>继续，都不相同了，找 8 在旧树里面存不存在，不存在就新建。继续移动，头指针&gt;尾指针，循环结束。</p></li><li><p><strong>销毁</strong>旧树剩下的对应的<strong>真实 dom</strong>。</p></li></ul><h2 id="对开发的影响" tabindex="-1">对开发的影响： <a class="header-anchor" href="#对开发的影响" aria-hidden="true">#</a></h2><h3 id="加-key" tabindex="-1">加 key <a class="header-anchor" href="#加-key" aria-hidden="true">#</a></h3><blockquote><p>为什么要 key？如果不加，会把所有子元素直接改动，浪费效率；如果加上，变成了指针，dom 移动(没有改动真实 dom 内部)，对真实 dom 几乎没有改动</p></blockquote><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;app&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">style</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;width: 500px; margin: 0 auto; line-height: 3&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">href</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">@click.prevent</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;accoutLogin=true&quot;</span><span style="color:#ABB2BF;">&gt;账号登录&lt;/</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">span</span><span style="color:#ABB2BF;">&gt;|&lt;/</span><span style="color:#E06C75;">span</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">href</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">@click.prevent</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;accoutLogin=false&quot;</span><span style="color:#ABB2BF;">&gt;手机号登录&lt;/</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">&lt;!-- 根据accoutLogin是否显示，如果没有key，默认key:undefined,新旧树的div没变，进入里面对比，里面也相同，会导致文本框里的内容不消失 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">v-if</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;accoutLogin&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">key</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;1&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">label</span><span style="color:#ABB2BF;">&gt;账号&lt;/</span><span style="color:#E06C75;">label</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">type</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;text&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">v-else</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">key</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;2&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">label</span><span style="color:#ABB2BF;">&gt;手机号&lt;/</span><span style="color:#E06C75;">label</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">type</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;text&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#B392F0;">&lt;</span><span style="color:#FFAB70;">div</span><span style="color:#B392F0;"> id</span><span style="color:#F97583;">=</span><span style="color:#FFAB70;">&quot;app&quot;</span><span style="color:#B392F0;"> style</span><span style="color:#F97583;">=</span><span style="color:#FFAB70;">&quot;width: 500px; margin: 0 auto; line-height: 3&quot;</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">  &lt;</span><span style="color:#FFAB70;">div</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">    &lt;</span><span style="color:#FFAB70;">a</span><span style="color:#B392F0;"> href</span><span style="color:#F97583;">=</span><span style="color:#FFAB70;">&quot;&quot;</span><span style="color:#B392F0;"> @click.prevent</span><span style="color:#F97583;">=</span><span style="color:#FFAB70;">&quot;accoutLogin=true&quot;</span><span style="color:#B392F0;">&gt;账号登录&lt;/</span><span style="color:#FFAB70;">a</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">    &lt;</span><span style="color:#FFAB70;">span</span><span style="color:#B392F0;">&gt;|&lt;/</span><span style="color:#FFAB70;">span</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">    &lt;</span><span style="color:#FFAB70;">a</span><span style="color:#B392F0;"> href</span><span style="color:#F97583;">=</span><span style="color:#FFAB70;">&quot;&quot;</span><span style="color:#B392F0;"> @click.prevent</span><span style="color:#F97583;">=</span><span style="color:#FFAB70;">&quot;accoutLogin=false&quot;</span><span style="color:#B392F0;">&gt;手机号登录&lt;/</span><span style="color:#FFAB70;">a</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">  &lt;/</span><span style="color:#FFAB70;">div</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">&lt;!-- 根据accoutLogin是否显示，如果没有key，默认key:undefined,新旧树的div没变，进入里面对比，里面也相同，会导致文本框里的内容不消失 --&gt;</span></span>
<span class="line"><span style="color:#B392F0;">  &lt;</span><span style="color:#FFAB70;">div</span><span style="color:#B392F0;"> v-if</span><span style="color:#F97583;">=</span><span style="color:#FFAB70;">&quot;accoutLogin&quot;</span><span style="color:#B392F0;"> key</span><span style="color:#F97583;">=</span><span style="color:#FFAB70;">&quot;1&quot;</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">    &lt;</span><span style="color:#FFAB70;">label</span><span style="color:#B392F0;">&gt;账号&lt;/</span><span style="color:#FFAB70;">label</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">    &lt;</span><span style="color:#FFAB70;">input</span><span style="color:#B392F0;"> type</span><span style="color:#F97583;">=</span><span style="color:#FFAB70;">&quot;text&quot;</span><span style="color:#B392F0;"> /&gt;</span></span>
<span class="line"><span style="color:#B392F0;">  &lt;/</span><span style="color:#FFAB70;">div</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">  &lt;</span><span style="color:#FFAB70;">div</span><span style="color:#B392F0;"> v-else key</span><span style="color:#F97583;">=</span><span style="color:#FFAB70;">&quot;2&quot;</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">    &lt;</span><span style="color:#FFAB70;">label</span><span style="color:#B392F0;">&gt;手机号&lt;/</span><span style="color:#FFAB70;">label</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">    &lt;</span><span style="color:#FFAB70;">input</span><span style="color:#B392F0;"> type</span><span style="color:#F97583;">=</span><span style="color:#FFAB70;">&quot;text&quot;</span><span style="color:#B392F0;"> /&gt;</span></span>
<span class="line"><span style="color:#B392F0;">  &lt;/</span><span style="color:#FFAB70;">div</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">&lt;/</span><span style="color:#FFAB70;">div</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="为什么不用-index-作为-key" tabindex="-1">为什么不用 index 作为 key <a class="header-anchor" href="#为什么不用-index-作为-key" aria-hidden="true">#</a></h3><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;app&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">ul</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">      &lt;</span><span style="color:#E06C75;">li</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">v-for</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;item in list&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">:key</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;item.index&quot;</span><span style="color:#ABB2BF;">&gt;{{ item }}&lt;/</span><span style="color:#E06C75;">li</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;/</span><span style="color:#E06C75;">ul</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">@click</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;add&quot;</span><span style="color:#ABB2BF;">&gt;添加&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">setup</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">ref</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 我们发现添加操作导致的整个列表的重新渲染，按道理来说，Diff 算法会复用后面的三项，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 因为它们只是位置发生了变化，内容并没有改变。但是我们回过头来发现，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 我们在前面添加了一项，导致后面三项的 index 变化，从而导致 key 值发生变化。Diff 算法失效了</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">list</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">ref</span><span style="color:#ABB2BF;">([</span><span style="color:#98C379;">&quot;html&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;css&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;js&quot;</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">list</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">value</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unshift</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;阳阳羊&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#B392F0;">&lt;</span><span style="color:#FFAB70;">template</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">  &lt;</span><span style="color:#FFAB70;">div</span><span style="color:#B392F0;"> id</span><span style="color:#F97583;">=</span><span style="color:#FFAB70;">&quot;app&quot;</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">    &lt;</span><span style="color:#FFAB70;">ul</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">      &lt;</span><span style="color:#FFAB70;">li</span><span style="color:#B392F0;"> v-for</span><span style="color:#F97583;">=</span><span style="color:#FFAB70;">&quot;item in list&quot;</span><span style="color:#B392F0;"> :key</span><span style="color:#F97583;">=</span><span style="color:#FFAB70;">&quot;item.index&quot;</span><span style="color:#B392F0;">&gt;{{ item }}&lt;/</span><span style="color:#FFAB70;">li</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">    &lt;/</span><span style="color:#FFAB70;">ul</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">    &lt;</span><span style="color:#FFAB70;">button</span><span style="color:#B392F0;"> @click</span><span style="color:#F97583;">=</span><span style="color:#FFAB70;">&quot;add&quot;</span><span style="color:#B392F0;">&gt;添加&lt;/</span><span style="color:#FFAB70;">button</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">  &lt;/</span><span style="color:#FFAB70;">div</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">&lt;/</span><span style="color:#FFAB70;">template</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">&lt;</span><span style="color:#FFAB70;">script</span><span style="color:#B392F0;"> setup&gt;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> { ref } </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;vue&quot;</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#6B737C;">// 我们发现添加操作导致的整个列表的重新渲染，按道理来说，Diff 算法会复用后面的三项，</span></span>
<span class="line"><span style="color:#6B737C;">// 因为它们只是位置发生了变化，内容并没有改变。但是我们回过头来发现，</span></span>
<span class="line"><span style="color:#6B737C;">// 我们在前面添加了一项，导致后面三项的 index 变化，从而导致 key 值发生变化。Diff 算法失效了</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">list</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> ref([</span><span style="color:#FFAB70;">&quot;html&quot;</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;css&quot;</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;js&quot;</span><span style="color:#B392F0;">]);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> add </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">list</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">value</span><span style="color:#B392F0;">.unshift(</span><span style="color:#FFAB70;">&quot;阳阳羊&quot;</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#B392F0;">};</span></span>
<span class="line"><span style="color:#B392F0;">&lt;/</span><span style="color:#FFAB70;">script</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>解决：只要不是索引即可，比如，直接使用 item。这样，key 就是永远不变的，更新前后都是一样的，并且又由于节点的内容本来就没变，所以 Diff 算法完美生效，只需将新节点添加到真实 DOM 就行了。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-hidden="true">#</a></h2><p>当组件创建和更新时，vue 均会执行内部的 update 函数，该函数使用 render 函数生成的虚拟 dom 树，将新旧两树进行对比，找到差异点，最终更新到真实 dom</p><p>对比差异的过程叫 diff，vue 在内部通过一个叫 patch 的函数完成该过程</p><p>在对比时，vue 采用<strong>深度优先、同层比较</strong>的方式进行比对。</p><p>在判断两个节点是否相同时，vue 是通过<strong>虚拟节点的 key 和 tag</strong>来进行判断的</p><p><strong>具体来说</strong></p><ul><li><p>首先对根节点进行对比，如果相同则将旧节点关联的真实 dom 的<strong>引用</strong>挂到新节点上，然后根据需要更新属性到真实 dom</p></li><li><p>然后再对比其子节点数组；如果不相同，则按照新节点的信息递归创建所有真实 dom，同时挂到对应虚拟节点上，然后移除掉旧的 dom。</p></li><li><p>在对比其子节点数组时，vue 对每个子节点数组使用了两个指针，分别指向头尾，然后不断向中间靠拢来进行对比，这样做的目的是<strong>尽量复用真实 dom，尽量少的销毁和创建真实 dom</strong>。如果发现相同，则进入和根节点一样的对比流程，如果发现不同，则移动真实 dom 到合适的位置。</p></li></ul><p>这样一直递归的遍历下去，直到整棵树完成对比。</p><h2 id="注意" tabindex="-1">注意： <a class="header-anchor" href="#注意" aria-hidden="true">#</a></h2><ul><li><strong>在给 <em>vue</em> 中的元素设置 <em>key</em> 值时可以使用 <em>Math</em> 的 <em>random</em> 方法么？</strong></li></ul><blockquote><p><em>random</em> 是生成随机数，有一定概率多个 <em>item</em> 会生成相同的值，不能保证唯一。</p><p>如果是根据数据来生成 <em>item</em>，数据具有 <em>id</em> 属性，那么就可以使用 <em>id</em> 来作为 <em>key</em>。</p><p>如果不是根据数据生成 <em>item</em>，那么最好的方式就是使用时间戳来作为 <em>key</em>。或者使用诸如 <em>uuid</em> 之类的库来生成唯一的 <em>id</em>。</p></blockquote><ul><li>为什么不建议用 index 作为 key?</li></ul><blockquote><p>使用 index 作为 key 和没写基本上没区别，因为不管数组的顺序怎么颠倒，index 都是 0, 1, 2...这样排列， 导致 Vue 会复用错误的旧子节点，做很多额外的工作。</p></blockquote><h2 id="对比-vue3" tabindex="-1">对比 Vue3 <a class="header-anchor" href="#对比-vue3" aria-hidden="true">#</a></h2><blockquote><p>简单来说，<em>diff</em> 算法有以下过程</p><ul><li>同级比较，再比较子节点</li><li>先判断一方有子节点一方没有子节点的情况(如果新的 <em>children</em> 没有子节点，将旧的子节点移除)</li><li>比较都有子节点的情况(核心 <em>diff</em>)</li><li>递归比较子节点</li></ul></blockquote><blockquote><p>正常 <em>Diff</em> 两个树的时间复杂度是 <em>O(n^3)</em>，但实际情况下我们很少会进行跨层级的移动 <em>DOM</em>，所以 <em>Vue</em> 将 <em>Diff</em> 进行了优化，从<em>O(n^3) -&gt; O(n)</em>，只有当新旧 <em>children</em> 都为多个子节点时才需要用核心的 <em>Diff</em> 算法进行同层级比较。</p><p><em>Vue2</em> 的核心 <em>Diff</em> 算法采用了双端比较的算法，同时从新旧 <em>children</em> 的两端开始进行比较，借助 <em>key</em> 值找到可复用的节点，再进行相关操作。相比 <em>React</em> 的 <em>Diff</em> 算法，同样情况下可以减少移动节点次数，减少不必要的性能损耗，更加的优雅。</p><p><em>Vue3.x</em> 借鉴了 <em>ivi</em> 算法和 <em>inferno</em> 算法</p><p>在创建 <em>VNode</em> 时就确定其类型，以及在 <em>mount/patch</em> 的过程中采用位运算来判断一个 <em>VNode</em> 的类型，在这个基础之上再配合核心的 <em>Diff</em> 算法，使得性能上较 <em>Vue2.x</em> 有了提升。该算法中还运用了动态规划的思想求解最长递归子序列。</p></blockquote>`,59)]))}const b=n(r,[["render",B]]);export{A as __pageData,b as default};
