import{_ as n,o as a,c as l,a as p}from"./app.f9cf8683.js";const i=JSON.parse('{"title":"禁止别人调试自己的前端页面代码","description":"","frontmatter":{},"headers":[{"level":2,"title":"🎈 为啥要禁止？","slug":"🎈-为啥要禁止","link":"#🎈-为啥要禁止","children":[]},{"level":2,"title":"🎈 无限 debugger","slug":"🎈-无限-debugger","link":"#🎈-无限-debugger","children":[]},{"level":2,"title":"🎈 无限 debugger 的对策","slug":"🎈-无限-debugger-的对策","link":"#🎈-无限-debugger-的对策","children":[]},{"level":2,"title":"🎈 禁止断点的对策","slug":"🎈-禁止断点的对策","link":"#🎈-禁止断点的对策","children":[]},{"level":2,"title":"🎈 忽略执行的代码","slug":"🎈-忽略执行的代码","link":"#🎈-忽略执行的代码","children":[]},{"level":2,"title":"🎈 忽略执行代码的对策","slug":"🎈-忽略执行代码的对策","link":"#🎈-忽略执行代码的对策","children":[]},{"level":2,"title":"🎈 终极增强防调试代码","slug":"🎈-终极增强防调试代码","link":"#🎈-终极增强防调试代码","children":[]}],"relativePath":"fragment/disable-debugger.md","lastUpdated":1740908463000}'),o={name:"fragment/disable-debugger.md"};function e(c,s,r,B,t,y){return a(),l("div",null,s[0]||(s[0]=[p(`<h1 id="禁止别人调试自己的前端页面代码" tabindex="-1">禁止别人调试自己的前端页面代码 <a class="header-anchor" href="#禁止别人调试自己的前端页面代码" aria-hidden="true">#</a></h1><h2 id="🎈-为啥要禁止" tabindex="-1">🎈 为啥要禁止？ <a class="header-anchor" href="#🎈-为啥要禁止" aria-hidden="true">#</a></h2><ul><li>由于前端页面会调用很多接口，有些接口会被别人爬虫分析， 破解后获取数据</li><li>为了 杜绝 这种情况，最简单的方法就是禁止人家调试自己的前端代码</li></ul><h2 id="🎈-无限-debugger" tabindex="-1">🎈 无限 debugger <a class="header-anchor" href="#🎈-无限-debugger" aria-hidden="true">#</a></h2><ul><li>前端页面防止调试的方法主要是通过不断 debugger 来疯狂输出断点，因为 debugger 在控制台被打开的时候就会执行</li><li>由于程序被 debugger 阻止，所以无法进行断点调试，所以网页的请求也是看不到的</li><li>基础代码如下：</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * 基础禁止调试代码</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">ban</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">setInterval</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">debugger</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }, </span><span style="color:#D19A66;">50</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">ban</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">) {}</span></span>
<span class="line"><span style="color:#ABB2BF;">})();</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#6B737C;">/**</span></span>
<span class="line"><span style="color:#6B737C;"> * 基础禁止调试代码</span></span>
<span class="line"><span style="color:#6B737C;"> */</span></span>
<span class="line"><span style="color:#B392F0;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> ban() {</span></span>
<span class="line"><span style="color:#B392F0;">    setInterval(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">debugger</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">    }</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">50</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">try</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    ban();</span></span>
<span class="line"><span style="color:#B392F0;">  } </span><span style="color:#F97583;">catch</span><span style="color:#B392F0;"> (err) {}</span></span>
<span class="line"><span style="color:#B392F0;">})();</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="🎈-无限-debugger-的对策" tabindex="-1">🎈 无限 debugger 的对策 <a class="header-anchor" href="#🎈-无限-debugger-的对策" aria-hidden="true">#</a></h2><ul><li>如果仅仅是加上面那么简单的代码，对于一些技术人员而言作用不大</li><li>可以通过控制台中的 Deactivate breakpoints 按钮或者使用快捷键 Ctrl + F8 关闭无限 debugger</li><li>这种方式虽然能去掉碍眼的 debugger ，但是无法通过左侧的行号添加 breakpoint</li></ul><h2 id="🎈-禁止断点的对策" tabindex="-1">🎈 禁止断点的对策 <a class="header-anchor" href="#🎈-禁止断点的对策" aria-hidden="true">#</a></h2><ul><li>如果将 setInterval 中的代码写在一行，就能禁止用户断点，即使添加 logpoint 为 false 也无用</li><li>当然即使有些人想到用左下角的格式化代码，将其变成多行也是没用的</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">ban</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">setInterval</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">debugger</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }, </span><span style="color:#D19A66;">50</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">ban</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">) {}</span></span>
<span class="line"><span style="color:#ABB2BF;">})();</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#B392F0;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> ban() {</span></span>
<span class="line"><span style="color:#B392F0;">    setInterval(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">debugger</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">    }</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">50</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">try</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    ban();</span></span>
<span class="line"><span style="color:#B392F0;">  } </span><span style="color:#F97583;">catch</span><span style="color:#B392F0;"> (err) {}</span></span>
<span class="line"><span style="color:#B392F0;">})();</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="🎈-忽略执行的代码" tabindex="-1">🎈 忽略执行的代码 <a class="header-anchor" href="#🎈-忽略执行的代码" aria-hidden="true">#</a></h2><ul><li>通过添加 add script ignore list 需要忽略执行代码行或文件</li><li>也可以达到禁止无限 debugger</li></ul><h2 id="🎈-忽略执行代码的对策" tabindex="-1">🎈 忽略执行代码的对策 <a class="header-anchor" href="#🎈-忽略执行代码的对策" aria-hidden="true">#</a></h2><ul><li>那如何针对上面操作的恶意用户呢</li><li>可以通过将 debugger 改写成 Function(&quot;debugger&quot;)(); 的形式来应对</li><li>Function 构造器生成的 debugger 会在每一次执行时开启一个临时 js 文件</li><li>当然使用的时候，为了更加的安全，最好使用加密后的脚本</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 加密前</span></span>
<span class="line"><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">ban</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">setInterval</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#61AFEF;">Function</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;debugger&quot;</span><span style="color:#ABB2BF;">)();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }, </span><span style="color:#D19A66;">50</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">ban</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">) {}</span></span>
<span class="line"><span style="color:#ABB2BF;">})();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 加密后</span></span>
<span class="line"><span style="color:#61AFEF;">eval</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">  (</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">c</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">g</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">d</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">d</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">String</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">replace</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">/</span><span style="color:#C678DD;">^</span><span style="color:#E06C75;">/</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">String</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (; </span><span style="color:#E06C75;">a</span><span style="color:#56B6C2;">--</span><span style="color:#ABB2BF;">; ) </span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">f</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">f</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">        },</span></span>
<span class="line"><span style="color:#ABB2BF;">      ];</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#61AFEF;">d</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;w+&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">      };</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (; </span><span style="color:#E06C75;">a</span><span style="color:#56B6C2;">--</span><span style="color:#ABB2BF;">; )</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">c</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">c</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">replace</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">RegExp</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;</span><span style="color:#56B6C2;">\\b</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">d</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;</span><span style="color:#56B6C2;">\\b</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;g&quot;</span><span style="color:#ABB2BF;">), </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">]));</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">c</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  })(</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#98C379;">&#39;(()=&gt;{1 0(){2(()=&gt;{3(&quot;4&quot;)()},5)}6{0()}7(8){}})();&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#D19A66;">9</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#D19A66;">9</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#98C379;">&quot;block function setInterval Function debugger 50 try catch err&quot;</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">split</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot; &quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    {}</span></span>
<span class="line"><span style="color:#ABB2BF;">  )</span></span>
<span class="line"><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#6B737C;">// 加密前</span></span>
<span class="line"><span style="color:#B392F0;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> ban() {</span></span>
<span class="line"><span style="color:#B392F0;">    setInterval(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">      Function(</span><span style="color:#FFAB70;">&quot;debugger&quot;</span><span style="color:#B392F0;">)();</span></span>
<span class="line"><span style="color:#B392F0;">    }</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">50</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">try</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    ban();</span></span>
<span class="line"><span style="color:#B392F0;">  } </span><span style="color:#F97583;">catch</span><span style="color:#B392F0;"> (err) {}</span></span>
<span class="line"><span style="color:#B392F0;">})();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 加密后</span></span>
<span class="line"><span style="color:#B392F0;">eval(</span></span>
<span class="line"><span style="color:#B392F0;">  (</span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> (c</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> g</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> a</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> b</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> d</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> e) {</span></span>
<span class="line"><span style="color:#B392F0;">    d </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> String;</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#F97583;">!</span><span style="color:#FFAB70;">&quot;&quot;</span><span style="color:#B392F0;">.replace(</span><span style="color:#FFAB70;">/</span><span style="color:#F97583;">^</span><span style="color:#FFAB70;">/</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> String)) {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">for</span><span style="color:#B392F0;"> (; a</span><span style="color:#F97583;">--</span><span style="color:#B392F0;">; ) e[a] </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> b[a] </span><span style="color:#F97583;">||</span><span style="color:#B392F0;"> a;</span></span>
<span class="line"><span style="color:#B392F0;">      b </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> [</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> (f) {</span></span>
<span class="line"><span style="color:#B392F0;">          </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> e[f];</span></span>
<span class="line"><span style="color:#B392F0;">        }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">      ];</span></span>
<span class="line"><span style="color:#B392F0;">      d </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> () {</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;w+&quot;</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">      };</span></span>
<span class="line"><span style="color:#B392F0;">      a </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">1</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">for</span><span style="color:#B392F0;"> (; a</span><span style="color:#F97583;">--</span><span style="color:#B392F0;">; )</span></span>
<span class="line"><span style="color:#B392F0;">      b[a] </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#B392F0;"> (c </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">c</span><span style="color:#B392F0;">.replace(</span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> RegExp(</span><span style="color:#FFAB70;">&quot;\\b&quot;</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">+</span><span style="color:#B392F0;"> d(a) </span><span style="color:#F97583;">+</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;\\b&quot;</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;g&quot;</span><span style="color:#B392F0;">)</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> b[a]));</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> c;</span></span>
<span class="line"><span style="color:#B392F0;">  })(</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#FFAB70;">&#39;(()=&gt;{1 0(){2(()=&gt;{3(&quot;4&quot;)()},5)}6{0()}7(8){}})();&#39;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F8F8F8;">9</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F8F8F8;">9</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#FFAB70;">&quot;block function setInterval Function debugger 50 try catch err&quot;</span><span style="color:#B392F0;">.split(</span><span style="color:#FFAB70;">&quot; &quot;</span><span style="color:#B392F0;">)</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F8F8F8;">0</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    {}</span></span>
<span class="line"><span style="color:#B392F0;">  )</span></span>
<span class="line"><span style="color:#B392F0;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div><h2 id="🎈-终极增强防调试代码" tabindex="-1">🎈 终极增强防调试代码 <a class="header-anchor" href="#🎈-终极增强防调试代码" aria-hidden="true">#</a></h2><ul><li>为了让自己写出来的代码更加的晦涩难懂，需要对上面的代码再优化一下</li><li>将 <code>Function(&#39;debugger&#39;).call()</code> 改成 <code>(function(){return false;})[&#39;constructor&#39;](&#39;debugger&#39;)[&#39;call&#39;]()</code>;</li><li>并且添加条件，当窗口外部宽高和内部宽高的差值大于一定的值 ，我把 body 里的内容换成指定内容</li><li>当然使用的时候，为了更加的安全，最好加密后再使用</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">block</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">outerHeight</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">innerHeight</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">200</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">||</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">outerWidth</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">innerWidth</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">200</span></span>
<span class="line"><span style="color:#ABB2BF;">    ) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">body</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">innerHTML</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;检测到非法调试,请关闭后刷新重试!&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">setInterval</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">      (</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">      })</span></span>
<span class="line"><span style="color:#ABB2BF;">        [</span><span style="color:#98C379;">&quot;constructor&quot;</span><span style="color:#ABB2BF;">](</span><span style="color:#98C379;">&quot;debugger&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        [</span><span style="color:#98C379;">&quot;call&quot;</span><span style="color:#ABB2BF;">]();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }, </span><span style="color:#D19A66;">50</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">block</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">) {}</span></span>
<span class="line"><span style="color:#ABB2BF;">})();</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#B392F0;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> block() {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#79B8FF;">window</span><span style="color:#B392F0;">.outerHeight </span><span style="color:#F97583;">-</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">window</span><span style="color:#B392F0;">.innerHeight </span><span style="color:#F97583;">&gt;</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">200</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">||</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#79B8FF;">window</span><span style="color:#B392F0;">.outerWidth </span><span style="color:#F97583;">-</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">window</span><span style="color:#B392F0;">.innerWidth </span><span style="color:#F97583;">&gt;</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">200</span></span>
<span class="line"><span style="color:#B392F0;">    ) {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#79B8FF;">document</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">body</span><span style="color:#B392F0;">.innerHTML </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;检测到非法调试,请关闭后刷新重试!&quot;</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"><span style="color:#B392F0;">    setInterval(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">      (</span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> () {</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">false</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">      })</span></span>
<span class="line"><span style="color:#B392F0;">        [</span><span style="color:#FFAB70;">&quot;constructor&quot;</span><span style="color:#B392F0;">](</span><span style="color:#FFAB70;">&quot;debugger&quot;</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#B392F0;">        [</span><span style="color:#FFAB70;">&quot;call&quot;</span><span style="color:#B392F0;">]();</span></span>
<span class="line"><span style="color:#B392F0;">    }</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">50</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">try</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    block();</span></span>
<span class="line"><span style="color:#B392F0;">  } </span><span style="color:#F97583;">catch</span><span style="color:#B392F0;"> (err) {}</span></span>
<span class="line"><span style="color:#B392F0;">})();</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div>`,19)]))}const u=n(o,[["render",e]]);export{i as __pageData,u as default};
