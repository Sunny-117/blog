import{_ as a,o as n,c as l,a as p}from"./app.f9cf8683.js";const e="/blog/assets/2023-01-06-18-09-43.38e75eb4.png",F=JSON.parse('{"title":"前端 JavaScript 必会工具库合集","description":"","frontmatter":{},"headers":[{"level":2,"title":"工具库集合","slug":"工具库集合","link":"#工具库集合","children":[{"level":3,"title":"jQuery: 让操作DOM变得更容易","slug":"jquery-让操作dom变得更容易","link":"#jquery-让操作dom变得更容易","children":[]},{"level":3,"title":"Lodash: 你能想到的工具函数它都帮你写了","slug":"lodash-你能想到的工具函数它都帮你写了","link":"#lodash-你能想到的工具函数它都帮你写了","children":[]},{"level":3,"title":"Animate.css: 常见的CSS动画效果都帮你写好了","slug":"animate-css-常见的css动画效果都帮你写好了","link":"#animate-css-常见的css动画效果都帮你写好了","children":[]},{"level":3,"title":"Axios：让网络请求变得更简单","slug":"axios-让网络请求变得更简单","link":"#axios-让网络请求变得更简单","children":[]},{"level":3,"title":"MockJS：ajax拦截和模拟数据生成","slug":"mockjs-ajax拦截和模拟数据生成","link":"#mockjs-ajax拦截和模拟数据生成","children":[]},{"level":3,"title":"Moment：让日期处理更容易","slug":"moment-让日期处理更容易","link":"#moment-让日期处理更容易","children":[]},{"level":3,"title":"ECharts：搞定所有你能想到的图表📈","slug":"echarts-搞定所有你能想到的图表📈","link":"#echarts-搞定所有你能想到的图表📈","children":[]},{"level":3,"title":"animejs：简单好用的JS动画库","slug":"animejs-简单好用的js动画库","link":"#animejs-简单好用的js动画库","children":[]},{"level":3,"title":"editormd：markdown编辑器","slug":"editormd-markdown编辑器","link":"#editormd-markdown编辑器","children":[]},{"level":3,"title":"validate：简单好用的JS对象验证库","slug":"validate-简单好用的js对象验证库","link":"#validate-简单好用的js对象验证库","children":[]},{"level":3,"title":"date-fns：功能和Moment几乎相同","slug":"date-fns-功能和moment几乎相同","link":"#date-fns-功能和moment几乎相同","children":[]},{"level":3,"title":"zepto：功能和jQuery几乎相同","slug":"zepto-功能和jquery几乎相同","link":"#zepto-功能和jquery几乎相同","children":[]},{"level":3,"title":"nprogress：简单好用的进度条插件YouTube就使用的是它","slug":"nprogress-简单好用的进度条插件youtube就使用的是它","link":"#nprogress-简单好用的进度条插件youtube就使用的是它","children":[]},{"level":3,"title":"qs：一个用于解析url的小工具","slug":"qs-一个用于解析url的小工具","link":"#qs-一个用于解析url的小工具","children":[]}]},{"level":2,"title":"使用方式","slug":"使用方式","link":"#使用方式","children":[{"level":3,"title":"对于第三方库，除了下载使用，还可以通过CDN在线使用","slug":"对于第三方库-除了下载使用-还可以通过cdn在线使用","link":"#对于第三方库-除了下载使用-还可以通过cdn在线使用","children":[]},{"level":3,"title":"JQuery","slug":"jquery","link":"#jquery","children":[]},{"level":3,"title":"Lodash","slug":"lodash","link":"#lodash","children":[]},{"level":3,"title":"Animate.css","slug":"animate-css","link":"#animate-css","children":[]},{"level":3,"title":"Axios","slug":"axios","link":"#axios","children":[]},{"level":3,"title":"MockJS","slug":"mockjs","link":"#mockjs","children":[]},{"level":3,"title":"Moment","slug":"moment","link":"#moment","children":[]}]}],"relativePath":"fe-utils/js工具库.md","lastUpdated":1740908463000}'),o={name:"fe-utils/js工具库.md"};function t(r,s,c,i,B,y){return n(),l("div",null,s[0]||(s[0]=[p('<h1 id="前端-javascript-必会工具库合集" tabindex="-1">前端 JavaScript 必会工具库合集 <a class="header-anchor" href="#前端-javascript-必会工具库合集" aria-hidden="true">#</a></h1><h2 id="工具库集合" tabindex="-1">工具库集合 <a class="header-anchor" href="#工具库集合" aria-hidden="true">#</a></h2><h3 id="jquery-让操作dom变得更容易" tabindex="-1">jQuery: 让操作DOM变得更容易 <a class="header-anchor" href="#jquery-让操作dom变得更容易" aria-hidden="true">#</a></h3><p>官网：<a href="https://jquery.com/" target="_blank" rel="noreferrer">https://jquery.com/</a></p><p>中文网：<a href="https://jquery.cuishifeng.cn/" target="_blank" rel="noreferrer">https://jquery.cuishifeng.cn/</a></p><h3 id="lodash-你能想到的工具函数它都帮你写了" tabindex="-1">Lodash: 你能想到的工具函数它都帮你写了 <a class="header-anchor" href="#lodash-你能想到的工具函数它都帮你写了" aria-hidden="true">#</a></h3><p>官网：<a href="https://lodash.com/docs" target="_blank" rel="noreferrer">https://lodash.com/docs</a></p><p>中文网：<a href="https://www.lodashjs.com/" target="_blank" rel="noreferrer">https://www.lodashjs.com/</a></p><h3 id="animate-css-常见的css动画效果都帮你写好了" tabindex="-1">Animate.css: 常见的CSS动画效果都帮你写好了 <a class="header-anchor" href="#animate-css-常见的css动画效果都帮你写好了" aria-hidden="true">#</a></h3><p>官网：<a href="https://animate.style/" target="_blank" rel="noreferrer">https://animate.style/</a></p><h3 id="axios-让网络请求变得更简单" tabindex="-1">Axios：让网络请求变得更简单 <a class="header-anchor" href="#axios-让网络请求变得更简单" aria-hidden="true">#</a></h3><p>官网：<a href="https://axios-http.com/zh/" target="_blank" rel="noreferrer">https://axios-http.com/zh/</a></p><h3 id="mockjs-ajax拦截和模拟数据生成" tabindex="-1">MockJS：ajax拦截和模拟数据生成 <a class="header-anchor" href="#mockjs-ajax拦截和模拟数据生成" aria-hidden="true">#</a></h3><p>官网：<a href="http://mockjs.com/" target="_blank" rel="noreferrer">http://mockjs.com/</a></p><h3 id="moment-让日期处理更容易" tabindex="-1">Moment：让日期处理更容易 <a class="header-anchor" href="#moment-让日期处理更容易" aria-hidden="true">#</a></h3><p>官网：<a href="https://momentjs.com/" target="_blank" rel="noreferrer">https://momentjs.com/</a></p><p>中文网：<a href="http://momentjs.cn/" target="_blank" rel="noreferrer">http://momentjs.cn/</a></p><h3 id="echarts-搞定所有你能想到的图表📈" tabindex="-1">ECharts：搞定所有你能想到的图表📈 <a class="header-anchor" href="#echarts-搞定所有你能想到的图表📈" aria-hidden="true">#</a></h3><p>官网：<a href="https://echarts.apache.org/zh" target="_blank" rel="noreferrer">https://echarts.apache.org/zh</a></p><h3 id="animejs-简单好用的js动画库" tabindex="-1">animejs：简单好用的JS动画库 <a class="header-anchor" href="#animejs-简单好用的js动画库" aria-hidden="true">#</a></h3><p>官网：<a href="https://animejs.com/" target="_blank" rel="noreferrer">https://animejs.com/</a></p><h3 id="editormd-markdown编辑器" tabindex="-1">editormd：markdown编辑器 <a class="header-anchor" href="#editormd-markdown编辑器" aria-hidden="true">#</a></h3><p>官网：<a href="https://pandao.github.io/editor.md" target="_blank" rel="noreferrer">https://pandao.github.io/editor.md</a> | |</p><h3 id="validate-简单好用的js对象验证库" tabindex="-1">validate：简单好用的JS对象验证库 <a class="header-anchor" href="#validate-简单好用的js对象验证库" aria-hidden="true">#</a></h3><p>官网：<a href="http://validatejs.org/" target="_blank" rel="noreferrer">http://validatejs.org/</a></p><h3 id="date-fns-功能和moment几乎相同" tabindex="-1">date-fns：功能和Moment几乎相同 <a class="header-anchor" href="#date-fns-功能和moment几乎相同" aria-hidden="true">#</a></h3><p>官网：<a href="https://date-fns.org/" target="_blank" rel="noreferrer">https://date-fns.org/</a></p><p>支持tree shaking</p><h3 id="zepto-功能和jquery几乎相同" tabindex="-1">zepto：功能和jQuery几乎相同 <a class="header-anchor" href="#zepto-功能和jquery几乎相同" aria-hidden="true">#</a></h3><p>官网：<a href="https://zeptojs.com/" target="_blank" rel="noreferrer">https://zeptojs.com/</a></p><p>对移动端支持更好，包体积更小</p><h3 id="nprogress-简单好用的进度条插件youtube就使用的是它" tabindex="-1">nprogress：简单好用的进度条插件YouTube就使用的是它 <a class="header-anchor" href="#nprogress-简单好用的进度条插件youtube就使用的是它" aria-hidden="true">#</a></h3><p>官网：<a href="https://github.com/rstacruz/nprogress" target="_blank" rel="noreferrer">https://github.com/rstacruz/nprogress</a></p><h3 id="qs-一个用于解析url的小工具" tabindex="-1">qs：一个用于解析url的小工具 <a class="header-anchor" href="#qs-一个用于解析url的小工具" aria-hidden="true">#</a></h3><p>官网：<a href="https://github.com/ljharb/qs" target="_blank" rel="noreferrer">https://github.com/ljharb/qs</a></p><h2 id="使用方式" tabindex="-1">使用方式 <a class="header-anchor" href="#使用方式" aria-hidden="true">#</a></h2><h3 id="对于第三方库-除了下载使用-还可以通过cdn在线使用" tabindex="-1">对于第三方库，除了下载使用，还可以通过CDN在线使用 <a class="header-anchor" href="#对于第三方库-除了下载使用-还可以通过cdn在线使用" aria-hidden="true">#</a></h3><blockquote><p>科普知识：CDN</p><p>CDN称之为内容分发网络（Content Delivery Network）。</p><p>简单来说，就是提供很多的服务器，用户访问时，自动就近选择服务器给用户提供资源</p><p><img src="'+e+`" alt=""></p></blockquote><p>国内使用广泛的免费CDN站点：<a href="https://www.bootcdn.cn/" target="_blank" rel="noreferrer">https://www.bootcdn.cn/</a></p><h3 id="jquery" tabindex="-1">JQuery <a class="header-anchor" href="#jquery" aria-hidden="true">#</a></h3><blockquote><p>官网：<a href="https://jquery.com/" target="_blank" rel="noreferrer">https://jquery.com/</a></p><p>中文网：<a href="https://jquery.cuishifeng.cn/" target="_blank" rel="noreferrer">https://jquery.cuishifeng.cn/</a></p><p>CDN：<a href="https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.min.js" target="_blank" rel="noreferrer">https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.min.js</a></p></blockquote><p>针对DOM的操作无非以下几种：</p><ul><li>获取它</li><li>创建它</li><li>监听它</li><li>改变它</li></ul><p>JQuery可以让上面整个过程更加轻松</p><h4 id="jquery函数" tabindex="-1">jQuery函数 <a class="header-anchor" href="#jquery函数" aria-hidden="true">#</a></h4><p>jQuery提供了一个函数，名称为<code>jQuery</code>，也可以写作<code>$</code></p><p>该函数提供了强大的DOM控制能力</p><p>通过下面的示例，可以快速理解jQuery的核心功能</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 获取类样式为container的所有DOM</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">container</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;.container&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 获取container后面的兄弟元素，元素类样式必须包含list</span></span>
<span class="line"><span style="color:#E5C07B;">container</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">nextAll</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;.list&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 删除元素</span></span>
<span class="line"><span style="color:#E5C07B;">container</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">remove</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 找到所有类样式为list元素的后代li元素，给它们加上类样式item</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;.list li&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">addClass</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;item&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 为所有p元素添加一些style</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;p&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">css</span><span style="color:#ABB2BF;">({ </span><span style="color:#98C379;">&quot;color&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;#ff0011&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;background&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;blue&quot;</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 注册DOMContentLoaded事件</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(){ </span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#7F848E;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 给所有li元素注册点击事件</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;li&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">click</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 创建一个a元素，设置其内容为link，然后将它作为子元素追加到类样式为.list的元素中</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;&lt;a&gt;&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">text</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;link&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">appendTo</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;.list&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#6B737C;">// 获取类样式为container的所有DOM</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">container</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> $(</span><span style="color:#FFAB70;">&quot;.container&quot;</span><span style="color:#B392F0;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 获取container后面的兄弟元素，元素类样式必须包含list</span></span>
<span class="line"><span style="color:#79B8FF;">container</span><span style="color:#B392F0;">.nextAll(</span><span style="color:#FFAB70;">&quot;.list&quot;</span><span style="color:#B392F0;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 删除元素</span></span>
<span class="line"><span style="color:#79B8FF;">container</span><span style="color:#B392F0;">.remove();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 找到所有类样式为list元素的后代li元素，给它们加上类样式item</span></span>
<span class="line"><span style="color:#B392F0;">$(</span><span style="color:#FFAB70;">&quot;.list li&quot;</span><span style="color:#B392F0;">).addClass(</span><span style="color:#FFAB70;">&quot;item&quot;</span><span style="color:#B392F0;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 为所有p元素添加一些style</span></span>
<span class="line"><span style="color:#B392F0;">$(</span><span style="color:#FFAB70;">&quot;p&quot;</span><span style="color:#B392F0;">).css({ </span><span style="color:#FFAB70;">&quot;color&quot;</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;#ff0011&quot;</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;background&quot;</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;blue&quot;</span><span style="color:#B392F0;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 注册DOMContentLoaded事件</span></span>
<span class="line"><span style="color:#B392F0;">$(</span><span style="color:#F97583;">function</span><span style="color:#B392F0;">(){ </span></span>
<span class="line"><span style="color:#B392F0;">	</span><span style="color:#6B737C;">// ...</span></span>
<span class="line"><span style="color:#B392F0;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 给所有li元素注册点击事件</span></span>
<span class="line"><span style="color:#B392F0;">$(</span><span style="color:#FFAB70;">&quot;li&quot;</span><span style="color:#B392F0;">).click(</span><span style="color:#F97583;">function</span><span style="color:#B392F0;">(){</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// ...</span></span>
<span class="line"><span style="color:#B392F0;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 创建一个a元素，设置其内容为link，然后将它作为子元素追加到类样式为.list的元素中</span></span>
<span class="line"><span style="color:#B392F0;">$(</span><span style="color:#FFAB70;">&quot;&lt;a&gt;&quot;</span><span style="color:#B392F0;">).text(</span><span style="color:#FFAB70;">&quot;link&quot;</span><span style="color:#B392F0;">).appendTo(</span><span style="color:#FFAB70;">&quot;.list&quot;</span><span style="color:#B392F0;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><p>下面依次介绍jQuery中的核心概念，以便于文档查阅</p><h4 id="jquery对象和dom对象" tabindex="-1">jQuery对象和DOM对象 <a class="header-anchor" href="#jquery对象和dom对象" aria-hidden="true">#</a></h4><p>通过jQuery得到的元素是一个jQuery对象，而不是传统的DOM</p><p>jQuery对象是一个伪数组，它和DOM元素的关系如下</p><p><img src="http://mdrs.yuanjin.tech/img/20210522134507.png#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=A2XGr&amp;originHeight=530&amp;originWidth=1024&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><p>jQuery对象和DOM之间可以互相转换</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// jQuery -&gt; DOM</span></span>
<span class="line"><span style="color:#E06C75;">jQuery对象</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">索引</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#E5C07B;">jQuery对象</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">索引</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// DOM -&gt; jQuery</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">DOM对象</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#6B737C;">// jQuery -&gt; DOM</span></span>
<span class="line"><span style="color:#B392F0;">jQuery对象[索引]</span></span>
<span class="line"><span style="color:#79B8FF;">jQuery对象</span><span style="color:#B392F0;">.get(索引)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// DOM -&gt; jQuery</span></span>
<span class="line"><span style="color:#B392F0;">$(DOM对象)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="官网文档中的目录" tabindex="-1">官网文档中的目录 <a class="header-anchor" href="#官网文档中的目录" aria-hidden="true">#</a></h4><table><thead><tr><th>目录名</th><th>内容</th></tr></thead><tbody><tr><td>选择器</td><td>选择器是一个字符串，用于描述要选中哪些元素</td></tr><tr><td>筛选</td><td>在当前jQuery对象的基础上，进一步选中元素</td></tr><tr><td>文档处理</td><td>更改HTML文档结构，例如删除元素、清空元素内容、改变元素之间的关系</td></tr><tr><td>属性</td><td>控制元素属性，例如修改类样式、读取和设置文本框的value、读取和设置img的src</td></tr><tr><td>css</td><td>控制元素style样式，例如改变字体颜色、设置背景、获取元素尺寸、获取和设置滚动位置</td></tr><tr><td>事件</td><td>监听元素的事件，例如监听文档加载完成、监听元素被点击</td></tr><tr><td>ajax</td><td>jQuery封装了XHR，使ajax访问更加方便</td></tr><tr><td>这部分功能目前已被其他第三方库全面超越</td><td></td></tr><tr><td></td><td></td></tr></tbody></table><h3 id="lodash" tabindex="-1">Lodash <a class="header-anchor" href="#lodash" aria-hidden="true">#</a></h3><blockquote><p>官网：<a href="https://lodash.com/docs" target="_blank" rel="noreferrer">https://lodash.com/docs</a></p><p>中文网：<a href="https://www.lodashjs.com/" target="_blank" rel="noreferrer">https://www.lodashjs.com/</a></p><p>CDN：<a href="https://cdn.bootcdn.net/ajax/libs/lodash.js/4.17.21/lodash.min.js" target="_blank" rel="noreferrer">https://cdn.bootcdn.net/ajax/libs/lodash.js/4.17.21/lodash.min.js</a></p></blockquote><p>Lodash是一个针对ES的古老工具库，它出现在ES5之前</p><p>Lodash提供了大量的API，弥补了ES中对象、函数、数组API不足的问题</p><p>你可以想到的大部分工具函数，都可以在Lodash中找到</p><blockquote><p>如果你不编写框架或通用库，一般不会用到Lodash</p></blockquote><h3 id="animate-css" tabindex="-1">Animate.css <a class="header-anchor" href="#animate-css" aria-hidden="true">#</a></h3><blockquote><p>官网：<a href="https://animate.style/" target="_blank" rel="noreferrer">https://animate.style/</a></p><p>CDN：<a href="https://cdn.bootcdn.net/ajax/libs/animate.css/4.1.1/animate.min.css" target="_blank" rel="noreferrer">https://cdn.bootcdn.net/ajax/libs/animate.css/4.1.1/animate.min.css</a></p></blockquote><p>Animate.css 库提供了大量的动画效果，开发者仅需使用它提供的类名即可</p><p><strong>注意：animate.css中的动画对行盒无效</strong></p><h4 id="基本使用" tabindex="-1">基本使用 <a class="header-anchor" href="#基本使用" aria-hidden="true">#</a></h4><p>类名格式为：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#abb2bf;">animate__animated animate__效果名</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#b392f0;">animate__animated animate__效果名</span></span>
<span class="line"><span style="color:#b392f0;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>效果名分为以下几个大类，你可以从官网中找到对应的分类，每个分类下有多种效果名可供使用</p><table><thead><tr><th>分类</th><th>含义</th></tr></thead><tbody><tr><td>Attention seekers</td><td>强调</td></tr><tr><td>Back entrances</td><td>进入</td></tr><tr><td>Back exits</td><td>退出</td></tr><tr><td>Bouncing entrances</td><td>弹跳进入</td></tr><tr><td>Bouncing exits</td><td>弹跳退出</td></tr><tr><td>Fading entrances</td><td>淡入</td></tr><tr><td>Fading exits</td><td>淡出</td></tr><tr><td>Flippers</td><td>翻转</td></tr><tr><td>Lightspeed</td><td>光速</td></tr><tr><td>Rotating entrances</td><td>旋转进入</td></tr><tr><td>Rotating exits</td><td>旋转退出</td></tr><tr><td>Specials</td><td>特殊效果</td></tr><tr><td>Zooming entrances</td><td>缩放进入</td></tr><tr><td>Zooming exits</td><td>缩放退出</td></tr><tr><td>Sliding entrances</td><td>滑动进入</td></tr><tr><td>Sliding exits</td><td>滑动退出</td></tr><tr><td></td><td></td></tr></tbody></table><h4 id="工具类" tabindex="-1">工具类 <a class="header-anchor" href="#工具类" aria-hidden="true">#</a></h4><p>Animate.css 还提供了多个工具类，可以控制动画的<strong>延时</strong>、<strong>重复次数</strong>、<strong>速度</strong></p><ul><li>延时</li></ul><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/* 默认无延时 */</span></span>
<span class="line"><span style="color:#E06C75;">animate__delay-1s</span><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">/* 延时1秒 */</span></span>
<span class="line"><span style="color:#E06C75;">animate__delay-2s</span><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">/* 延时2秒 */</span></span>
<span class="line"><span style="color:#E06C75;">animate__delay-3s</span><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">/* 延时3秒 */</span></span>
<span class="line"><span style="color:#E06C75;">animate__delay-4s</span><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">/* 延时4秒 */</span></span>
<span class="line"><span style="color:#E06C75;">animate__delay-5s</span><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">/* 延时5秒 */</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#6B737C;">/* 默认无延时 */</span></span>
<span class="line"><span style="color:#FFAB70;">animate__delay-1s</span><span style="color:#B392F0;">  </span><span style="color:#6B737C;">/* 延时1秒 */</span></span>
<span class="line"><span style="color:#FFAB70;">animate__delay-2s</span><span style="color:#B392F0;">  </span><span style="color:#6B737C;">/* 延时2秒 */</span></span>
<span class="line"><span style="color:#FFAB70;">animate__delay-3s</span><span style="color:#B392F0;">  </span><span style="color:#6B737C;">/* 延时3秒 */</span></span>
<span class="line"><span style="color:#FFAB70;">animate__delay-4s</span><span style="color:#B392F0;">  </span><span style="color:#6B737C;">/* 延时4秒 */</span></span>
<span class="line"><span style="color:#FFAB70;">animate__delay-5s</span><span style="color:#B392F0;">  </span><span style="color:#6B737C;">/* 延时5秒 */</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li>重复次数</li></ul><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/* 默认重复1次 */</span></span>
<span class="line"><span style="color:#E06C75;">animate__repeat-2</span><span style="color:#ABB2BF;">	</span><span style="color:#7F848E;font-style:italic;">/* 重复2次 */</span></span>
<span class="line"><span style="color:#E06C75;">animate__repeat-3</span><span style="color:#ABB2BF;">	</span><span style="color:#7F848E;font-style:italic;">/* 重复3次 */</span></span>
<span class="line"><span style="color:#C678DD;">animate__infinite</span><span style="color:#ABB2BF;">	</span><span style="color:#7F848E;font-style:italic;">/* 重复无限次 */</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#6B737C;">/* 默认重复1次 */</span></span>
<span class="line"><span style="color:#FFAB70;">animate__repeat-2</span><span style="color:#B392F0;">	</span><span style="color:#6B737C;">/* 重复2次 */</span></span>
<span class="line"><span style="color:#FFAB70;">animate__repeat-3</span><span style="color:#B392F0;">	</span><span style="color:#6B737C;">/* 重复3次 */</span></span>
<span class="line"><span style="color:#B392F0;">animate__infinite	</span><span style="color:#6B737C;">/* 重复无限次 */</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>速度</li></ul><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/* 默认1秒内完成动画 */</span></span>
<span class="line"><span style="color:#C678DD;">animate__slow</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">/* 2秒内完成动画 */</span></span>
<span class="line"><span style="color:#C678DD;">animate__slower</span><span style="color:#ABB2BF;">	</span><span style="color:#7F848E;font-style:italic;">/* 3秒内完成动画 */</span></span>
<span class="line"><span style="color:#C678DD;">animate__fast</span><span style="color:#ABB2BF;">	</span><span style="color:#7F848E;font-style:italic;">/* 800毫秒内完成动画 */</span></span>
<span class="line"><span style="color:#C678DD;">animate__faster</span><span style="color:#ABB2BF;">	</span><span style="color:#7F848E;font-style:italic;">/* 500毫秒内完成动画 */</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#6B737C;">/* 默认1秒内完成动画 */</span></span>
<span class="line"><span style="color:#B392F0;">animate__slow </span><span style="color:#6B737C;">/* 2秒内完成动画 */</span></span>
<span class="line"><span style="color:#B392F0;">animate__slower	</span><span style="color:#6B737C;">/* 3秒内完成动画 */</span></span>
<span class="line"><span style="color:#B392F0;">animate__fast	</span><span style="color:#6B737C;">/* 800毫秒内完成动画 */</span></span>
<span class="line"><span style="color:#B392F0;">animate__faster	</span><span style="color:#6B737C;">/* 500毫秒内完成动画 */</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>示例：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">&lt;!-- </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">使用animate.css</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">动画名：bounce</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">速度：快</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">重复：无限次</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">延迟：1秒</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">--&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">h1</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#D19A66;">class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;</span></span>
<span class="line"><span style="color:#98C379;">           animate__animated</span></span>
<span class="line"><span style="color:#98C379;">           animate__bounce</span></span>
<span class="line"><span style="color:#98C379;">           animate_fast</span></span>
<span class="line"><span style="color:#98C379;">           animate__infinite</span></span>
<span class="line"><span style="color:#98C379;">           animate__delay-1s</span></span>
<span class="line"><span style="color:#98C379;">           &quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  Hello Animate</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">h1</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#6B737C;">&lt;!-- </span></span>
<span class="line"><span style="color:#6B737C;">使用animate.css</span></span>
<span class="line"><span style="color:#6B737C;">动画名：bounce</span></span>
<span class="line"><span style="color:#6B737C;">速度：快</span></span>
<span class="line"><span style="color:#6B737C;">重复：无限次</span></span>
<span class="line"><span style="color:#6B737C;">延迟：1秒</span></span>
<span class="line"><span style="color:#6B737C;">--&gt;</span></span>
<span class="line"><span style="color:#B392F0;">&lt;</span><span style="color:#FFAB70;">h1</span></span>
<span class="line"><span style="color:#B392F0;">    class</span><span style="color:#F97583;">=</span><span style="color:#FFAB70;">&quot;</span></span>
<span class="line"><span style="color:#FFAB70;">           animate__animated</span></span>
<span class="line"><span style="color:#FFAB70;">           animate__bounce</span></span>
<span class="line"><span style="color:#FFAB70;">           animate_fast</span></span>
<span class="line"><span style="color:#FFAB70;">           animate__infinite</span></span>
<span class="line"><span style="color:#FFAB70;">           animate__delay-1s</span></span>
<span class="line"><span style="color:#FFAB70;">           &quot;</span></span>
<span class="line"><span style="color:#B392F0;">    &gt;</span></span>
<span class="line"><span style="color:#B392F0;">  Hello Animate</span></span>
<span class="line"><span style="color:#B392F0;">&lt;/</span><span style="color:#FFAB70;">h1</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="axios" tabindex="-1">Axios <a class="header-anchor" href="#axios" aria-hidden="true">#</a></h3><blockquote><p>官网：<a href="https://axios-http.com/zh/" target="_blank" rel="noreferrer">https://axios-http.com/zh/</a></p><p>CDN：<a href="https://cdn.bootcdn.net/ajax/libs/axios/0.21.1/axios.min.js" target="_blank" rel="noreferrer">https://cdn.bootcdn.net/ajax/libs/axios/0.21.1/axios.min.js</a></p></blockquote><p>axios是一个请求库，在浏览器环境中，它封装了XHR，提供更加便捷的API发送请求</p><h4 id="基本使用-1" tabindex="-1">基本使用 <a class="header-anchor" href="#基本使用-1" aria-hidden="true">#</a></h4><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 发送 get 请求到 https://study.duyiedu.com/api/herolist，输出响应体的内容</span></span>
<span class="line"><span style="color:#E5C07B;">axios</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;https://study.duyiedu.com/api/herolist&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">resp</span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">resp</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// resp.data 为响应体的数据，axios会自动解析JSON格式</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 发送 get 请求到 https://study.duyiedu.com/api/user/exists?loginId=abc，输出响应体的内容</span></span>
<span class="line"><span style="color:#E5C07B;">axios</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;https://study.duyiedu.com/api/user/exists&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">params</span><span style="color:#ABB2BF;">: { </span><span style="color:#7F848E;font-style:italic;">// 这里可以配置 query，axios会自动将其进行Url编码</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">loginId</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;abc&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">}).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">resp</span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">resp</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// resp.data 为响应体的数据，axios会自动解析JSON格式</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 发送 post 请求到 https://study.duyiedu.com/api/user/reg</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// axios 会将第二个参数转换为JSON格式的请求体</span></span>
<span class="line"><span style="color:#E5C07B;">axios</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">post</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;https://study.duyiedu.com/api/user/reg&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">loginId</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;abc&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">loginPwd</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;123123&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">nickname</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;棒棒鸡&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">}).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">resp</span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">resp</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// resp.data 为响应体的数据，axios会自动解析JSON格式</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#6B737C;">// 发送 get 请求到 https://study.duyiedu.com/api/herolist，输出响应体的内容</span></span>
<span class="line"><span style="color:#79B8FF;">axios</span><span style="color:#B392F0;">.get(</span><span style="color:#FFAB70;">&quot;https://study.duyiedu.com/api/herolist&quot;</span><span style="color:#B392F0;">).then(resp</span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;">{</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#79B8FF;">resp</span><span style="color:#B392F0;">.data); </span><span style="color:#6B737C;">// resp.data 为响应体的数据，axios会自动解析JSON格式</span></span>
<span class="line"><span style="color:#B392F0;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 发送 get 请求到 https://study.duyiedu.com/api/user/exists?loginId=abc，输出响应体的内容</span></span>
<span class="line"><span style="color:#79B8FF;">axios</span><span style="color:#B392F0;">.get(</span><span style="color:#FFAB70;">&quot;https://study.duyiedu.com/api/user/exists&quot;</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  params</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> { </span><span style="color:#6B737C;">// 这里可以配置 query，axios会自动将其进行Url编码</span></span>
<span class="line"><span style="color:#B392F0;">    loginId</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;abc&quot;</span></span>
<span class="line"><span style="color:#B392F0;">  }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">}).then(resp</span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;">{</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#79B8FF;">resp</span><span style="color:#B392F0;">.data); </span><span style="color:#6B737C;">// resp.data 为响应体的数据，axios会自动解析JSON格式</span></span>
<span class="line"><span style="color:#B392F0;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 发送 post 请求到 https://study.duyiedu.com/api/user/reg</span></span>
<span class="line"><span style="color:#6B737C;">// axios 会将第二个参数转换为JSON格式的请求体</span></span>
<span class="line"><span style="color:#79B8FF;">axios</span><span style="color:#B392F0;">.post(</span><span style="color:#FFAB70;">&quot;https://study.duyiedu.com/api/user/reg&quot;</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  loginId</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;abc&#39;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  loginPwd</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;123123&#39;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  nickname</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;棒棒鸡&#39;</span></span>
<span class="line"><span style="color:#B392F0;">}).then(resp</span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;">{</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#79B8FF;">resp</span><span style="color:#B392F0;">.data); </span><span style="color:#6B737C;">// resp.data 为响应体的数据，axios会自动解析JSON格式</span></span>
<span class="line"><span style="color:#B392F0;">})</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>axios的基本用法为：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#E5C07B;">axios</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">url地址</span><span style="color:#ABB2BF;">, [</span><span style="color:#E06C75;">请求配置</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#E5C07B;">axios</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">post</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">url地址</span><span style="color:#ABB2BF;">, [</span><span style="color:#E06C75;">请求体对象</span><span style="color:#ABB2BF;">], [</span><span style="color:#E06C75;">请求配置</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 或直接使用 axios 方法，在请求配置中填写请求方法</span></span>
<span class="line"><span style="color:#61AFEF;">axios</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">请求配置</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#79B8FF;">axios</span><span style="color:#B392F0;">.get(url地址</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> [请求配置]);</span></span>
<span class="line"><span style="color:#79B8FF;">axios</span><span style="color:#B392F0;">.post(url地址</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> [请求体对象]</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> [请求配置]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 或直接使用 axios 方法，在请求配置中填写请求方法</span></span>
<span class="line"><span style="color:#B392F0;">axios(请求配置);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="实例" tabindex="-1">实例 <a class="header-anchor" href="#实例" aria-hidden="true">#</a></h4><p>axios允许开发者先创建一个实例，后续通过使用实例进行请求</p><p>这样做的好处是可以预先进行某些配置</p><p>示例：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 创建实例</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">instance</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">axios</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">baseURL</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;https://study.duyiedu.com/&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 发送 get 请求到 https://study.duyiedu.com/api/herolist，输出响应体的内容</span></span>
<span class="line"><span style="color:#E5C07B;">instance</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/api/herolist&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">resp</span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">resp</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// resp.data 为响应体的数据，axios会自动解析JSON格式</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#6B737C;">// 创建实例</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">instance</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">axios</span><span style="color:#B392F0;">.create({</span></span>
<span class="line"><span style="color:#B392F0;">  baseURL</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;https://study.duyiedu.com/&#39;</span></span>
<span class="line"><span style="color:#B392F0;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 发送 get 请求到 https://study.duyiedu.com/api/herolist，输出响应体的内容</span></span>
<span class="line"><span style="color:#79B8FF;">instance</span><span style="color:#B392F0;">.get(</span><span style="color:#FFAB70;">&quot;/api/herolist&quot;</span><span style="color:#B392F0;">).then(resp</span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;">{</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#79B8FF;">resp</span><span style="color:#B392F0;">.data); </span><span style="color:#6B737C;">// resp.data 为响应体的数据，axios会自动解析JSON格式</span></span>
<span class="line"><span style="color:#B392F0;">})</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="拦截器" tabindex="-1">拦截器 <a class="header-anchor" href="#拦截器" aria-hidden="true">#</a></h4><p>有时，我们可能需要对所有的请求或响应做一些统一的处理</p><p>比如，在请求时，如果发现本地有token，需要附带到请求头</p><p>又比如，在拿到响应后，我们仅需要取响应体中的data属性</p><p>再比如，如果发生错误，我们需要做一个弹窗显示</p><p><strong>这些统一的行为就非常适合使用拦截器</strong></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 添加请求拦截器</span></span>
<span class="line"><span style="color:#E5C07B;">axios</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">interceptors</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">request</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">config</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// config 为当前的请求配置</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 在发送请求之前做些什么</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 这里，我们添加一个请求头</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">token</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">localStorage</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getItem</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;token&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">token</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">config</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">headers</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">authorization</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">token</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">config</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 返回处理后的配置</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 添加响应拦截器</span></span>
<span class="line"><span style="color:#E5C07B;">axios</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">interceptors</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">response</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">resp</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 2xx 范围内的状态码都会触发该函数。</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 对响应数据做点什么</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">resp</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">data</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 仅得到响应体中的data属性</span></span>
<span class="line"><span style="color:#ABB2BF;">}, </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">error</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 超出 2xx 范围的状态码都会触发该函数。</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 对响应错误做点什么</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">alert</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">error</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">message</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 弹出错误消息</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#6B737C;">// 添加请求拦截器</span></span>
<span class="line"><span style="color:#79B8FF;">axios</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">interceptors</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">request</span><span style="color:#B392F0;">.use(</span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> (config) {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// config 为当前的请求配置</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// 在发送请求之前做些什么</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// 这里，我们添加一个请求头</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">token</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">localStorage</span><span style="color:#B392F0;">.getItem(</span><span style="color:#FFAB70;">&#39;token&#39;</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">if</span><span style="color:#B392F0;">(token){</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">config</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">headers</span><span style="color:#B392F0;">.authorization </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> token;</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> config; </span><span style="color:#6B737C;">// 返回处理后的配置</span></span>
<span class="line"><span style="color:#B392F0;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 添加响应拦截器</span></span>
<span class="line"><span style="color:#79B8FF;">axios</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">interceptors</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">response</span><span style="color:#B392F0;">.use(</span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> (resp) {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// 2xx 范围内的状态码都会触发该函数。</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// 对响应数据做点什么</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">resp</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">data</span><span style="color:#B392F0;">.data; </span><span style="color:#6B737C;">// 仅得到响应体中的data属性</span></span>
<span class="line"><span style="color:#B392F0;">}</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> (error) {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// 超出 2xx 范围的状态码都会触发该函数。</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// 对响应错误做点什么</span></span>
<span class="line"><span style="color:#B392F0;">  alert(</span><span style="color:#79B8FF;">error</span><span style="color:#B392F0;">.message); </span><span style="color:#6B737C;">// 弹出错误消息</span></span>
<span class="line"><span style="color:#B392F0;">});</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>设置好拦截器后，后续的请求和响应都会触发对应的函数</p><p>拦截器可以针对axios实例进行设置</p><h3 id="mockjs" tabindex="-1">MockJS <a class="header-anchor" href="#mockjs" aria-hidden="true">#</a></h3><blockquote><p>官网：<a href="http://mockjs.com/" target="_blank" rel="noreferrer">http://mockjs.com/</a></p><p>CDN：<a href="https://cdn.bootcdn.net/ajax/libs/Mock.js/1.0.0/mock-min.js" target="_blank" rel="noreferrer">https://cdn.bootcdn.net/ajax/libs/Mock.js/1.0.0/mock-min.js</a></p></blockquote><p>MockJS有两个作用：</p><ol><li>产生模拟数据</li><li>拦截Ajax</li></ol><p>下面两张图说明MockJS的作用</p><p><img src="http://mdrs.yuanjin.tech/img/20210524134909.png#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=wDc5f&amp;originHeight=690&amp;originWidth=1908&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><p><img src="http://mdrs.yuanjin.tech/img/20210524135812.png#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=UWSXl&amp;originHeight=460&amp;originWidth=1150&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><h4 id="仅模拟数据" tabindex="-1">仅模拟数据 <a class="header-anchor" href="#仅模拟数据" aria-hidden="true">#</a></h4><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#E5C07B;">Mock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">mock</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">数据模板</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#79B8FF;">Mock</span><span style="color:#B392F0;">.mock(数据模板)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>数据模板有其特有的书写规范，具体写法见官网</p><h4 id="拦截-模拟数据" tabindex="-1">拦截+模拟数据 <a class="header-anchor" href="#拦截-模拟数据" aria-hidden="true">#</a></h4><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#E5C07B;">Mock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">mock</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">要拦截的url</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">要拦截的请求方法</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">数据模板</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#79B8FF;">Mock</span><span style="color:#B392F0;">.mock(要拦截的url</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> 要拦截的请求方法</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> 数据模板)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>更多用法见官网</p><p><strong>注意，MockJS拦截数据的原理是重写了XHR，因此它仅能拦截XHR的数据请求，而无法拦截使用</strong><code>fetch</code><strong>发出的请求</strong></p><p>具体的，MockJS可以拦截：</p><ul><li>原生<code>XmlHttpRequest</code></li><li><code>jQuery</code>中的<code>$.ajax</code></li><li><code>axios</code></li></ul><p>MockJS可以模拟网络延时，用法为：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#E5C07B;">Mock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setup</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">timeout</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">400</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// 网络延时400毫秒</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">Mock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setup</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">timeout</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;200-600&#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// 网络延时200-600毫秒</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#79B8FF;">Mock</span><span style="color:#B392F0;">.setup({</span></span>
<span class="line"><span style="color:#B392F0;">  timeout</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">400</span><span style="color:#B392F0;"> </span><span style="color:#6B737C;">// 网络延时400毫秒</span></span>
<span class="line"><span style="color:#B392F0;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">Mock</span><span style="color:#B392F0;">.setup({</span></span>
<span class="line"><span style="color:#B392F0;">  timeout</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;200-600&#39;</span><span style="color:#B392F0;"> </span><span style="color:#6B737C;">// 网络延时200-600毫秒</span></span>
<span class="line"><span style="color:#B392F0;">})</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="moment" tabindex="-1">Moment <a class="header-anchor" href="#moment" aria-hidden="true">#</a></h3><blockquote><p>官网：<a href="https://momentjs.com/" target="_blank" rel="noreferrer">https://momentjs.com/</a></p><p>中文网：<a href="http://momentjs.cn/" target="_blank" rel="noreferrer">http://momentjs.cn/</a></p><p>CDN：<a href="https://cdn.bootcdn.net/ajax/libs/moment.js/2.29.1/moment.min.js" target="_blank" rel="noreferrer">https://cdn.bootcdn.net/ajax/libs/moment.js/2.29.1/moment.min.js</a></p><p>各种语言包：<a href="https://www.bootcdn.cn/moment.js/" target="_blank" rel="noreferrer">https://www.bootcdn.cn/moment.js/</a></p></blockquote><p>Moment提供了强大的日期处理能力</p><h4 id="时间基础知识" tabindex="-1">时间基础知识 <a class="header-anchor" href="#时间基础知识" aria-hidden="true">#</a></h4><h4 id="单位" tabindex="-1">单位 <a class="header-anchor" href="#单位" aria-hidden="true">#</a></h4><table><thead><tr><th>单位</th><th>名称</th><th>换算</th></tr></thead><tbody><tr><td>hour</td><td>小时</td><td>1 day = 24 hours</td></tr><tr><td>minute</td><td>分钟</td><td>1 hour = 60 minutes</td></tr><tr><td>second</td><td>秒</td><td>1 minute = 60 seconds</td></tr><tr><td>millisecond （ms）</td><td>毫秒</td><td>1 second = 1000 ms</td></tr><tr><td>nanosecond （ns）</td><td>纳秒</td><td>1 ms = 1000 ns</td></tr></tbody></table><h4 id="gmt和utc" tabindex="-1">GMT和UTC <a class="header-anchor" href="#gmt和utc" aria-hidden="true">#</a></h4><p>世界划分为24个时区，北京在东8区，格林威治在0时区。</p><p><img src="https://gblobscdn.gitbook.com/assets%2F-LQcTxgqTqhC05ckLpLr%2F-LikgRi0I4q8Q0a3kFgz%2F-LikgSk-E-e8AcD50vHu%2F2019-07-02-11-14-46.png?alt=media#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=nsqZl&amp;originHeight=1009&amp;originWidth=1428&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><p><strong>GMT</strong>：Greenwish Mean Time 格林威治世界时。太阳时，精确到毫秒。</p><p><strong>UTC</strong>：Universal Time Coodinated 世界协调时。以原子时间为计时标准，精确到纳秒。</p><blockquote><p>国际标准中，已全面使用UTC时间，而不再使用GMT时间</p></blockquote><p>GMT和UTC时间在文本表示格式上是一致的，均为<code>星期缩写, 日期 月份 年份 时间 GMT</code>，例如：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#abb2bf;">Thu, 27 Aug 2020 08:01:44 GMT</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#b392f0;">Thu, 27 Aug 2020 08:01:44 GMT</span></span>
<span class="line"><span style="color:#b392f0;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>另外，ISO 8601标准规定，建议使用以下方式表示时间：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#abb2bf;">YYYY-MM-DDTHH:mm:ss.msZ</span></span>
<span class="line"><span style="color:#abb2bf;">例如：</span></span>
<span class="line"><span style="color:#abb2bf;">2020-08-27T08:01:44.000Z</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#b392f0;">YYYY-MM-DDTHH:mm:ss.msZ</span></span>
<span class="line"><span style="color:#b392f0;">例如：</span></span>
<span class="line"><span style="color:#b392f0;">2020-08-27T08:01:44.000Z</span></span>
<span class="line"><span style="color:#b392f0;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>GMT、UTC、ISO 8601都表示的是零时区的时间</strong></p><h4 id="unix-时间戳" tabindex="-1">Unix 时间戳 <a class="header-anchor" href="#unix-时间戳" aria-hidden="true">#</a></h4><blockquote><p>Unix 时间戳（Unix Timestamp）是Unix系统最早提出的概念</p></blockquote><p>它将UTC时间1970年1月1日凌晨作为起始时间，到指定时间经过的秒数（毫秒数）</p><h4 id="程序中的时间处理" tabindex="-1">程序中的时间处理 <a class="header-anchor" href="#程序中的时间处理" aria-hidden="true">#</a></h4><p><strong>程序对时间的计算、存储务必使用UTC时间，或者时间戳</strong></p><p><strong>在和用户交互时，将UTC时间或时间戳转换为更加友好的文本</strong></p><p><img src="http://mdrs.yuanjin.tech/img/20200827163636.png#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=TAIPY&amp;originHeight=690&amp;originWidth=1668&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><p>思考下面的问题：</p><ol><li>用户的生日是本地时间还是UTC时间？</li><li>如果要比较两个日期的大小，是比较本地时间还是比较UTC时间？</li><li>如果要显示文章的发布日期，是显示本地时间还是显示UTC时间？</li><li><code>北京时间2020-8-28 10:00:00</code>和<code>格林威治2020-8-28 02:00:00</code>，两个时间哪个大，哪个小？</li><li><code>北京的时间戳为0</code>和<code>格林威治的时间戳为0</code>，它们的时间一样吗？</li><li>一个中国用户注册时填写的生日是<code>1970-1-1</code>，它出生的UTC时间是多少？时间戳是多少？</li></ol><h4 id="moment的核心用法" tabindex="-1">Moment的核心用法 <a class="header-anchor" href="#moment的核心用法" aria-hidden="true">#</a></h4><p><img src="http://mdrs.yuanjin.tech/img/20200828144832.png#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=IuWsh&amp;originHeight=544&amp;originWidth=2010&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><p>Moment的使用分为两个部分：</p><ol><li>获得Moment对象</li><li>针对Moment对象做各种操作</li></ol>`,152)]))}const u=a(o,[["render",t]]);export{F as __pageData,u as default};
