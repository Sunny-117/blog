import{_ as a,o as n,c as e,a as l}from"./app.f9cf8683.js";const o="/blog/assets/2023-02-01-19-31-36.cc16c9b9.png",p="/blog/assets/2023-02-01-19-31-43.f7becb4c.png",r="/blog/assets/2023-02-01-19-31-50.42c02105.png",t="/blog/assets/2023-02-01-19-32-00.0bd5762e.png",c="/blog/assets/2023-02-01-19-32-06.107c8299.png",g=JSON.parse('{"title":"Redux","description":"","frontmatter":{},"headers":[{"level":2,"title":"MVC","slug":"mvc","link":"#mvc","children":[]},{"level":2,"title":"前端需要一个独立的数据解决方案","slug":"前端需要一个独立的数据解决方案","link":"#前端需要一个独立的数据解决方案","children":[]},{"level":2,"title":"createAction(s)","slug":"createaction-s","link":"#createaction-s","children":[{"level":3,"title":"createAction","slug":"createaction","link":"#createaction","children":[]},{"level":3,"title":"createActions","slug":"createactions","link":"#createactions","children":[]}]},{"level":2,"title":"handleAction(s)","slug":"handleaction-s","link":"#handleaction-s","children":[{"level":3,"title":"handleAction","slug":"handleaction","link":"#handleaction","children":[]},{"level":3,"title":"handleActions","slug":"handleactions","link":"#handleactions","children":[]}]},{"level":2,"title":"combineActions","slug":"combineactions","link":"#combineactions","children":[]}],"relativePath":"react/Redux.md","lastUpdated":1740908463000}'),i={name:"react/Redux.md"};function d(B,s,u,y,h,F){return n(),e("div",null,s[0]||(s[0]=[l('<h1 id="redux" tabindex="-1">Redux <a class="header-anchor" href="#redux" aria-hidden="true">#</a></h1><h1 id="redux-核心概念" tabindex="-1">Redux 核心概念 <a class="header-anchor" href="#redux-核心概念" aria-hidden="true">#</a></h1><p>action  reducer  store</p><h2 id="mvc" tabindex="-1">MVC <a class="header-anchor" href="#mvc" aria-hidden="true">#</a></h2><p>它是一个 UI 的解决方案，用于降低 UI，以及 UI 关联的数据的复杂度。</p><p><strong>传统的服务器端的 MVC</strong></p><p><img src="'+o+'" alt=""> 环境：</p><ol><li>服务端需要响应一个完整的 HTML</li><li>该 HTML 中包含页面需要的数据</li><li>浏览器仅承担渲染页面的作用</li></ol><p>以上的这种方式叫做<strong>服务端渲染</strong>，即服务器端将完整的页面组装好之后，一起发送给客户端。</p><p>服务器端需要处理 UI 中要用到的数据，并且要将数据嵌入到页面中，最终生成一个完整的 HTML 页面响应。</p><p>为了降低处理这个过程的复杂度，出现了 MVC 模式。</p><p><img src="'+p+'" alt=""><strong>Controller</strong>: 处理请求，组装这次请求需要的数据 <strong>Model</strong>：需要用于 UI 渲染的数据模型 <strong>View</strong>：视图，用于将模型组装到界面中</p><p><strong>前后端分离</strong><img src="'+r+`" alt=""><strong>前端 MVC 模式的困难</strong></p><p>React 解决了   数据 -&gt; 视图   的问题</p><blockquote><p>解决了 MVC 的 V</p></blockquote><ol><li>前端的 controller 要比服务器复杂很多，因为前端中的 controller 处理的是用户的操作，而用户的操作场景是复杂的。</li><li>对于那些组件化的框架（比如 vue、react），它们使用的是单向数据流。若需要共享数据，则必须将数据提升到顶层组件，然后数据再一层一层传递，极其繁琐。 虽然可以使用上下文来提供共享数据，但对数据的操作难以监控，容易导致调试错误的困难，以及数据还原的困难。并且，若开发一个大中型项目，共享的数据很多，会导致上下文中的数据变得非常复杂。</li></ol><p>比如，上下文中有如下格式的数据：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">users</span><span style="color:#ABB2BF;">: [{}, {}, {}],</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">addUser</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">u</span><span style="color:#ABB2BF;">) {},</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">deleteUser</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">u</span><span style="color:#ABB2BF;">) {},</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">updateUser</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">u</span><span style="color:#ABB2BF;">) {},</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">//  这些方法都可能改变数据，发生错误难以调试</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#B392F0;">value </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  users</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> [{}</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> {}</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> {}]</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  addUser</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> (u) {}</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  deleteUser</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> (u) {}</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  updateUser</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> (u) {}</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">//  这些方法都可能改变数据，发生错误难以调试</span></span>
<span class="line"><span style="color:#B392F0;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="前端需要一个独立的数据解决方案" tabindex="-1">前端需要一个独立的数据解决方案 <a class="header-anchor" href="#前端需要一个独立的数据解决方案" aria-hidden="true">#</a></h2><blockquote><p>独立：可不一定是 react,根本就没关系</p></blockquote><p><strong>Flux</strong></p><p>Facebook 提出的数据解决方案，它的最大历史意义，在于它引入了 action 的概念</p><p>action 是一个普通的对象，用于描述要干什么。<strong>action 是触发数据变化的唯一原因</strong></p><p>store 表示数据仓库，用于存储共享数据。还可以根据不同的 action 更改仓库中的数据</p><p>示例：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">loginAction</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;login&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">loginId</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;admin&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">loginPwd</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;123123&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">deleteAction</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;delete&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 用户id为1</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#B392F0;"> loginAction </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  type</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;login&quot;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  payload</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    loginId</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;admin&quot;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    loginPwd</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;123123&quot;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#B392F0;"> deleteAction </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  type</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;delete&quot;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  payload</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">1</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#6B737C;">// 用户id为1</span></span>
<span class="line"><span style="color:#B392F0;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p><strong>Redux</strong></p><p>在 Flux 基础上，引入了 reducer 的概念</p><p>reducer：处理器，用于根据 action 来处理数据，处理后的数据会被仓库重新保存。</p><p><img src="`+t+'" alt=""></p><h1 id="action" tabindex="-1">Action <a class="header-anchor" href="#action" aria-hidden="true">#</a></h1><ol><li>action 是一个 plain-object（平面对象） <ol><li>它的<strong>proto</strong>指向 Object.prototype</li></ol></li><li>通常，使用 payload 属性表示附加数据（没有强制要求）</li><li>action 中必须有 type 属性，该属性用于描述操作的类型 <ol><li>但是，没有对 type 的类型做出要求</li></ol></li><li>在大型项目，由于操作类型非常多，为了避免硬编码（hard code），会将 action 的类型存放到一个或一些单独的文件中(样板代码)。</li></ol><p><img src="'+c+'" alt=""></p><ol start="5"><li><p>为了方面传递 action，通常会使用 action 创建函数(action creator)来创建 action</p></li><li><p>action 创建函数应为无副作用的纯函数</p><ol><li>不能以任何形式改动参数</li><li>不可以有异步</li><li>不可以对外部环境中的数据造成影响</li></ol></li><li><p>为了方便利用 action 创建函数来分发（触发）action，redux 提供了一个函数<code>bindActionCreators</code>，该函数用于增强 action 创建函数的功能，使它不仅可以创建 action，并且创建后会自动完成分发。</p></li></ol><h1 id="reducer" tabindex="-1">Reducer <a class="header-anchor" href="#reducer" aria-hidden="true">#</a></h1><p>Reducer 是用于改变数据的函数</p><ol><li>一个数据仓库，有且仅有一个 reducer，并且通常情况下，一个工程只有一个仓库，因此，一个系统，只有一个 reducer</li><li>为了方便管理，通常会将 reducer 放到单独的文件中。</li><li>reducer 被调用的时机 <ol><li>通过 store.dispatch，分发了一个 action，此时，会调用 reducer</li><li>当创建一个 store 的时候，会调用一次 reducer <ol><li>可以利用这一点，用 reducer 初始化状态</li><li>创建仓库时，不传递任何默认状态</li><li>将 reducer 的参数 state 设置一个默认值。创建仓库不写默认值，传递 reducer 的时候传递默认值</li></ol></li></ol></li><li>reducer 内部通常使用 switch 来判断 type 值</li><li><strong>reducer 必须是一个没有副作用的纯函数</strong><ol><li>为什么需要纯函数 <ol><li>纯函数有利于测试和调式</li><li>有利于还原数据</li><li>有利于将来和 react 结合时的优化</li></ol></li><li>具体要求 <ol><li>不能改变参数，因此若要让状态变化，必须得到一个新的状态</li><li>不能有异步</li><li>不能对外部环境造成影响</li></ol></li></ol></li><li>由于在大中型项目中，操作比较复杂，数据结构也比较复杂，因此，需要对 reducer 进行细分。 <ol><li>redux 提供了方法，可以帮助我们更加方便的合并 reducer</li><li>combineReducers: 合并 reducer，得到一个新的 reducer，该新的 reducer 管理一个对象，该对象中的每一个属性交给对应的 reducer 管理。</li></ol></li></ol><h1 id="store" tabindex="-1">Store <a class="header-anchor" href="#store" aria-hidden="true">#</a></h1><p>Store：用于保存数据</p><p>通过 createStore 方法创建的对象。</p><p>该对象的成员：</p><ul><li>dispatch：分发一个 action</li><li>getState：得到仓库中当前的状态</li><li>replaceReducer：替换掉当前的 reducer</li><li>subscribe：注册一个监听器，监听器是一个无参函数，该分发一个 action 之后，会运行注册的监听器。该函数会返回一个函数，用于取消监听。可以注册多个监听器</li></ul><h1 id="createstore" tabindex="-1">createStore <a class="header-anchor" href="#createstore" aria-hidden="true">#</a></h1><p>返回一个对象：</p><ul><li>dispatch：分发一个 action</li><li>getState：得到仓库中当前的状态</li><li>subscribe：注册一个监听器，监听器是一个无参函数，该分发一个 action 之后，会运行注册的监听器。该函数会返回一个函数，用于取消监听</li></ul><h1 id="bindactioncreators" tabindex="-1">bindActionCreators <a class="header-anchor" href="#bindactioncreators" aria-hidden="true">#</a></h1><h1 id="combinereducers" tabindex="-1">combineReducers <a class="header-anchor" href="#combinereducers" aria-hidden="true">#</a></h1><p>组装 reducers，返回一个 reducer，数据使用一个对象表示，对象的属性名与传递的参数对象保持一致</p><h1 id="redux-中间件-middleware" tabindex="-1">Redux 中间件（Middleware） <a class="header-anchor" href="#redux-中间件-middleware" aria-hidden="true">#</a></h1><p>中间件：类似于插件，可以在不影响原本功能、并且不改动原本代码的基础上，对其功能进行增强。在 Redux 中，中间件主要用于增强 dispatch 函数。</p><p>实现 Redux 中间件的基本原理，是更改仓库中的 dispatch 函数。</p><p>Redux 中间件书写：</p><ul><li>中间件本身是一个函数，该函数接收一个 store 参数，表示创建的仓库，该仓库并非一个完整的仓库对象，仅包含 getState，dispatch。该函数运行的时间，是在仓库创建之后运行。 <ul><li>由于创建仓库后需要自动运行设置的中间件函数，因此，需要在创建仓库时，告诉仓库有哪些中间件</li><li>需要调用 applyMiddleware 函数，将函数的返回结果作为 createStore 的第二或第三个参数。</li></ul></li><li>中间件函数必须返回一个 dispatch 创建函数</li><li>applyMiddleware 函数，用于记录有哪些中间件，它会返回一个函数 <ul><li>该函数用于记录创建仓库的方法，然后又返回一个函数</li></ul></li></ul><h1 id="redux-actions" tabindex="-1">redux-actions <a class="header-anchor" href="#redux-actions" aria-hidden="true">#</a></h1><p>不维护了：<a href="https://github.com/redux-utilities/redux-actions#looking-for-maintainers" target="_blank" rel="noreferrer">https://github.com/redux-utilities/redux-actions#looking-for-maintainers</a></p><blockquote><p>该库用于简化 action-types、action-creator 以及 reducer 官网文档：<a href="https://redux-actions.js.org/" target="_blank" rel="noreferrer">https://redux-actions.js.org/</a></p></blockquote><h2 id="createaction-s" tabindex="-1">createAction(s) <a class="header-anchor" href="#createaction-s" aria-hidden="true">#</a></h2><h3 id="createaction" tabindex="-1">createAction <a class="header-anchor" href="#createaction" aria-hidden="true">#</a></h3><p>该函数用于帮助你创建一个 action 创建函数（action creator）</p><h3 id="createactions" tabindex="-1">createActions <a class="header-anchor" href="#createactions" aria-hidden="true">#</a></h3><p>该函数用于帮助你创建多个 action 创建函数</p><h2 id="handleaction-s" tabindex="-1">handleAction(s) <a class="header-anchor" href="#handleaction-s" aria-hidden="true">#</a></h2><h3 id="handleaction" tabindex="-1">handleAction <a class="header-anchor" href="#handleaction" aria-hidden="true">#</a></h3><p>简化针对单个 action 类型的 reducer 处理，当它<strong>匹配到对应的 action 类型后，会执行对应的函数</strong></p><h3 id="handleactions" tabindex="-1">handleActions <a class="header-anchor" href="#handleactions" aria-hidden="true">#</a></h3><p>简化针对多个 action 类型的 reducre 处理</p><h2 id="combineactions" tabindex="-1">combineActions <a class="header-anchor" href="#combineactions" aria-hidden="true">#</a></h2><p>配合 createActions 和 handleActions 两个函数，用于处理多个 action-type 对应同一个 reducer 处理函数。</p>',68)]))}const A=a(i,[["render",d]]);export{g as __pageData,A as default};
