import{_ as n,o as a,c as l,a as p}from"./app.f9cf8683.js";const F=JSON.parse('{"title":"VueRouter 路由从使用到源码","description":"","frontmatter":{},"headers":[{"level":2,"title":"源码实现","slug":"源码实现","link":"#源码实现","children":[]},{"level":2,"title":"Vue 的路由实现原理","slug":"vue-的路由实现原理","link":"#vue-的路由实现原理","children":[{"level":3,"title":"解释 hash 模式和 history 模式的实现原理","slug":"解释-hash-模式和-history-模式的实现原理","link":"#解释-hash-模式和-history-模式的实现原理","children":[]},{"level":3,"title":"router 和route 的区别","slug":"router-和route-的区别","link":"#router-和route-的区别","children":[]}]},{"level":2,"title":"如何监听 pushstate 和 replacestate 的变化呢？","slug":"如何监听-pushstate-和-replacestate-的变化呢","link":"#如何监听-pushstate-和-replacestate-的变化呢","children":[]},{"level":2,"title":"路由模式","slug":"路由模式","link":"#路由模式","children":[]},{"level":2,"title":"Vue-Router 的懒加载如何实现","slug":"vue-router-的懒加载如何实现","link":"#vue-router-的懒加载如何实现","children":[]},{"level":2,"title":"如何获取页面的 hash 变化","slug":"如何获取页面的-hash-变化","link":"#如何获取页面的-hash-变化","children":[]},{"level":2,"title":"$route 和$router 的区别","slug":"route-和-router-的区别","link":"#route-和-router-的区别","children":[]},{"level":2,"title":"如何定义动态路由？如何获取传过来的动态参数？","slug":"如何定义动态路由-如何获取传过来的动态参数","link":"#如何定义动态路由-如何获取传过来的动态参数","children":[]},{"level":2,"title":"Vue-router 路由钩子在生命周期的体现","slug":"vue-router-路由钩子在生命周期的体现","link":"#vue-router-路由钩子在生命周期的体现","children":[{"level":3,"title":"一、Vue-Router 导航守卫","slug":"一、vue-router-导航守卫","link":"#一、vue-router-导航守卫","children":[]},{"level":3,"title":"二、Vue 路由钩子在生命周期函数的体现","slug":"二、vue-路由钩子在生命周期函数的体现","link":"#二、vue-路由钩子在生命周期函数的体现","children":[]}]},{"level":2,"title":"Vue-router 跳转和 location.href 有什么区别","slug":"vue-router-跳转和-location-href-有什么区别","link":"#vue-router-跳转和-location-href-有什么区别","children":[]},{"level":2,"title":"params 和 query 的区别","slug":"params-和-query-的区别","link":"#params-和-query-的区别","children":[]},{"level":2,"title":"Vue-router 导航守卫有哪些","slug":"vue-router-导航守卫有哪些","link":"#vue-router-导航守卫有哪些","children":[]}],"relativePath":"vue/vue-router.md","lastUpdated":1740908463000}'),e={name:"vue/vue-router.md"};function o(r,s,t,c,B,i){return a(),l("div",null,s[0]||(s[0]=[p(`<h1 id="vuerouter-路由从使用到源码" tabindex="-1">VueRouter 路由从使用到源码 <a class="header-anchor" href="#vuerouter-路由从使用到源码" aria-hidden="true">#</a></h1><h2 id="源码实现" tabindex="-1">源码实现 <a class="header-anchor" href="#源码实现" aria-hidden="true">#</a></h2><p>先看我写的 <a href="https://github.com/Sunny-117/mini-anything" target="_blank" rel="noreferrer">mini-router</a>，后续会补充文章</p><h2 id="vue-的路由实现原理" tabindex="-1"><strong>Vue 的路由实现原理</strong> <a class="header-anchor" href="#vue-的路由实现原理" aria-hidden="true">#</a></h2><h3 id="解释-hash-模式和-history-模式的实现原理" tabindex="-1"><strong>解释 <em>hash</em> 模式和 <em>history</em> 模式的实现原理</strong> <a class="header-anchor" href="#解释-hash-模式和-history-模式的实现原理" aria-hidden="true">#</a></h3><p><code>#</code> 后面 <em>hash</em> 值的变化，不会导致浏览器向服务器发出请求，浏览器不发出请求，就不会刷新页面；通过监听 <em>hashchange</em> 事件可以知道 <em>hash</em> 发生了哪些变化，然后根据 <em>hash</em> 变化来实现更新页面部分内容的操作。</p><p><em>history</em> 模式的实现，主要是 <em>HTML5</em> 标准发布的两个 <em>API</em>，<em>pushState</em> 和 <em>replaceState</em>，这两个 <em>API</em> 可以在改变 <em>URL</em>，但是不会发送请求。这样就可以监听 <em>url</em> 变化来实现更新页面部分内容的操作。</p><p>两种模式的区别：</p><ul><li>首先是在 <em>URL</em> 的展示上，<em>hash</em> 模式有“#”，<em>history</em> 模式没有</li><li>刷新页面时，<em>hash</em> 模式可以正常加载到 <em>hash</em> 值对应的页面，而 <em>history</em> 没有处理的话，会返回 <em>404</em>，一般需要后端将所有页面都配置重定向到首页路由</li><li>在兼容性上，<em>hash</em> 可以支持低版本浏览器和 <em>IE</em></li></ul><h3 id="router-和route-的区别" tabindex="-1">router 和<em>route</em> 的区别 <a class="header-anchor" href="#router-和route-的区别" aria-hidden="true">#</a></h3><blockquote><p><em>$route</em> 对象表示当前的路由信息，包含了当前 <em>URL</em> 解析得到的信息。包含当前的路径，参数，<em>query</em> 对象等。</p><ul><li><em>$route.path</em>：字符串，对应当前路由的路径，总是解析为绝对路径，如 &quot;/foo/bar&quot;。</li><li><em>$route.params</em>： 一个 key/value 对象，包含了 动态片段 和 全匹配片段，如果没有路由参数，就是一个空对象。</li><li><img src="https://g.yuque.com/gr/latex?route.query*%EF%BC%9A%E4%B8%80%E4%B8%AA%20key%2Fvalue%20%E5%AF%B9%E8%B1%A1%EF%BC%8C%E8%A1%A8%E7%A4%BA%20URL%20%E6%9F%A5%E8%AF%A2%E5%8F%82%E6%95%B0%E3%80%82%E4%BE%8B%E5%A6%82%E5%AF%B9%E4%BA%8E%E8%B7%AF%E5%BE%84%20*%2Ffoo%3Fuser%3D1*%EF%BC%8C%E5%88%99%E6%9C%89%20*#card=math&amp;code=route.query%2A%EF%BC%9A%E4%B8%80%E4%B8%AA%20key%2Fvalue%20%E5%AF%B9%E8%B1%A1%EF%BC%8C%E8%A1%A8%E7%A4%BA%20URL%20%E6%9F%A5%E8%AF%A2%E5%8F%82%E6%95%B0%E3%80%82%E4%BE%8B%E5%A6%82%E5%AF%B9%E4%BA%8E%E8%B7%AF%E5%BE%84%20%2A%2Ffoo%3Fuser%3D1%2A%EF%BC%8C%E5%88%99%E6%9C%89%20%2A&amp;id=BwfPx" alt=""><em>route.query.user == 1</em>，如果没有查询参数，则是个空对象。</li><li><em>$route.hash</em>：当前路由的 hash 值 (不带 #) ，如果没有 <em>hash</em> 值，则为空字符串。</li><li><em>$route.fullPath</em>：完成解析后的 <em>URL</em>，包含查询参数和 <em>hash</em> 的完整路径。</li><li><em>$route.matched</em>：数组，包含当前匹配的路径中所包含的所有片段所对应的配置参数对象。</li><li><em>$<a href="http://route.name" target="_blank" rel="noreferrer">route.name</a></em>：当前路径名字</li><li><em>$route.meta</em>：路由元信息</li></ul></blockquote><blockquote><p><em>$route</em> 对象出现在多个地方:</p><ul><li>组件内的 <em>this.$route</em> 和 <em>route watcher</em> 回调（监测变化处理）</li><li><em>router.match(location)</em> 的返回值</li><li><em>scrollBehavior</em> 方法的参数</li><li>导航钩子的参数，例如 <em>router.beforeEach</em> 导航守卫的钩子函数中，<em>to</em> 和 <em>from</em> 都是这个路由信息对象。</li></ul></blockquote><blockquote><p><em>$router</em> 对象是全局路由的实例，是 <em>router</em> 构造方法的实例。</p><p><em>$router</em> 对象常用的方法有：</p><ul><li><em>push</em>：向 <em>history</em> 栈添加一个新的记录</li><li><em>go</em>：页面路由跳转前进或者后退</li><li><em>replace</em>：替换当前的页面，不会向 <em>history</em> 栈添加一个新的记录</li></ul></blockquote><blockquote><p><strong><em>vueRouter</em> 有哪几种导航守卫？</strong></p><ul><li>全局前置/钩子：<em>beforeEach、beforeR-esolve、afterEach</em></li><li>路由独享的守卫：<em>beforeEnter</em></li><li>组件内的守卫：<em>beforeRouteEnter、beforeRouteUpdate、beforeRouteLeave</em></li></ul></blockquote><blockquote><p><strong>解释一下 <em>vueRouter</em> 的完整的导航解析流程是什么</strong></p><p>一次完整的导航解析流程如下：</p><ol><li>导航被触发。</li><li>在失活的组件里调用离开守卫。</li><li>调用全局的 <em>beforeEach</em> 守卫。</li><li>在重用的组件里调用 <em>beforeRouteUpdate</em> 守卫（<em>2.2+</em>）。</li><li>在路由配置里调用 <em>beforeEnter</em>。</li><li>解析异步路由组件。</li><li>在被激活的组件里调用 <em>beforeRouteEnter</em>。</li><li>调用全局的 <em>beforeResolve</em> 守卫（<em>2.5+</em>）。</li><li>导航被确认。</li><li>调用全局的 <em>afterEach</em> 钩子。</li><li>触发 <em>DOM</em> 更新。</li><li>用创建好的实例调用 <em>beforeRouteEnter</em> 守卫中传给 <em>next</em> 的回调函数。</li></ol></blockquote><h2 id="如何监听-pushstate-和-replacestate-的变化呢" tabindex="-1"><strong>如何监听 <em>pushstate</em> 和 <em>replacestate</em> 的变化呢？</strong> <a class="header-anchor" href="#如何监听-pushstate-和-replacestate-的变化呢" aria-hidden="true">#</a></h2><blockquote><p><em>History.replaceState</em> 和 <em>pushState</em> 不会触发 <em>popstate</em> 事件，所以我们可以通过在方法中创建一个新的全局事件来实现  <em>pushstate</em> 和 <em>replacestate</em> 变化的监听。</p><p>具体做法为：</p><p>这样就创建了 <em>2</em> 个全新的事件，事件名为 <em>pushState</em> 和 <em>replaceState</em>，我们就可以在全局监听：</p><p>这样就可以监听到 <em>pushState</em> 和 <em>replaceState</em> 行为。</p></blockquote><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">_wr</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">type</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">orig</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">history</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">rv</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">orig</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">apply</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">arguments</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Event</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">e</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">arguments</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">arguments</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">dispatchEvent</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">rv</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  };</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#E5C07B;">history</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">pushState</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">_wr</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;pushState&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">history</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">replaceState</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">_wr</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;replaceState&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#B392F0;"> _wr </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> (type) {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">var</span><span style="color:#B392F0;"> orig </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> history[type];</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> () {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">var</span><span style="color:#B392F0;"> rv </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">orig</span><span style="color:#B392F0;">.apply(</span><span style="color:#79B8FF;">this</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> arguments);</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">var</span><span style="color:#B392F0;"> e </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> Event(type);</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">e</span><span style="color:#B392F0;">.arguments </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> arguments;</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">window</span><span style="color:#B392F0;">.dispatchEvent(e);</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> rv;</span></span>
<span class="line"><span style="color:#B392F0;">  };</span></span>
<span class="line"><span style="color:#B392F0;">};</span></span>
<span class="line"><span style="color:#79B8FF;">history</span><span style="color:#B392F0;">.pushState </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> _wr(</span><span style="color:#FFAB70;">&quot;pushState&quot;</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#79B8FF;">history</span><span style="color:#B392F0;">.replaceState </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> _wr(</span><span style="color:#FFAB70;">&quot;replaceState&quot;</span><span style="color:#B392F0;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;replaceState&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;THEY DID IT AGAIN! replaceState 111111&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;pushState&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;THEY DID IT AGAIN! pushState 2222222&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#79B8FF;">window</span><span style="color:#B392F0;">.addEventListener(</span><span style="color:#FFAB70;">&quot;replaceState&quot;</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> (e) {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#FFAB70;">&quot;THEY DID IT AGAIN! replaceState 111111&quot;</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#B392F0;">});</span></span>
<span class="line"><span style="color:#79B8FF;">window</span><span style="color:#B392F0;">.addEventListener(</span><span style="color:#FFAB70;">&quot;pushState&quot;</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> (e) {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#FFAB70;">&quot;THEY DID IT AGAIN! pushState 2222222&quot;</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#B392F0;">});</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="路由模式" tabindex="-1">路由模式 <a class="header-anchor" href="#路由模式" aria-hidden="true">#</a></h2><p>路由模式决定了：</p><ol><li>路由从哪里获取访问路径</li><li>路由如何改变访问路径</li></ol><p><code>vue-router</code>提供了三种路由模式：</p><ol><li>hash：默认值。路由从浏览器地址栏中的 hash 部分获取路径，改变路径也是改变的 hash 部分。该模式兼容性最好。</li><li>history：路由从浏览器地址栏的<code>location.pathname</code>中获取路径，改变路径使用的 H5 的<code>history api</code>。该模式可以让地址栏最友好，但是需要浏览器支持<code>history api</code></li><li>abstract：路由从内存中获取路径，改变路径也只是改动内存中的值。这种模式通常应用到非浏览器环境中。</li></ol><blockquote><p>每一次刷新页面</p></blockquote><p>请求 inde.html 请求各种.js 请求各种.css 执行 Js 创建 vue 应用 渲染全部组件树 挂载到指定的 div 中</p><blockquote><p>不刷新</p></blockquote><p>执行一段 JS 代码：切换某个区域的组件 以上，所以推荐单页面应用</p><h2 id="vue-router-的懒加载如何实现" tabindex="-1">Vue-Router 的懒加载如何实现 <a class="header-anchor" href="#vue-router-的懒加载如何实现" aria-hidden="true">#</a></h2><p>非懒加载：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">List</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;@/components/list.vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">VueRouter</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">routes</span><span style="color:#ABB2BF;">: [{ </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;/list&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">component</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">List</span><span style="color:#ABB2BF;"> }],</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#B392F0;"> List </span><span style="color:#F97583;">from</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;@/components/list.vue&quot;</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">router</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> VueRouter({</span></span>
<span class="line"><span style="color:#B392F0;">  routes</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> [{ path</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;/list&quot;</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> component</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> List }]</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">});</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>（1）方案一(常用)：使用箭头函数+import 动态加载</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">List</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">import</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;@/components/list.vue&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">VueRouter</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">routes</span><span style="color:#ABB2BF;">: [{ </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;/list&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">component</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">List</span><span style="color:#ABB2BF;"> }],</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> List </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">import</span><span style="color:#B392F0;">(</span><span style="color:#FFAB70;">&quot;@/components/list.vue&quot;</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">router</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> VueRouter({</span></span>
<span class="line"><span style="color:#B392F0;">  routes</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> [{ path</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;/list&quot;</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> component</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> List }]</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">});</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>（2）方案二：使用箭头函数+require 动态加载</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Router</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">routes</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;/list&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#61AFEF;">component</span><span style="color:#ABB2BF;">: (</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">([</span><span style="color:#98C379;">&quot;@/components/list&quot;</span><span style="color:#ABB2BF;">], </span><span style="color:#E06C75;">resolve</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#ABB2BF;">  ],</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">router</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> Router({</span></span>
<span class="line"><span style="color:#B392F0;">  routes</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> [</span></span>
<span class="line"><span style="color:#B392F0;">    {</span></span>
<span class="line"><span style="color:#B392F0;">      path</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;/list&quot;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">      component</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> (resolve) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> require([</span><span style="color:#FFAB70;">&quot;@/components/list&quot;</span><span style="color:#B392F0;">]</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> resolve)</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  ]</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">});</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>（3）方案三：使用 webpack 的 require.ensure 技术，也可以实现按需加载。 这种情况下，多个路由指定相同的 chunkName，会合并打包成一个 js 文件。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// r就是resolve</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">List</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">r</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">require</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">ensure</span><span style="color:#ABB2BF;">([], () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">r</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;@/components/list&#39;</span><span style="color:#ABB2BF;">)), </span><span style="color:#98C379;">&#39;list&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 路由也是正常的写法  这种是官方推荐的写的 按模块划分懒加载</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Router</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">routes</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">  {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;/list&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">component</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">List</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;list&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;"> ]</span></span>
<span class="line"><span style="color:#ABB2BF;">}))</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#6B737C;">// r就是resolve</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> List </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> r </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">require</span><span style="color:#B392F0;">.ensure([]</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> r(require(</span><span style="color:#FFAB70;">&#39;@/components/list&#39;</span><span style="color:#B392F0;">))</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;list&#39;</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#6B737C;">// 路由也是正常的写法  这种是官方推荐的写的 按模块划分懒加载</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">router</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> Router({</span></span>
<span class="line"><span style="color:#B392F0;">  routes</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> [</span></span>
<span class="line"><span style="color:#B392F0;">  {</span></span>
<span class="line"><span style="color:#B392F0;">    path</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;/list&#39;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    component</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> List</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    name</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;list&#39;</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;"> ]</span></span>
<span class="line"><span style="color:#B392F0;">}))</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="如何获取页面的-hash-变化" tabindex="-1">如何获取页面的 hash 变化 <a class="header-anchor" href="#如何获取页面的-hash-变化" aria-hidden="true">#</a></h2><p><strong>（1）监听$route 的变化</strong></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 监听,当路由发生变化的时候执行</span></span>
<span class="line"><span style="color:#ABB2BF;">watch: {</span></span>
<span class="line"><span style="color:#ABB2BF;">  $route: {</span></span>
<span class="line"><span style="color:#ABB2BF;">    handler: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">val</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">oldVal</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 深度观察监听</span></span>
<span class="line"><span style="color:#ABB2BF;">    deep: </span><span style="color:#D19A66;">true</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">},</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#6B737C;">// 监听,当路由发生变化的时候执行</span></span>
<span class="line"><span style="color:#B392F0;">watch</span><span style="color:#BBBBBB;">:</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  $route</span><span style="color:#BBBBBB;">:</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    handler</span><span style="color:#BBBBBB;">:</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;">(val</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> oldVal){</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(val);</span></span>
<span class="line"><span style="color:#B392F0;">    }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">// 深度观察监听</span></span>
<span class="line"><span style="color:#B392F0;">    deep</span><span style="color:#BBBBBB;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">}</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><strong>（2）window.location.hash 读取#值</strong> window.location.hash 的值可读可写，读取来判断状态是否改变，写入时可以在不重载网页的前提下，添加一条历史访问记录。</p><h2 id="route-和-router-的区别" tabindex="-1"><code>$route 和$router</code> 的区别 <a class="header-anchor" href="#route-和-router-的区别" aria-hidden="true">#</a></h2><ul><li>$route 是“路由信息对象”，包括 path，params，hash，query，fullPath，matched，name 等路由信息参数</li><li>$router 是“路由实例”对象包括了路由的跳转方法，钩子函数等。</li></ul><h2 id="如何定义动态路由-如何获取传过来的动态参数" tabindex="-1">如何定义动态路由？如何获取传过来的动态参数？ <a class="header-anchor" href="#如何定义动态路由-如何获取传过来的动态参数" aria-hidden="true">#</a></h2><p><strong>（1）param 方式</strong></p><ul><li>配置路由格式：<code>/router/:id</code></li><li>传递的方式：在 path 后面跟上对应的值</li><li>传递后形成的路径：<code>/router/123</code></li></ul><p>1）路由定义</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//在APP.vue中</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">router-link</span><span style="color:#ABB2BF;"> </span><span style="color:#FFFFFF;">:to=&quot;&#39;/user/&#39;+userId&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">replace</span><span style="color:#ABB2BF;">&gt;用户&lt;/</span><span style="color:#E5C07B;">router-link</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//在index.js</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">   path: </span><span style="color:#98C379;">&#39;/user/:userid&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">   component: </span><span style="color:#E06C75;">User</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">},</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#6B737C;">//在APP.vue中</span></span>
<span class="line"><span style="color:#B392F0;">&lt;</span><span style="color:#79B8FF;">router-link</span><span style="color:#B392F0;"> :to=&quot;&#39;/user/&#39;+userId&quot; replace&gt;用户&lt;/</span><span style="color:#79B8FF;">router-link</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">//在index.js</span></span>
<span class="line"><span style="color:#B392F0;">{</span></span>
<span class="line"><span style="color:#B392F0;">   path</span><span style="color:#BBBBBB;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;/user/:userid&#39;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">   component</span><span style="color:#BBBBBB;">:</span><span style="color:#B392F0;"> User</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">}</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>2）路由跳转</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 方法1：</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">router-link</span><span style="color:#ABB2BF;"> </span><span style="color:#FFFFFF;">:to=&quot;{</span><span style="color:#ABB2BF;"> </span><span style="color:#FFFFFF;">name:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;users&#39;</span><span style="color:#FFFFFF;">,</span><span style="color:#ABB2BF;"> </span><span style="color:#FFFFFF;">params:</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">uname</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">wade</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">}</span><span style="color:#FFFFFF;">}&quot;&gt;按钮&lt;/router-link</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 方法2：</span></span>
<span class="line"><span style="color:#FFFFFF;">this.$router.push({name:&#39;users&#39;,params:{uname:wade}})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 方法3：</span></span>
<span class="line"><span style="color:#FFFFFF;">this.$router.push(&#39;/user/&#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#FFFFFF;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#FFFFFF;">wade)</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#6B737C;">// 方法1：</span></span>
<span class="line"><span style="color:#B392F0;">&lt;</span><span style="color:#79B8FF;">router-link</span><span style="color:#B392F0;"> :to=&quot;{ name: </span><span style="color:#FFAB70;">&#39;users&#39;</span><span style="color:#B392F0;">, params: { uname: wade }}&quot;&gt;按钮&lt;/router-link</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 方法2：</span></span>
<span class="line"><span style="color:#B392F0;">this.$router.push({name:&#39;users&#39;,params:{uname:wade}})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 方法3：</span></span>
<span class="line"><span style="color:#B392F0;">this.$router.push(&#39;/user/&#39; + wade)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>3）参数获取 通过 <code>$route.params.userid</code> 获取传递的值</p><p><strong>（2）query 方式</strong></p><ul><li>配置路由格式：<code>/router</code>，也就是普通配置</li><li>传递的方式：对象中使用 query 的 key 作为传递方式</li><li>传递后形成的路径：<code>/route?id=123</code></li></ul><p>1）路由定义</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//方式1：直接在router-link 标签上以对象的形式</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">router-link</span><span style="color:#ABB2BF;"> </span><span style="color:#FFFFFF;">:to=&quot;{path:&#39;/profile&#39;,query:{name:&#39;why&#39;,age:28,height:188}}&quot;&gt;档案&lt;/router-link&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 方式2：写成按钮以点击事件形式</span></span>
<span class="line"><span style="color:#FFFFFF;">&lt;button</span><span style="color:#ABB2BF;"> </span><span style="color:#FFFFFF;">@click=&#39;profileClick&#39;&gt;我的&lt;/button&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFFFFF;">profileClick(){</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#FFFFFF;">this.$router.push({</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#FFFFFF;">path:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;/profile&quot;</span><span style="color:#FFFFFF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#FFFFFF;">query:</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;kobi&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;28&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">height</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">198</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#FFFFFF;">});</span></span>
<span class="line"><span style="color:#FFFFFF;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#6B737C;">//方式1：直接在router-link 标签上以对象的形式</span></span>
<span class="line"><span style="color:#B392F0;">&lt;</span><span style="color:#79B8FF;">router-link</span><span style="color:#B392F0;"> :to=&quot;{path:&#39;/profile&#39;,query:{name:&#39;why&#39;,age:28,height:188}}&quot;&gt;档案&lt;/router-link&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 方式2：写成按钮以点击事件形式</span></span>
<span class="line"><span style="color:#B392F0;">&lt;button @click=&#39;profileClick&#39;&gt;我的&lt;/button&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">profileClick(){</span></span>
<span class="line"><span style="color:#B392F0;">  this.$router.push({</span></span>
<span class="line"><span style="color:#B392F0;">    path: </span><span style="color:#FFAB70;">&quot;/profile&quot;</span><span style="color:#B392F0;">,</span></span>
<span class="line"><span style="color:#B392F0;">    query: {</span></span>
<span class="line"><span style="color:#B392F0;">        name: </span><span style="color:#FFAB70;">&quot;kobi&quot;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">        age: </span><span style="color:#FFAB70;">&quot;28&quot;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">        height: </span><span style="color:#F8F8F8;">198</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"><span style="color:#B392F0;">  });</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>2）跳转方法</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 方法1：</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">router-link</span><span style="color:#ABB2BF;"> </span><span style="color:#FFFFFF;">:to=&quot;{</span><span style="color:#ABB2BF;"> </span><span style="color:#FFFFFF;">name:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;users&#39;</span><span style="color:#FFFFFF;">,</span><span style="color:#ABB2BF;"> </span><span style="color:#FFFFFF;">query:</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">uname</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">james</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">}</span><span style="color:#FFFFFF;">}&quot;&gt;按钮&lt;/router-link&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 方法2：</span></span>
<span class="line"><span style="color:#FFFFFF;">this.$router.push({</span><span style="color:#ABB2BF;"> </span><span style="color:#FFFFFF;">name:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;users&#39;</span><span style="color:#FFFFFF;">,</span><span style="color:#ABB2BF;"> </span><span style="color:#FFFFFF;">query:{</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">uname</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;font-style:italic;">james</span><span style="color:#ABB2BF;"> </span><span style="color:#FFFFFF;">}})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 方法3：</span></span>
<span class="line"><span style="color:#FFFFFF;">&lt;router-link</span><span style="color:#ABB2BF;"> </span><span style="color:#FFFFFF;">:to=&quot;{</span><span style="color:#ABB2BF;"> </span><span style="color:#FFFFFF;">path:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;/user&#39;</span><span style="color:#FFFFFF;">,</span><span style="color:#ABB2BF;"> </span><span style="color:#FFFFFF;">query:</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">uname</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;">james</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">}</span><span style="color:#FFFFFF;">}&quot;&gt;按钮&lt;/router-link&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 方法4：</span></span>
<span class="line"><span style="color:#FFFFFF;">this.$router.push({</span><span style="color:#ABB2BF;"> </span><span style="color:#FFFFFF;">path:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;/user&#39;</span><span style="color:#FFFFFF;">,</span><span style="color:#ABB2BF;"> </span><span style="color:#FFFFFF;">query:{</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">uname</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;font-style:italic;">james</span><span style="color:#ABB2BF;"> </span><span style="color:#FFFFFF;">}})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 方法5：</span></span>
<span class="line"><span style="color:#FFFFFF;">this.$router.push(&#39;/user?uname=&#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#FFFFFF;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#FFFFFF;">jsmes)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#6B737C;">// 方法1：</span></span>
<span class="line"><span style="color:#B392F0;">&lt;</span><span style="color:#79B8FF;">router-link</span><span style="color:#B392F0;"> :to=&quot;{ name: </span><span style="color:#FFAB70;">&#39;users&#39;</span><span style="color:#B392F0;">, query: { uname: james }}&quot;&gt;按钮&lt;/router-link&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 方法2：</span></span>
<span class="line"><span style="color:#B392F0;">this.$router.push({ name: </span><span style="color:#FFAB70;">&#39;users&#39;</span><span style="color:#B392F0;">, query:{ uname</span><span style="color:#BBBBBB;">:</span><span style="color:#B392F0;">james }})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 方法3：</span></span>
<span class="line"><span style="color:#B392F0;">&lt;router-link :to=&quot;{ path: </span><span style="color:#FFAB70;">&#39;/user&#39;</span><span style="color:#B392F0;">, query: { uname:james }}&quot;&gt;按钮&lt;/router-link&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 方法4：</span></span>
<span class="line"><span style="color:#B392F0;">this.$router.push({ path: </span><span style="color:#FFAB70;">&#39;/user&#39;</span><span style="color:#B392F0;">, query:{ uname</span><span style="color:#BBBBBB;">:</span><span style="color:#B392F0;">james }})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 方法5：</span></span>
<span class="line"><span style="color:#B392F0;">this.$router.push(&#39;/user?uname=&#39; + jsmes)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>3）获取参数</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#E5C07B;">通过$route</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">query</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">获取传递的值</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#79B8FF;">通过$route</span><span style="color:#B392F0;">.query 获取传递的值</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="vue-router-路由钩子在生命周期的体现" tabindex="-1">Vue-router 路由钩子在生命周期的体现 <a class="header-anchor" href="#vue-router-路由钩子在生命周期的体现" aria-hidden="true">#</a></h2><h3 id="一、vue-router-导航守卫" tabindex="-1">一、Vue-Router 导航守卫 <a class="header-anchor" href="#一、vue-router-导航守卫" aria-hidden="true">#</a></h3><p>有的时候，需要通过路由来进行一些操作，比如最常见的登录权限验证，当用户满足条件时，才让其进入导航，否则就取消跳转，并跳到登录页面让其登录。 为此有很多种方法可以植入路由的导航过程：全局的，单个路由独享的，或者组件级的</p><ol><li>全局路由钩子</li></ol><p>vue-router 全局有三个路由钩子;</p><ul><li>router.beforeEach 全局前置守卫 进入路由之前</li><li>router.beforeResolve 全局解析守卫（2.5.0+）在 beforeRouteEnter 调用之后调用</li><li>router.afterEach 全局后置钩子 进入路由之后</li></ul><p>具体使用 ∶</p><ul><li>beforeEach（判断是否登录了，没登录就跳转到登录页）</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">beforeEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">to</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">from</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">ifInfo</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$common</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSession</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;userData&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 判断是否登录的存储信息</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">ifInfo</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// sessionStorage里没有储存user信息</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">to</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;/&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#7F848E;font-style:italic;">//如果是登录页面路径，就直接next()</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#7F848E;font-style:italic;">//不然就跳转到登录</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">Message</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">warning</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;请重新登录！&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">location</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">href</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$loginUrl</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#79B8FF;">router</span><span style="color:#B392F0;">.beforeEach((to</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> from</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> next) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">let</span><span style="color:#B392F0;"> ifInfo </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Vue</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">$common</span><span style="color:#B392F0;">.getSession(</span><span style="color:#FFAB70;">&quot;userData&quot;</span><span style="color:#B392F0;">); </span><span style="color:#6B737C;">// 判断是否登录的存储信息</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">ifInfo) {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">// sessionStorage里没有储存user信息</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">to</span><span style="color:#B392F0;">.path </span><span style="color:#F97583;">==</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;/&quot;</span><span style="color:#B392F0;">) {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#6B737C;">//如果是登录页面路径，就直接next()</span></span>
<span class="line"><span style="color:#B392F0;">      next();</span></span>
<span class="line"><span style="color:#B392F0;">    } </span><span style="color:#F97583;">else</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#6B737C;">//不然就跳转到登录</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#79B8FF;">Message</span><span style="color:#B392F0;">.warning(</span><span style="color:#FFAB70;">&quot;请重新登录！&quot;</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#79B8FF;">window</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">location</span><span style="color:#B392F0;">.href </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Vue</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#B392F0;">.$loginUrl;</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"><span style="color:#B392F0;">  } </span><span style="color:#F97583;">else</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> next();</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">});</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><ul><li>afterEach （跳转之后滚动条回到顶部）</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">afterEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">to</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">from</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 跳转之后滚动条回到顶部</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">scrollTo</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#79B8FF;">router</span><span style="color:#B392F0;">.afterEach((to</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> from) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// 跳转之后滚动条回到顶部</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">window</span><span style="color:#B392F0;">.scrollTo(</span><span style="color:#F8F8F8;">0</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">0</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#B392F0;">});</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ol><li>单个路由独享钩子</li></ol><p><strong>beforeEnter</strong> 如果不想全局配置守卫的话，可以为某些路由单独配置守卫，有三个参数 ∶ to、from、next</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">default</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#ABB2BF;">  {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;/&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;login&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">component</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">login</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">beforeEnter</span><span style="color:#ABB2BF;">: (</span><span style="color:#E06C75;font-style:italic;">to</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">from</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;即将进入登录页面&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">];</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">default</span><span style="color:#B392F0;"> [</span></span>
<span class="line"><span style="color:#B392F0;">  {</span></span>
<span class="line"><span style="color:#B392F0;">    path</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;/&quot;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    name</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;login&quot;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    component</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> login</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    beforeEnter</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> (to</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> from</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> next) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#FFAB70;">&quot;即将进入登录页面&quot;</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#B392F0;">      next();</span></span>
<span class="line"><span style="color:#B392F0;">    }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">];</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ol><li>组件内钩子</li></ol><p>beforeRouteUpdate、beforeRouteEnter、beforeRouteLeave</p><p>这三个钩子都有三个参数 ∶to、from、next</p><ul><li>beforeRouteEnter∶ 进入组件前触发</li><li>beforeRouteUpdate∶ 当前地址改变并且改组件被复用时触发，举例来说，带有动态参数的路径 foo/∶id，在 /foo/1 和 /foo/2 之间跳转的时候，由于会渲染同样的 foa 组件，这个钩子在这种情况下就会被调用</li><li>beforeRouteLeave∶ 离开组件被调用</li></ul><p>注意点，beforeRouteEnter 组件内还访问不到 this，因为该守卫执行前组件实例还没有被创建，需要传一个回调给 next 来访问，例如：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#61AFEF;">beforeRouteEnter</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">to</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">from</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">next</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">from</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;/classProcess&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E5C07B;">target</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">isFromProcess</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">true</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    })</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#B392F0;">beforeRouteEnter(to</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> from</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> next) {</span></span>
<span class="line"><span style="color:#B392F0;">    next(target </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">from</span><span style="color:#B392F0;">.path </span><span style="color:#F97583;">==</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;/classProcess&#39;</span><span style="color:#B392F0;">) {</span></span>
<span class="line"><span style="color:#B392F0;">            </span><span style="color:#79B8FF;">target</span><span style="color:#B392F0;">.isFromProcess </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#B392F0;">        }</span></span>
<span class="line"><span style="color:#B392F0;">    })</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="二、vue-路由钩子在生命周期函数的体现" tabindex="-1">二、Vue 路由钩子在生命周期函数的体现 <a class="header-anchor" href="#二、vue-路由钩子在生命周期函数的体现" aria-hidden="true">#</a></h3><ol><li>完整的路由导航解析流程（不包括其他生命周期）</li></ol><ul><li>触发进入其他路由。</li><li>调用要离开路由的组件守卫 beforeRouteLeave</li><li>调用局前置守卫 ∶ beforeEach</li><li>在重用的组件里调用 beforeRouteUpdate</li><li>调用路由独享守卫 beforeEnter。</li><li>解析异步路由组件。</li><li>在将要进入的路由组件中调用 beforeRouteEnter</li><li>调用全局解析守卫 beforeResolve</li><li>导航被确认。</li><li>调用全局后置钩子的 afterEach 钩子。</li><li>触发 DOM 更新（mounted）。</li><li>执行 beforeRouteEnter 守卫中传给 next 的回调函数</li></ul><ol><li>触发钩子的完整顺序</li></ol><p>路由导航、keep-alive、和组件生命周期钩子结合起来的，触发顺序，假设是从 a 组件离开，第一次进入 b 组件 ∶</p><ul><li>beforeRouteLeave：路由组件的组件离开路由前钩子，可取消路由离开。</li><li>beforeEach：路由全局前置守卫，可用于登录验证、全局路由 loading 等。</li><li>beforeEnter：路由独享守卫</li><li>beforeRouteEnter：路由组件的组件进入路由前钩子。</li><li>beforeResolve：路由全局解析守卫</li><li>afterEach：路由全局后置钩子</li><li>beforeCreate：组件生命周期，不能访问 tAis。</li><li>created;组件生命周期，可以访问 tAis，不能访问 dom。</li><li>beforeMount：组件生命周期</li><li>deactivated：离开缓存组件 a，或者触发 a 的 beforeDestroy 和 destroyed 组件销毁钩子。</li><li>mounted：访问/操作 dom。</li><li>activated：进入缓存组件，进入 a 的嵌套子组件（如果有的话）。</li><li>执行 beforeRouteEnter 回调函数 next。</li></ul><ol><li>导航行为被触发到导航完成的整个过程</li></ol><ul><li>导航行为被触发，此时导航未被确认。</li><li>在失活的组件里调用离开守卫 beforeRouteLeave。</li><li>调用全局的 beforeEach 守卫。</li><li>在重用的组件里调用 beforeRouteUpdate 守卫(2.2+)。</li><li>在路由配置里调用 beforeEnteY。</li><li>解析异步路由组件（如果有）。</li><li>在被激活的组件里调用 beforeRouteEnter。</li><li>调用全局的 beforeResolve 守卫（2.5+），标示解析阶段完成。</li><li>导航被确认。</li><li>调用全局的 afterEach 钩子。</li><li>非重用组件，开始组件实例的生命周期：beforeCreate&amp;created、beforeMount&amp;mounted</li><li>触发 DOM 更新。</li><li>用创建好的实例调用 beforeRouteEnter 守卫中传给 next 的回调函数。</li><li>导航完成</li></ul><h2 id="vue-router-跳转和-location-href-有什么区别" tabindex="-1">Vue-router 跳转和 location.href 有什么区别 <a class="header-anchor" href="#vue-router-跳转和-location-href-有什么区别" aria-hidden="true">#</a></h2><ul><li>使用 <code>location.href= /url</code>来跳转，简单方便，但是刷新了页面；</li><li>使用 <code>history.pushState( /url )</code> ，无刷新页面，静态跳转；</li><li>引进 router ，然后使用 <code>router.push( /url )</code> 来跳转，使用了 <code>diff</code> 算法，实现了按需加载，减少了 dom 的消耗。其实使用 router 跳转和使用 <code>history.pushState()</code> 没什么差别的，因为 vue-router 就是用了 <code>history.pushState()</code> ，尤其是在 history 模式下。</li></ul><h2 id="params-和-query-的区别" tabindex="-1">params 和 query 的区别 <a class="header-anchor" href="#params-和-query-的区别" aria-hidden="true">#</a></h2><p><strong>用法</strong>：query 要用 path 来引入，params 要用 name 来引入，接收参数都是类似的，分别是 <code>this.$route.query.name</code> 和 <code>this.$route.params.name</code> 。</p><p><strong>url 地址显示</strong>：query 更加类似于 ajax 中 get 传参，params 则类似于 post，说的再简单一点，前者在浏览器地址栏中显示参数，后者则不显示</p><p><strong>注意</strong>：query 刷新不会丢失 query 里面的数据 params 刷新会丢失 params 里面的数据。</p><h2 id="vue-router-导航守卫有哪些" tabindex="-1">Vue-router 导航守卫有哪些 <a class="header-anchor" href="#vue-router-导航守卫有哪些" aria-hidden="true">#</a></h2><ul><li>全局前置/钩子：beforeEach、beforeResolve、afterEach</li><li>路由独享的守卫：beforeEnter</li><li>组件内的守卫：beforeRouteEnter、beforeRouteUpdate、beforeRouteLeave</li></ul>`,95)]))}const u=n(e,[["render",o]]);export{F as __pageData,u as default};
