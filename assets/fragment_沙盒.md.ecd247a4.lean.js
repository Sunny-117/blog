import{_ as n,o as a,c as l,a as p}from"./app.f9cf8683.js";const i=JSON.parse('{"title":"请设计一个不能操作 DOM 和调接口的环境","description":"","frontmatter":{},"headers":[{"level":2,"title":"实现思路","slug":"实现思路","link":"#实现思路","children":[]},{"level":2,"title":"如何禁止开发者操作 DOM ？","slug":"如何禁止开发者操作-dom","link":"#如何禁止开发者操作-dom","children":[]},{"level":2,"title":"如何禁止开发者调接口 ？","slug":"如何禁止开发者调接口","link":"#如何禁止开发者调接口","children":[]},{"level":2,"title":"最终方案：沙箱（Sandbox）","slug":"最终方案-沙箱-sandbox","link":"#最终方案-沙箱-sandbox","children":[]},{"level":2,"title":"沙箱的多种实现方式","slug":"沙箱的多种实现方式","link":"#沙箱的多种实现方式","children":[{"level":3,"title":"简陋的沙箱","slug":"简陋的沙箱","link":"#简陋的沙箱","children":[]},{"level":3,"title":"With + Proxy 实现沙箱","slug":"with-proxy-实现沙箱","link":"#with-proxy-实现沙箱","children":[]},{"level":3,"title":"天然的优质沙箱（iframe）","slug":"天然的优质沙箱-iframe","link":"#天然的优质沙箱-iframe","children":[]}]},{"level":2,"title":"需求实现","slug":"需求实现","link":"#需求实现","children":[]},{"level":2,"title":"持续优化","slug":"持续优化","link":"#持续优化","children":[]}],"relativePath":"fragment/沙盒.md","lastUpdated":1740908463000}'),o={name:"fragment/沙盒.md"};function e(c,s,r,t,B,y){return a(),l("div",null,s[0]||(s[0]=[p(`<h1 id="请设计一个不能操作-dom-和调接口的环境" tabindex="-1">请设计一个不能操作 DOM 和调接口的环境 <a class="header-anchor" href="#请设计一个不能操作-dom-和调接口的环境" aria-hidden="true">#</a></h1><h2 id="实现思路" tabindex="-1">实现思路 <a class="header-anchor" href="#实现思路" aria-hidden="true">#</a></h2><p>1）利用 iframe 创建沙箱，取出其中的原生浏览器全局对象作为沙箱的全局对象</p><p>2）设置一个黑名单，若访问黑名单中的变量，则直接报错，实现阻止\\隔离的效果</p><p>3）在黑名单中添加 document 字段，来实现禁止开发者操作 DOM</p><p>4）在黑名单中添加 XMLHttpRequest、fetch、WebSocket 字段，实现禁用原生的方式调用接口</p><p>5）若访问当前全局对象中不存在的变量，则直接报错，实现禁用三方库调接口</p><p>6）最后还要拦截对 window 对象的访问，防止通过 window.document 来操作 DOM，避免沙箱逃逸</p><p>下面聊一聊，为何这样设计，以及中间会遇到什么问题</p><h2 id="如何禁止开发者操作-dom" tabindex="-1">如何禁止开发者操作 DOM ？ <a class="header-anchor" href="#如何禁止开发者操作-dom" aria-hidden="true">#</a></h2><p>在页面中，可以通过 document 对象来获取 HTML 元素，进行增删改查的 DOM 操作</p><p>如何禁止开发者操作 DOM，转化为如何阻止开发者获取 document 对象</p><p>1）传统思路</p><p>简单粗暴点，直接修改 window.document 的值，让开发者无法获取 document</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 将document设置为null</span></span>
<span class="line"><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">document</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 设置无效，打印结果还是document</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">document</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 删除document</span></span>
<span class="line"><span style="color:#C678DD;">delete</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">document</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 删除无效，打印结果还是document</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">document</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#6B737C;">// 将document设置为null</span></span>
<span class="line"><span style="color:#79B8FF;">window</span><span style="color:#B392F0;">.document </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">null</span><span style="color:#B392F0;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 设置无效，打印结果还是document</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#79B8FF;">window</span><span style="color:#B392F0;">.document);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 删除document</span></span>
<span class="line"><span style="color:#F97583;">delete</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">window</span><span style="color:#B392F0;">.document;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 删除无效，打印结果还是document</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#79B8FF;">window</span><span style="color:#B392F0;">.document);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>好吧，document 修改不了也删除不了 🤔</p><p>使用 Object.getOwnPropertyDescriptor 查看，会发现 window.document 的 configurable 属性为 false（不可配置的）</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getOwnPropertyDescriptor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">window</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;document&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// {get: ƒ, set: undefined, enumerable: true, configurable: false}</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#79B8FF;">Object</span><span style="color:#B392F0;">.getOwnPropertyDescriptor(window</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;document&quot;</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#6B737C;">// {get: ƒ, set: undefined, enumerable: true, configurable: false}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>configurable 决定了是否可以修改属性描述对象，也就是说，configurable 为 false 时，value、writable、enumerable 和 configurable 都不能被修改，以及无法被删除</p><p>2）有点高大上的思路</p><p>既然 document 对象修改不了，那如果环境中原本就没有 document 对象，是不是就可以实现该需求？ 说到环境中没有 document 对象， Web Worker 直呼内行，作者曾在 <a href="https://github.com/xy-sea/blog/blob/main/markdown/%E4%B8%80%E6%96%87%E5%BD%BB%E5%BA%95%E4%BA%86%E8%A7%A3Web%20Worker%EF%BC%8C%E5%8D%81%E4%B8%87%E6%9D%A1%E6%95%B0%E6%8D%AE%E9%83%BD%E6%98%AF%E5%BC%9F%E5%BC%9F.md" target="_blank" rel="noreferrer">《一文彻底了解 Web Worker，十万、百万条数据都是弟弟 🔥》 </a>中聊过如何使用 Web Worker，和对应的特性</p><p>并且 Web Worker 更狠，不但没有 document 对象，连 window 对象也没有 😂</p><p>在 worker 线程中打印 window</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#61AFEF;">onmessage</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">window</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 浏览器直接报错</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">postMessage</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#B392F0;">onmessage </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> (e) {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(window); </span><span style="color:#6B737C;">// 浏览器直接报错</span></span>
<span class="line"><span style="color:#B392F0;">  postMessage();</span></span>
<span class="line"><span style="color:#B392F0;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>在 Web Worker 线程的运行环境中无法访问 document 对象，这一条符合当前的需求，但是该环境中能获取 XMLHttpRequest 对象，可以发送 ajax 请求，不符合不能调接口的要求</p><h2 id="如何禁止开发者调接口" tabindex="-1">如何禁止开发者调接口 ？ <a class="header-anchor" href="#如何禁止开发者调接口" aria-hidden="true">#</a></h2><p>常规调接口方式有：</p><p>1）原生方式：XMLHttpRequest、fetch、WebSocket、jsonp、form 表单</p><p>2）三方实现：axios、jquery、request 等众多开源库</p><p>禁用原生方式调接口的思路：</p><p>1）XMLHttpRequest、fetch、WebSocket 这几种情况，可以禁止用户访问这些对象</p><p>2）jsonp、form 这两种方式，需要创建 script 或 form 标签，依然可以通过禁止开发者操作 DOM 的方式解决，不需要单独处理</p><p>如何禁用三方库调接口呢？三方库很多，没办法全部列出来，来进行逐一排除，禁止调接口的路好像也被封死了……😰</p><h2 id="最终方案-沙箱-sandbox" tabindex="-1">最终方案：沙箱（Sandbox） <a class="header-anchor" href="#最终方案-沙箱-sandbox" aria-hidden="true">#</a></h2><p>通过上面的分析，传统的思路确实解决不了当前的需求</p><p><strong>阻止开发者操作 DOM 和调接口，沙箱说：这个我熟啊，拦截隔离这类的活，我最拿手了 😀</strong></p><p>沙箱（Sandbox） 是一种安全机制，为运行中的程序提供隔离环境，通常用于执行未经测试或不受信任的程序或代码，它会为待执行的程序创建一个独立的执行环境，内部程序的执行不会影响到外部程序的运行</p><p>前端沙箱的使用场景：</p><p>1）Chrome 浏览器打开的每个页面就是一个沙箱，保证彼此独立互不影响</p><p>2）执行 jsonp 请求回来的字符串时或引入不知名第三方 JS 库时，可能需要创造一个沙箱来执行这些代码</p><p>3）Vue 模板表达式的计算是运行在一个沙箱中，模板字符串中的表达式只能获取部分全局对象，详情见 <a href="https://github.com/vuejs/vue/blob/v2.6.10/src/core/instance/proxy.js" target="_blank" rel="noreferrer">源码</a></p><p>4）微前端框架 qiankun ，为了实现 js 隔离，在多种场景下均使用了沙箱</p><h2 id="沙箱的多种实现方式" tabindex="-1">沙箱的多种实现方式 <a class="header-anchor" href="#沙箱的多种实现方式" aria-hidden="true">#</a></h2><p>先聊下 js with 这个关键字：作用在于改变作用域，可以将某个对象添加到作用域链的顶部</p><p>with 对于沙箱的意义：可以实现所有变量均来自可靠或自主实现的上下文环境，而不会从全局的执行环境中取值，相当于做了一层拦截，实现隔离的效果</p><h3 id="简陋的沙箱" tabindex="-1">简陋的沙箱 <a class="header-anchor" href="#简陋的沙箱" aria-hidden="true">#</a></h3><p>实现这样一个沙箱，要求程序中访问的所有变量，均来自可靠或自主实现的上下文环境，而不会从全局的执行环境中取值</p><p>举个 🌰： ctx 作为执行上下文对象，待执行程序 code 可以访问到的变量，必须都来自 ctx 对象</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// ctx 执行上下文对象</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">func</span><span style="color:#ABB2BF;">: (</span><span style="color:#E06C75;font-style:italic;">variable</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">variable</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">foo</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;f1&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 待执行程序</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">code</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">\`func(foo)\`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#6B737C;">// ctx 执行上下文对象</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">ctx</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  func</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> (variable) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(variable);</span></span>
<span class="line"><span style="color:#B392F0;">  }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  foo</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;f1&quot;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 待执行程序</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">code</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">\`func(foo)\`</span><span style="color:#B392F0;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>沙箱示例：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 定义全局变量foo</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">foo</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;foo1&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 执行上下文对象</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">func</span><span style="color:#ABB2BF;">: (</span><span style="color:#E06C75;font-style:italic;">variable</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">variable</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">foo</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;f1&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 非常简陋的沙箱</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">veryPoorSandbox</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">code</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">ctx</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 使用with，将eval函数执行时的执行上下文指定为ctx</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">with</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">ctx</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">eval</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">code</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 待执行程序</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">code</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">\`func(foo)\`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">veryPoorSandbox</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">code</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">ctx</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 打印结果：&quot;f1&quot;，不是最外层的全局变量&quot;foo1&quot;</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#6B737C;">// 定义全局变量foo</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#B392F0;"> foo </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;foo1&quot;</span><span style="color:#B392F0;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 执行上下文对象</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">ctx</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  func</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> (variable) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(variable);</span></span>
<span class="line"><span style="color:#B392F0;">  }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  foo</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;f1&quot;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 非常简陋的沙箱</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> veryPoorSandbox(code</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> ctx) {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// 使用with，将eval函数执行时的执行上下文指定为ctx</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">with</span><span style="color:#B392F0;"> (ctx) {</span></span>
<span class="line"><span style="color:#B392F0;">    eval(code);</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 待执行程序</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">code</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">\`func(foo)\`</span><span style="color:#B392F0;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">veryPoorSandbox(code</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> ctx);</span></span>
<span class="line"><span style="color:#6B737C;">// 打印结果：&quot;f1&quot;，不是最外层的全局变量&quot;foo1&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>这个沙箱有一个明显的问题，若提供的 ctx 上下文对象中，没有找到某个变量时，代码仍会沿着作用域链一层层向上查找 假如上文示例中的 ctx 对象没有设置 foo 属性，打印的结果还是外层作用域的 foo1</p><h3 id="with-proxy-实现沙箱" tabindex="-1">With + Proxy 实现沙箱 <a class="header-anchor" href="#with-proxy-实现沙箱" aria-hidden="true">#</a></h3><p>希望沙箱中的代码只在手动提供的上下文对象中查找变量，如果上下文对象中不存在该变量，则提示对应的错误</p><p>举个 🌰： ctx 作为执行上下文对象，待执行程序 code 可以访问到的变量，必须都来自 ctx 对象，如果 ctx 对象中不存在该变量，直接报错，不再通过作用域链向上查找</p><p>实现步骤：</p><p>1）使用 Proxy.has() 来拦截 with 代码块中的任意变量的访问</p><p>2）设置一个白名单，在白名单内的变量可以正常走作用域链的访问方式，不在白名单内的变量，会继续判断是否存 ctx 对象中，存在则正常访问，不存在则直接报错</p><p>3）使用 new Function 替代 eval，使用 new Function() 运行代码比 eval 更为好一些，函数的参数提供了清晰的接口来运行代码</p><p><a href="https://www.jianshu.com/p/db7ec7b51933" target="_blank" rel="noreferrer">new Function 与 eval 的区别</a></p><p>沙箱示例：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">foo</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;foo1&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 执行上下文对象</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">func</span><span style="color:#ABB2BF;">: (</span><span style="color:#E06C75;font-style:italic;">variable</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">variable</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 构造一个 with 来包裹需要执行的代码，返回 with 代码块的一个函数实例</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">withedYourCode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">code</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">code</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;with(shadow) {&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">code</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;}&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Function</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;shadow&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">code</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 可访问全局作用域的白名单列表</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">access_white_list</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&quot;func&quot;</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 待执行程序</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">code</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">\`func(foo)\`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 执行上下文对象的代理对象</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">ctxProxy</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Proxy</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">ctx</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">has</span><span style="color:#ABB2BF;">: (</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">prop</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// has 可以拦截 with 代码块中任意属性的访问</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">access_white_list</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">includes</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">prop</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#7F848E;font-style:italic;">// 在可访问的白名单内，可继续向上查找</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">target</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">hasOwnProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">prop</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">target</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">hasOwnProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">prop</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">throw</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`Not found - </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">prop</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">!\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 没那么简陋的沙箱</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">littlePoorSandbox</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">code</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">ctx</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 将 this 指向手动构造的全局代理对象</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">withedYourCode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">code</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">ctx</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">ctx</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">littlePoorSandbox</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">code</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">ctxProxy</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 执行func(foo)，报错： Uncaught Error: Not found - foo!</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#B392F0;"> foo </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;foo1&quot;</span><span style="color:#B392F0;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 执行上下文对象</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">ctx</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  func</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> (variable) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(variable);</span></span>
<span class="line"><span style="color:#B392F0;">  }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 构造一个 with 来包裹需要执行的代码，返回 with 代码块的一个函数实例</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> withedYourCode(code) {</span></span>
<span class="line"><span style="color:#B392F0;">  code </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;with(shadow) {&quot;</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">+</span><span style="color:#B392F0;"> code </span><span style="color:#F97583;">+</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;}&quot;</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> Function(</span><span style="color:#FFAB70;">&quot;shadow&quot;</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> code);</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 可访问全局作用域的白名单列表</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">access_white_list</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> [</span><span style="color:#FFAB70;">&quot;func&quot;</span><span style="color:#B392F0;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 待执行程序</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">code</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">\`func(foo)\`</span><span style="color:#B392F0;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 执行上下文对象的代理对象</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">ctxProxy</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> Proxy(ctx</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  has</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> (target</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> prop) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">// has 可以拦截 with 代码块中任意属性的访问</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">access_white_list</span><span style="color:#B392F0;">.includes(prop)) {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#6B737C;">// 在可访问的白名单内，可继续向上查找</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">target</span><span style="color:#B392F0;">.hasOwnProperty(prop);</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#F97583;">!</span><span style="color:#79B8FF;">target</span><span style="color:#B392F0;">.hasOwnProperty(prop)) {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">throw</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> Error(</span><span style="color:#FFAB70;">\`Not found - </span><span style="color:#F97583;">\${</span><span style="color:#B392F0;">prop</span><span style="color:#F97583;">}</span><span style="color:#FFAB70;">!\`</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">true</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">  }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 没那么简陋的沙箱</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> littlePoorSandbox(code</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> ctx) {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// 将 this 指向手动构造的全局代理对象</span></span>
<span class="line"><span style="color:#B392F0;">  withedYourCode(code).call(ctx</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> ctx);</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"><span style="color:#B392F0;">littlePoorSandbox(code</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> ctxProxy);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 执行func(foo)，报错： Uncaught Error: Not found - foo!</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br></div></div><h3 id="天然的优质沙箱-iframe" tabindex="-1">天然的优质沙箱（iframe） <a class="header-anchor" href="#天然的优质沙箱-iframe" aria-hidden="true">#</a></h3><p>iframe 标签可以创造一个独立的浏览器原生级别的运行环境，这个环境由浏览器实现了与主环境的隔离 利用 iframe 来实现一个沙箱是目前最方便、简单、安全的方法，可以把 iframe.contentWindow 作为沙箱执行的全局 window 对象</p><p>沙箱示例：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 沙箱全局代理对象类</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">SandboxGlobalProxy</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">sharedState</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 创建一个 iframe 标签，取出其中的原生浏览器全局对象作为沙箱的全局对象</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">iframe</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createElement</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;iframe&quot;</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;about:blank&quot;</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">iframe</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">style</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">display</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;none&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">body</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">appendChild</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">iframe</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// sandboxGlobal作为沙箱运行时的全局对象</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">sandboxGlobal</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">iframe</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">contentWindow</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Proxy</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">sandboxGlobal</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#61AFEF;">has</span><span style="color:#ABB2BF;">: (</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">prop</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// has 可以拦截 with 代码块中任意属性的访问</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">sharedState</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">includes</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">prop</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#7F848E;font-style:italic;">// 如果属性存在于共享的全局状态中，则让其沿着原型链在外层查找</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// 如果没有该属性，直接报错</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">target</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">hasOwnProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">prop</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#C678DD;">throw</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`Not find: </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">prop</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">!\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// 属性存在，返回sandboxGlobal中的值</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">      },</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 构造一个 with 来包裹需要执行的代码，返回 with 代码块的一个函数实例</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">withedYourCode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">code</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">code</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;with(sandbox) {&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">code</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;}&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Function</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;sandbox&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">code</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">maybeAvailableSandbox</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">code</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">ctx</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">withedYourCode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">code</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">ctx</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">ctx</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 要执行的代码</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">code</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">\`</span></span>
<span class="line"><span style="color:#98C379;">  console.log(history == window.history) // 打印结果为 false</span></span>
<span class="line"><span style="color:#98C379;">  window.abc = &#39;sandbox&#39;</span></span>
<span class="line"><span style="color:#98C379;">  Object.prototype.toString = () =&gt; {</span></span>
<span class="line"><span style="color:#98C379;">      console.log(&#39;Traped!&#39;)</span></span>
<span class="line"><span style="color:#98C379;">  }</span></span>
<span class="line"><span style="color:#98C379;">  console.log(window.abc) // sandbox</span></span>
<span class="line"><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// sharedGlobal作为与外部执行环境共享的全局对象</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// code中获取的history为最外层作用域的history</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">sharedGlobal</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&quot;history&quot;</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">globalProxy</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">SandboxGlobalProxy</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">sharedGlobal</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">maybeAvailableSandbox</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">code</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">globalProxy</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 对外层的window对象没有影响</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">abc</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// 并没有打印 Traped</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#6B737C;">// 沙箱全局代理对象类</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#B392F0;"> SandboxGlobalProxy {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">constructor</span><span style="color:#B392F0;">(sharedState) {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">// 创建一个 iframe 标签，取出其中的原生浏览器全局对象作为沙箱的全局对象</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">iframe</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">document</span><span style="color:#B392F0;">.createElement(</span><span style="color:#FFAB70;">&quot;iframe&quot;</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> { url</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;about:blank&quot;</span><span style="color:#B392F0;"> });</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">iframe</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">style</span><span style="color:#B392F0;">.display </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;none&quot;</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">document</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">body</span><span style="color:#B392F0;">.appendChild(iframe);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">// sandboxGlobal作为沙箱运行时的全局对象</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">sandboxGlobal</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">iframe</span><span style="color:#B392F0;">.contentWindow;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> Proxy(sandboxGlobal</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">      has</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> (target</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> prop) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#6B737C;">// has 可以拦截 with 代码块中任意属性的访问</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">sharedState</span><span style="color:#B392F0;">.includes(prop)) {</span></span>
<span class="line"><span style="color:#B392F0;">          </span><span style="color:#6B737C;">// 如果属性存在于共享的全局状态中，则让其沿着原型链在外层查找</span></span>
<span class="line"><span style="color:#B392F0;">          </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">false</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#6B737C;">// 如果没有该属性，直接报错</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#F97583;">!</span><span style="color:#79B8FF;">target</span><span style="color:#B392F0;">.hasOwnProperty(prop)) {</span></span>
<span class="line"><span style="color:#B392F0;">          </span><span style="color:#F97583;">throw</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> Error(</span><span style="color:#FFAB70;">\`Not find: </span><span style="color:#F97583;">\${</span><span style="color:#B392F0;">prop</span><span style="color:#F97583;">}</span><span style="color:#FFAB70;">!\`</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#B392F0;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#6B737C;">// 属性存在，返回sandboxGlobal中的值</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">true</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">      }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    });</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 构造一个 with 来包裹需要执行的代码，返回 with 代码块的一个函数实例</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> withedYourCode(code) {</span></span>
<span class="line"><span style="color:#B392F0;">  code </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;with(sandbox) {&quot;</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">+</span><span style="color:#B392F0;"> code </span><span style="color:#F97583;">+</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;}&quot;</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> Function(</span><span style="color:#FFAB70;">&quot;sandbox&quot;</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> code);</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> maybeAvailableSandbox(code</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> ctx) {</span></span>
<span class="line"><span style="color:#B392F0;">  withedYourCode(code).call(ctx</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> ctx);</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 要执行的代码</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">code</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">\`</span></span>
<span class="line"><span style="color:#FFAB70;">  console.log(history == window.history) // 打印结果为 false</span></span>
<span class="line"><span style="color:#FFAB70;">  window.abc = &#39;sandbox&#39;</span></span>
<span class="line"><span style="color:#FFAB70;">  Object.prototype.toString = () =&gt; {</span></span>
<span class="line"><span style="color:#FFAB70;">      console.log(&#39;Traped!&#39;)</span></span>
<span class="line"><span style="color:#FFAB70;">  }</span></span>
<span class="line"><span style="color:#FFAB70;">  console.log(window.abc) // sandbox</span></span>
<span class="line"><span style="color:#FFAB70;">\`</span><span style="color:#B392F0;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// sharedGlobal作为与外部执行环境共享的全局对象</span></span>
<span class="line"><span style="color:#6B737C;">// code中获取的history为最外层作用域的history</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">sharedGlobal</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> [</span><span style="color:#FFAB70;">&quot;history&quot;</span><span style="color:#B392F0;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">globalProxy</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> SandboxGlobalProxy(sharedGlobal);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">maybeAvailableSandbox(code</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> globalProxy);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 对外层的window对象没有影响</span></span>
<span class="line"><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#79B8FF;">window</span><span style="color:#B392F0;">.abc); </span><span style="color:#6B737C;">// undefined</span></span>
<span class="line"><span style="color:#79B8FF;">Object</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#B392F0;">.toString(); </span><span style="color:#6B737C;">// 并没有打印 Traped</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br></div></div><p>可以看到，沙箱中对 window 的所有操作，都没有影响到外层的 window，实现了隔离的效果 😘</p><h2 id="需求实现" tabindex="-1">需求实现 <a class="header-anchor" href="#需求实现" aria-hidden="true">#</a></h2><p>继续使用上述的 iframe 标签来创建沙箱，代码主要修改点</p><p>1）设置 blacklist 黑名单，添加 document、XMLHttpRequest、fetch、WebSocket 来禁止开发者操作 DOM 和调接口</p><p>2）判断要访问的变量，是否在当前环境的 window 对象中，不在的直接报错，实现禁止通过三方库调接口</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 设置黑名单</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">blacklist</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&quot;document&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;XMLHttpRequest&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;fetch&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;WebSocket&quot;</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 黑名单中的变量禁止访问</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">blacklist</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">includes</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">prop</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">throw</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`Can&#39;t use: </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">prop</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">!\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#6B737C;">// 设置黑名单</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">blacklist</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> [</span><span style="color:#FFAB70;">&quot;document&quot;</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;XMLHttpRequest&quot;</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;fetch&quot;</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;WebSocket&quot;</span><span style="color:#B392F0;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 黑名单中的变量禁止访问</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">blacklist</span><span style="color:#B392F0;">.includes(prop)) {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">throw</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> Error(</span><span style="color:#FFAB70;">\`Can&#39;t use: </span><span style="color:#F97583;">\${</span><span style="color:#B392F0;">prop</span><span style="color:#F97583;">}</span><span style="color:#FFAB70;">!\`</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>但有个很严重的漏洞，如果开发者通过 window.document 来获取 document 对象，依然是可以操作 DOM 的 😱 需要在黑名单中加入 window 字段，来解决这个沙箱逃逸的漏洞，虽然把 window 加入了黑名单，但 window 上的方法，如 open、close 等，依然是可以正常获取使用的</p><p>最终代码：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 沙箱全局代理对象类</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">SandboxGlobalProxy</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">blacklist</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 创建一个 iframe 标签，取出其中的原生浏览器全局对象作为沙箱的全局对象</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">iframe</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createElement</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;iframe&quot;</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;about:blank&quot;</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">iframe</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">style</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">display</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;none&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">body</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">appendChild</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">iframe</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 获取当前HTMLIFrameElement的Window对象</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">sandboxGlobal</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">iframe</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">contentWindow</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Proxy</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">sandboxGlobal</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#7F848E;font-style:italic;">// has 可以拦截 with 代码块中任意属性的访问</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#61AFEF;">has</span><span style="color:#ABB2BF;">: (</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">prop</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// 黑名单中的变量禁止访问</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">blacklist</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">includes</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">prop</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#C678DD;">throw</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`Can&#39;t use: </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">prop</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">!\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// sandboxGlobal对象上不存在的属性，直接报错，实现禁用三方库调接口</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">target</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">hasOwnProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">prop</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#C678DD;">throw</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`Not find: </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">prop</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">!\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// 返回true，获取当前提供上下文对象中的变量；如果返回false，会继续向上层作用域链中查找</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">      },</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 使用with关键字，来改变作用域</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">withedYourCode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">code</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">code</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;with(sandbox) {&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">code</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;}&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Function</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;sandbox&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">code</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 将指定的上下文对象，添加到待执行代码作用域的顶部</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">makeSandbox</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">code</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">ctx</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">withedYourCode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">code</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">ctx</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">ctx</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 待执行的代码code，获取document对象</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">code</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">\`console.log(document)\`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 设置黑名单</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 经过小伙伴的指导，新添加Image字段，禁止使用new Image来调接口</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">blacklist</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#98C379;">&quot;window&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#98C379;">&quot;document&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#98C379;">&quot;XMLHttpRequest&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#98C379;">&quot;fetch&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#98C379;">&quot;WebSocket&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#98C379;">&quot;Image&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 将globalProxy对象，添加到新环境作用域链的顶部</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">globalProxy</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">SandboxGlobalProxy</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">blacklist</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">makeSandbox</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">code</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">globalProxy</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#6B737C;">// 沙箱全局代理对象类</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#B392F0;"> SandboxGlobalProxy {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">constructor</span><span style="color:#B392F0;">(blacklist) {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">// 创建一个 iframe 标签，取出其中的原生浏览器全局对象作为沙箱的全局对象</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">iframe</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">document</span><span style="color:#B392F0;">.createElement(</span><span style="color:#FFAB70;">&quot;iframe&quot;</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> { url</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;about:blank&quot;</span><span style="color:#B392F0;"> });</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">iframe</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">style</span><span style="color:#B392F0;">.display </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;none&quot;</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">document</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">body</span><span style="color:#B392F0;">.appendChild(iframe);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#6B737C;">// 获取当前HTMLIFrameElement的Window对象</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">sandboxGlobal</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">iframe</span><span style="color:#B392F0;">.contentWindow;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> Proxy(sandboxGlobal</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#6B737C;">// has 可以拦截 with 代码块中任意属性的访问</span></span>
<span class="line"><span style="color:#B392F0;">      has</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> (target</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> prop) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#6B737C;">// 黑名单中的变量禁止访问</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">blacklist</span><span style="color:#B392F0;">.includes(prop)) {</span></span>
<span class="line"><span style="color:#B392F0;">          </span><span style="color:#F97583;">throw</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> Error(</span><span style="color:#FFAB70;">\`Can&#39;t use: </span><span style="color:#F97583;">\${</span><span style="color:#B392F0;">prop</span><span style="color:#F97583;">}</span><span style="color:#FFAB70;">!\`</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#B392F0;">        }</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#6B737C;">// sandboxGlobal对象上不存在的属性，直接报错，实现禁用三方库调接口</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#F97583;">!</span><span style="color:#79B8FF;">target</span><span style="color:#B392F0;">.hasOwnProperty(prop)) {</span></span>
<span class="line"><span style="color:#B392F0;">          </span><span style="color:#F97583;">throw</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> Error(</span><span style="color:#FFAB70;">\`Not find: </span><span style="color:#F97583;">\${</span><span style="color:#B392F0;">prop</span><span style="color:#F97583;">}</span><span style="color:#FFAB70;">!\`</span><span style="color:#B392F0;">);</span></span>
<span class="line"><span style="color:#B392F0;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#6B737C;">// 返回true，获取当前提供上下文对象中的变量；如果返回false，会继续向上层作用域链中查找</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">true</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">      }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">    });</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 使用with关键字，来改变作用域</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> withedYourCode(code) {</span></span>
<span class="line"><span style="color:#B392F0;">  code </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;with(sandbox) {&quot;</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">+</span><span style="color:#B392F0;"> code </span><span style="color:#F97583;">+</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;}&quot;</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> Function(</span><span style="color:#FFAB70;">&quot;sandbox&quot;</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> code);</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 将指定的上下文对象，添加到待执行代码作用域的顶部</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> makeSandbox(code</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> ctx) {</span></span>
<span class="line"><span style="color:#B392F0;">  withedYourCode(code).call(ctx</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> ctx);</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 待执行的代码code，获取document对象</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">code</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">\`console.log(document)\`</span><span style="color:#B392F0;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 设置黑名单</span></span>
<span class="line"><span style="color:#6B737C;">// 经过小伙伴的指导，新添加Image字段，禁止使用new Image来调接口</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">blacklist</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> [</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#FFAB70;">&quot;window&quot;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#FFAB70;">&quot;document&quot;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#FFAB70;">&quot;XMLHttpRequest&quot;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#FFAB70;">&quot;fetch&quot;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#FFAB70;">&quot;WebSocket&quot;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#FFAB70;">&quot;Image&quot;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// 将globalProxy对象，添加到新环境作用域链的顶部</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">globalProxy</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> SandboxGlobalProxy(blacklist);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">makeSandbox(code</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> globalProxy);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br></div></div><h2 id="持续优化" tabindex="-1">持续优化 <a class="header-anchor" href="#持续优化" aria-hidden="true">#</a></h2><p>经过与评论区小伙伴的交流，可以通过 new Image() 调接口，确实是个漏洞</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 不需要创建DOM 发送图片请求</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">img</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Image</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">img</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">src</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;http://www.test.com/img.gif&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#6B737C;">// 不需要创建DOM 发送图片请求</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#B392F0;"> img </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> Image();</span></span>
<span class="line"><span style="color:#79B8FF;">img</span><span style="color:#B392F0;">.src </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&quot;http://www.test.com/img.gif&quot;</span><span style="color:#B392F0;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>黑名单中添加&#39;Image&#39;字段，堵上这个漏洞</p>`,79)]))}const b=n(o,[["render",e]]);export{i as __pageData,b as default};
